{"version":3,"sources":["mvc/toolshed/util.js"],"names":["searchShed","request","response","that","this","shed_url","base_url","Galaxy","root","$","get","term","tool_shed_url","data","result_list","shedParser","results","each","hits","hit","record","label","repository","name","repo_owner_username","jsondata","id","result","addToQueue","metadata","substr","length","repository_id","changeset_revision","queued_repos","JSON","parse","localStorage","repositories","stringify","queueLength","repo_queue","Object","keys"],"mappings":"4HA4CKA,WA5CY,SAASC,EAASC,GAC/B,IAAIC,EAAOC,KACPC,EAAWD,KAAKC,SAChBC,EAAcC,OAAOC,KAArB,uBACJC,EAAEC,IAAIJ,GAAYK,KAAMV,EAAQU,KAAMC,cAAeP,GAAY,SAAAQ,GAC7D,IAAIC,EAAcX,EAAKY,WAAWF,GALtCb,EAAAA,MA6CHe,WAzCST,SAAAA,GACF,IAAAU,KACAd,EAAAA,EAASY,KAST,OARHL,EAAAQ,KAHDC,EAAA,SAAAC,GAJJ,IAAAC,EAAAF,EAAAC,GAeYE,EAAWD,EAAOE,WAAWC,KAA7B,OAAwCH,EAAOE,WAAWE,oBAA1D,KALRT,EAAAA,WAAAA,YAEIG,GAAOO,MAASP,EAApBI,WAAAI,GAAAL,MAAAA,GACAZ,EAAOS,KAAMS,KAETX,GAmCJY,WArCA,SAAAC,GAQA,KAAAA,EAAOb,cAAPc,QAAA,KAXJD,EAAAjB,cAAAiB,EAAAjB,cAAAkB,OAAA,EAAAD,EAAAjB,cAAAmB,OAAA,IAcA,IAAIH,EAAAA,EAAahB,cAAbgB,IAAaC,EAAYG,cAAzBJ,IAAyBC,EAAAI,mBACzBC,EAAatB,IAAAA,OACTiB,aAASjB,eACZsB,EAAAC,KAAAC,MAAAC,aAAAC,eAEDJ,EAAIA,GAAAA,EACJG,aAAIA,aAAaC,KAAjBC,UAA+BL,IAqB/BM,YAlBAN,WACAG,GAAAA,aAAaC,eAAeH,gBAAeD,CAV/C,IAAAO,EAAAN,KAAAC,MAAAC,aAAAC,cAaIE,OAGuBE,OAAOC,KAAKF,GAAYV,OAD3C,OAAA","file":"../../../scripts/mvc/toolshed/util.js","sourcesContent":["var searchShed = function(request, response) {\n    var that = this;\n    var shed_url = this.shed_url;\n    var base_url = `${Galaxy.root}api/tool_shed/search`;\n    $.get(base_url, { term: request.term, tool_shed_url: shed_url }, data => {\n        var result_list = that.shedParser(data);\n        response(result_list);\n    });\n};\n\nvar shedParser = jsondata => {\n    var results = [];\n    var hits = jsondata.hits;\n    $.each(hits, hit => {\n        var record = hits[hit];\n        var label = `${record.repository.name} by ${record.repository.repo_owner_username}: ${\n            record.repository.description\n        }`;\n        var result = { value: record.repository.id, label: label };\n        results.push(result);\n    });\n    return results;\n};\n\nvar addToQueue = metadata => {\n    if (metadata.tool_shed_url.substr(-1) == \"/\") {\n        metadata.tool_shed_url = metadata.tool_shed_url.substr(0, metadata.tool_shed_url.length - 1);\n    }\n    var key = `${metadata.tool_shed_url}|${metadata.repository_id}|${metadata.changeset_revision}`;\n    var queued_repos = new Object();\n    if (localStorage.repositories) {\n        queued_repos = JSON.parse(localStorage.repositories);\n    }\n    queued_repos[key] = metadata;\n    localStorage.repositories = JSON.stringify(queued_repos);\n};\n\nvar queueLength = () => {\n    if (localStorage.hasOwnProperty(\"repositories\")) {\n        var repo_queue = JSON.parse(localStorage.repositories);\n        var queue_length = Object.keys(repo_queue).length;\n        return queue_length;\n    } else {\n        return 0;\n    }\n};\n\nexport default {\n    searchShed: searchShed,\n    shedParser: shedParser,\n    addToQueue: addToQueue,\n    queueLength: queueLength\n};\n"]}