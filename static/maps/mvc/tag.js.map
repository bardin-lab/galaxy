{"version":3,"sources":["mvc/tag.js"],"names":["TagsEditor","Backbone","View","extend","_baseMvc2","default","LoggableMixin","HiddenUntilActivatedViewMixin","tagName","className","select_width","events","initialize","options","this","show_editor","usePrompt","label","_localization2","workflow_mode","click","keydown","hiddenUntilActivated","$activator","render","self","$el","html","_workflowTemplate","_defaultTemplate","$input","placeholder","width","tags","_getTagsUsed","_setUpBehaviors","_hashToName","select2","tag","_nameToHash","startsWith","_renderEditor","join","_renderTags","keydownHandler","e","which","showEditor","hideEditor","tagsToCSV","model","get","addButton","Galaxy","root","_","each","renderString","indexOf","slice","renderedArray","push","length","tagsArray","sort","find","map","user","on","event","val","save","_addNewTagToTagsUsed","added","text","newTag","tagsUsed","contains","set","remove","stopListening","call"],"mappings":"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","file":"../../scripts/mvc/tag.js","sourcesContent":["import baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\n// =============================================================================\n/** A view on any model that has a 'tags' attribute (a list of tag strings)\n *      Incorporates the select2 jQuery plugin for tags display/editing:\n *      http://ivaynberg.github.io/select2/\n */\nvar TagsEditor = Backbone.View.extend(baseMVC.LoggableMixin)\n    .extend(baseMVC.HiddenUntilActivatedViewMixin)\n    .extend({\n        tagName: \"div\",\n        className: \"tags-display\",\n        select_width: \"100%\",\n        events: {},\n\n        /** Set up listeners, parse options */\n        initialize: function(options) {\n            //console.debug( this, options );\n            // only listen to the model only for changes to tags - re-render\n            this.show_editor = false;\n            if (options.usePrompt === false) {\n                this.label = \"\";\n            } else {\n                this.label = `<label class=\"prompt\">${_l(\"Tags\")}</label>`;\n            }\n            this.workflow_mode = options.workflow_mode || false;\n            if (this.workflow_mode) {\n                this.events.click = \"showEditor\";\n                this.events.keydown = \"keydownHandler\";\n            }\n            this.hiddenUntilActivated(options.$activator, options);\n        },\n\n        /** Build the DOM elements, call select to on the created input, and set up behaviors */\n        render: function() {\n            var self = this;\n            if (this.workflow_mode) {\n                this.$el.html(this._workflowTemplate());\n            } else {\n                this.$el.html(this._defaultTemplate());\n            }\n            this.$input().select2({\n                placeholder: \"Add tags\",\n                width: this.workflow_mode ? this.width : this.select_width,\n                tags: function() {\n                    // initialize possible tags in the dropdown based on all the tags the user has used so far\n                    return self._getTagsUsed();\n                }\n            });\n\n            this._setUpBehaviors();\n            return this;\n        },\n\n        _hashToName: function(tag) {\n            if (tag.startsWith(\"#\")) {\n                return `name:${tag.slice(1)}`;\n            }\n            return tag;\n        },\n\n        _nameToHash: function(tag) {\n            if (tag.startsWith(\"name:\")) {\n                tag = `#${tag.slice(5)}`;\n            }\n            return tag;\n        },\n\n        /** @returns {String} the html text used to build the view's DOM */\n        _defaultTemplate: function() {\n            return [this.label, this._renderEditor()].join(\"\");\n        },\n\n        _workflowTemplate: function() {\n            // Shows labels by default, event handler controls whether we show tags or editor\n            return [this.show_editor ? this._renderEditor() : this._renderTags()].join(\" \");\n        },\n\n        keydownHandler: function(e) {\n            switch (e.which) {\n                // esc\n                case 27:\n                    // hide the tag editor when pressing escape\n                    this.hideEditor();\n                    break;\n            }\n        },\n\n        showEditor: function() {\n            this.show_editor = true;\n            this.render();\n        },\n\n        hideEditor: function() {\n            this.show_editor = false;\n            this.render();\n        },\n\n        _renderEditor: function() {\n            // set up initial tags by adding as CSV to input vals (necc. to init select2)\n            return `<input class=\"tags-input\" value=\"${this.tagsToCSV()}\"/>`;\n        },\n\n        _renderTags: function() {\n            var tags = this.model.get(\"tags\");\n            var addButton = `${Galaxy.root}static/images/fugue/tag--plus.png`;\n            var renderedArray = [];\n            _.each(tags, tag => {\n                tag = tag.indexOf(\"name:\") == 0 ? tag.slice(5) : tag;\n                var renderString = `<span class=\"label label-info\">${tag}</span>`;\n                renderedArray.push(renderString);\n            });\n            if (renderedArray.length === 0) {\n                // If there are no tags to render we just show the add-tag-button\n                renderedArray.push(`<img src=${addButton} class=\"add-tag-button\" title=\"Add tags\"/>`);\n            }\n            return renderedArray.join(\" \");\n        },\n\n        /** @returns {String} the sorted, comma-separated tags from the model */\n        tagsToCSV: function() {\n            var self = this;\n            var tagsArray = this.model.get(\"tags\");\n            if (!_.isArray(tagsArray) || _.isEmpty(tagsArray)) {\n                return \"\";\n            }\n            return tagsArray\n                .map(tag => _.escape(self._nameToHash(tag)))\n                .sort()\n                .join(\",\");\n        },\n\n        /** @returns {jQuery} the input for this view */\n        $input: function() {\n            return this.$el.find(\"input.tags-input\");\n        },\n\n        /** @returns {String[]} all tags used by the current user */\n        _getTagsUsed: function() {\n            //TODO: global\n            var self = this;\n            return _.map(Galaxy.user.get(\"tags_used\"), self._nameToHash);\n        },\n\n        /** set up any event listeners on the view's DOM (mostly handled by select2) */\n        _setUpBehaviors: function() {\n            var self = this;\n            this.$input().on(\"change\", event => {\n                // Modify any 'hashtag' 'nametags'\n                event.val = _.map(event.val, self._hashToName);\n                // save the model's tags in either remove or added event\n                self.model.save({ tags: event.val });\n                // if it's new, add the tag to the users tags\n                if (event.added) {\n                    //??: solve weird behavior in FF on test.galaxyproject.org where\n                    //  event.added.text is string object: 'String{ 0=\"o\", 1=\"n\", 2=\"e\" }'\n                    self._addNewTagToTagsUsed(`${event.added.text}`);\n                }\n            });\n        },\n\n        /** add a new tag (if not already there) to the list of all tags used by the user\n         *  @param {String} newTag  the tag to add to the list of used\n         */\n        _addNewTagToTagsUsed: function(newTag) {\n            //TODO: global\n            var tagsUsed = Galaxy.user.get(\"tags_used\");\n            if (!_.contains(tagsUsed, newTag)) {\n                tagsUsed.push(newTag);\n                tagsUsed.sort();\n                Galaxy.user.set(\"tags_used\", tagsUsed);\n            }\n        },\n\n        /** shut down event listeners and remove this view's DOM */\n        remove: function() {\n            this.$input.off();\n            this.stopListening(this.model);\n            Backbone.View.prototype.remove.call(this);\n        },\n\n        /** string rep */\n        toString: function() {\n            return [\"TagsEditor(\", `${this.model}`, \")\"].join(\"\");\n        }\n    });\n\nexport default {\n    TagsEditor: TagsEditor\n};\n"]}