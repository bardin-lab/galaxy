{"version":3,"sources":["mvc/webhooks.js"],"names":["filterType","data","type","Webhooks","Backbone","Collection","url","item","get","itype","indexOf","weightedRandomPick","weights","pluck","sum","toolId","options","a","b","normalizedWeightsMap","Map","forEach","attr","index","set","parseFloat","toolVersion","toFixed","webhooks","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","success","_ref","_step","value","_ref2","_slicedToArray","i","err","_iterator","return","at","table","Math","floor","random","length","extend","Galaxy","root","WebhookView","View","el","initialize","_this","this","$el","fetch","reset","render","model","webhook","toJSON","html","id","_utils2","default","appendScriptStyle","async","callback"],"mappings":"2EAoDA,SAASA,EAAWC,EAAMC,GAlD1B,OAAMC,EAAAA,OAAWC,OAASC,SAAAA,GACtBC,IAAAA,EAAKC,EAAAC,IAAW,QACZ,QAAAC,IACH,IAAAA,EAAAC,QAAAR,KAM6B,SAAAS,EAAAV,GAqD9B,IAAMW,EAAUX,EAAKY,MAAM,UApDvBC,EAAMC,EAAAA,OAASC,SAAAA,EAAQD,GAARC,OAAAC,EAAfC,IAuDEC,EAAuB,IAAIC,IApD7BR,EAAAS,QAAA,SAASC,EAAKC,GACdJ,EAAcK,IAAAD,EAAdE,YAA8BC,EAA9BZ,GAAAa,QAAA,OAGAC,IAAAA,KAR0BC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAStBC,IAAAA,IAAAA,EAAAA,EAASd,EAATc,OAAAA,cAAAA,GAAAA,EAAAA,EAAAA,QAAAA,MAAAA,GAAAA,EACI,IAAA,IADaC,EAAAC,EAAAC,MAAAC,EAAAC,EAAAJ,EAAA,GAAjBD,EAAiBI,EAAA,GAAjBJ,EAAiBI,EAAA,GACbE,EAAA,EAAIvB,EAAJ,IAAIA,EAAcuB,IACdtC,EAAAA,KAAAA,GAXc,MAAAuC,GAAAV,GAAA,EAAAC,EAAAS,EAAA,QAAA,KAAAX,GAAAY,EAAAC,QAAAD,EAAAC,SAAA,QAAA,GAAAZ,EAAA,MAAAC,GAejB,OAAA9B,EAAA0C,GAAAC,EAAAC,KAAAC,MAAAD,KAAAE,SAAAH,EAAAI,4hBAxBX7C,EAAWC,SAASC,WAAW4C,QACjC3C,IAAK,WACD,OAAU4C,OAAOC,KAAjB,kBAIFC,EAAchD,SAASiD,KAAKJ,QAC9BK,GAAI,gBAEJC,WAAY,SAASvC,GAAS,IAAAwC,EAAAC,KACpB1C,EAASC,EAAQD,QAAU,GAC3BW,EAAcV,EAAQU,aAAe,GAE3C+B,KAAKC,IAAIpC,KAAK,UAAWP,GACzB0C,KAAKC,IAAIpC,KAAK,eAAgBI,IAEb,IAAIvB,GACZwD,OACL1B,QAAS,SAAAhC,GACDe,EAAQd,MACRD,EAAK2D,MAAM5D,EAAWC,EAAMe,EAAQd,OAEpCD,EAAK+C,OAAS,GACdQ,EAAKK,OAAOlD,EAAmBV,QAM/C4D,OAAQ,SAASC,GACb,IAAMC,EAAUD,EAAME,SAGtB,OAFAP,KAAKC,IAAIO,KAAT,YAA0BF,EAAQG,GAAlC,YACAC,EAAAC,QAAMC,kBAAkBN,GACjBN,mBAgDXL,YAAaA,EApDbS,KAQS,SAAA7C,IACQ,IAAIb,GACZwD,OACLW,WAAyBtC,IAAlBhB,EAAQsD,OAAsBtD,EAAQsD,MAC7CrC,QAAS,SAAAhC,GACDe,EAAQd,MACRD,EAAK2D,MAAM5D,EAAWC,EAAMe,EAAQd,OAExCc,EAAQuD,SAAStE","file":"../../scripts/mvc/webhooks.js","sourcesContent":["import Utils from \"utils/utils\";\n\nconst Webhooks = Backbone.Collection.extend({\n    url: function() {\n        return `${Galaxy.root}api/webhooks`;\n    }\n});\n\nconst WebhookView = Backbone.View.extend({\n    el: \"#webhook-view\",\n\n    initialize: function(options) {\n        const toolId = options.toolId || \"\";\n        const toolVersion = options.toolVersion || \"\";\n\n        this.$el.attr(\"tool_id\", toolId);\n        this.$el.attr(\"tool_version\", toolVersion);\n\n        const webhooks = new Webhooks();\n        webhooks.fetch({\n            success: data => {\n                if (options.type) {\n                    data.reset(filterType(data, options.type));\n                }\n                if (data.length > 0) {\n                    this.render(weightedRandomPick(data));\n                }\n            }\n        });\n    },\n\n    render: function(model) {\n        const webhook = model.toJSON();\n        this.$el.html(`<div id=\"${webhook.id}\"></div>`);\n        Utils.appendScriptStyle(webhook);\n        return this;\n    }\n});\n\nconst load = options => {\n    const webhooks = new Webhooks();\n    webhooks.fetch({\n        async: options.async !== undefined ? options.async : true,\n        success: data => {\n            if (options.type) {\n                data.reset(filterType(data, options.type));\n            }\n            options.callback(data);\n        }\n    });\n};\n\nfunction filterType(data, type) {\n    return data.models.filter(item => {\n        let itype = item.get(\"type\");\n        if (itype) {\n            return itype.indexOf(type) !== -1;\n        } else {\n            return false;\n        }\n    });\n}\n\nfunction weightedRandomPick(data) {\n    const weights = data.pluck(\"weight\");\n    const sum = weights.reduce((a, b) => a + b);\n\n    const normalizedWeightsMap = new Map();\n    weights.forEach((weight, index) => {\n        normalizedWeightsMap.set(index, parseFloat((weight / sum).toFixed(2)));\n    });\n\n    const table = [];\n    for (const [index, weight] of normalizedWeightsMap) {\n        for (let i = 0; i < weight * 100; i++) {\n            table.push(index);\n        }\n    }\n\n    return data.at(table[Math.floor(Math.random() * table.length)]);\n}\n\nexport default {\n    WebhookView: WebhookView,\n    load: load\n};\n"]}