{"version":3,"sources":["mvc/collection/collection-view-edit.js"],"names":["_super","_collectionView2","default","CollectionView","CollectionViewEdit","extend","DatasetDCEViewClass","_collectionLiEdit2","DatasetDCEListItemEdit","NestedDCDCEViewClass","NestedDCDCEListItemEdit","getNestedDCDCEViewClass","foldoutPanelClass","initialize","attributes","prototype","call","this","$where","$el","model","Galaxy","user","isAnonymous","panel","_setUpBehaviors","tooltip","placement","make_text_editable","on_finish","newName","previousName","get","text","save","name","fail","find","previous","nameSelector","_tag2","TagsEditor","onshowFirstTime","tagsEditor","toggle","toString"],"mappings":"qbAeIA,EAASC,EAAAC,QAAQC,eACjBC,EAAqBJ,EAAOK,QAQxBC,oBAAqBC,EAAAL,QAAQM,uBAE7BC,qBAAsBF,EAAAL,QAAQQ,wBAE9BC,wBAAyB,WACrB,OAAOJ,EAAAL,QAAQQ,wBAAwBL,QACnCO,kBAAmBR,KAV3BS,WAAA,SAAAC,GACAd,EAAAe,UAAAF,WAAAG,KAAAC,KAAAH,IAKAL,gBAAAA,SAAsBS,GAGlB,GAgBAA,EAASA,GAAUD,KAAKE,IAjB5BR,EAAAA,UAAAA,gBAAyBK,KAAAC,KAAAC,GACrBD,KAAOG,OAKXC,OAAAC,OAAAD,OAAAC,KAAAC,cAAA,CAIAV,KAAAA,iBAAY,EAqBR,IAAIW,EAAQP,KAfhBQ,EACIP,KAgBmB,qBAfnBlB,KAAOe,SAAUU,EAAAA,EAAAA,SAAAA,+BACZC,SAALC,UAAiB,WACbC,oBACHC,UAAA,SAAAC,GAmBW,IAAIC,EAAeP,EAAMJ,MAAMY,IAAI,QAjB/CF,GAAAA,IAAAC,GACIP,EAAgBH,IAAAA,KASD,qBATnBY,KAA+CH,GAC3CN,EAAAJ,MAAAc,MAAAC,KAAAL,IAAAM,KAAA,WACHZ,EAAAL,IAAAkB,KAOkB,qBAPlBJ,KAAAT,EAAAJ,MAAAkB,SAAA,YAqBed,EAAML,IAAIkB,KAdP,qBAc0BJ,KAAKF,MAdlDd,KAAIsB,WAAAA,IAAeC,EAAAtC,QAAAuC,YACnBvB,MAAAD,KACUsB,MAIFV,GAAAA,EAAWQ,KAAA,iBACPK,gBAAIX,WACJd,KAAIa,UAEAN,WAAAA,IAECP,KAAA0B,WAFDC,QAAA,KALQC,SAJxB,WAiBA,MAAA,uBAAsB5B,KAAAG,MAAKqB,KAAWrB,MAAAY,IAAA,QAAA,IAAtC,kBAAsC5B,mBAAtCA","file":"../../../scripts/mvc/collection/collection-view-edit.js","sourcesContent":["import DC_VIEW from \"mvc/collection/collection-view\";\nimport DC_MODEL from \"mvc/collection/collection-model\";\nimport DC_EDIT from \"mvc/collection/collection-li-edit\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport TAGS from \"mvc/tag\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport _l from \"utils/localization\";\nimport \"ui/editable-text\";\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class editable View/Controller for a dataset collection.\n */\nvar _super = DC_VIEW.CollectionView;\nvar CollectionViewEdit = _super.extend(\n    /** @lends CollectionView.prototype */ {\n        //MODEL is either a DatasetCollection (or subclass) or a DatasetCollectionElement (list of pairs)\n\n        /** logger used to record this.log messages, commonly set to console */\n        //logger              : console,\n\n        /** sub view class used for datasets */\n        DatasetDCEViewClass: DC_EDIT.DatasetDCEListItemEdit,\n        /** sub view class used for nested collections */\n        NestedDCDCEViewClass: DC_EDIT.NestedDCDCEListItemEdit,\n\n        getNestedDCDCEViewClass: function() {\n            return DC_EDIT.NestedDCDCEListItemEdit.extend({\n                foldoutPanelClass: CollectionViewEdit\n            });\n        },\n\n        // ......................................................................... SET UP\n        /** Set up the view, set up storage, bind listeners to HistoryContents events\n         *  @param {Object} attributes optional settings for the panel\n         */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n        },\n\n        /** In this override, make the collection name editable\n         */\n        _setUpBehaviors: function($where) {\n            $where = $where || this.$el;\n            _super.prototype._setUpBehaviors.call(this, $where);\n            if (!this.model) {\n                return;\n            }\n\n            // anon users shouldn't have access to any of the following\n            if (!Galaxy.user || Galaxy.user.isAnonymous()) {\n                return;\n            }\n\n            this.tagsEditorShown = true;\n\n            //TODO: extract\n            var panel = this;\n\n            var nameSelector = \"> .controls .name\";\n            $where\n                .find(nameSelector)\n                .attr(\"title\", _l(\"Click to rename collection\"))\n                .tooltip({ placement: \"bottom\" })\n                .make_text_editable({\n                    on_finish: function(newName) {\n                        var previousName = panel.model.get(\"name\");\n                        if (newName && newName !== previousName) {\n                            panel.$el.find(nameSelector).text(newName);\n                            panel.model.save({ name: newName }).fail(() => {\n                                panel.$el.find(nameSelector).text(panel.model.previous(\"name\"));\n                            });\n                        } else {\n                            panel.$el.find(nameSelector).text(previousName);\n                        }\n                    }\n                });\n            this.tagsEditor = new TAGS.TagsEditor({\n                model: this.model,\n                el: $where.find(\".tags-display\"),\n                onshowFirstTime: function() {\n                    this.render();\n                },\n                usePrompt: false\n            });\n            this.tagsEditor.toggle(true);\n        },\n\n        // ........................................................................ misc\n        /** string rep */\n        toString: function() {\n            return `CollectionViewEdit(${this.model ? this.model.get(\"name\") : \"\"})`;\n        }\n    }\n);\n\n//==============================================================================\nexport default {\n    CollectionViewEdit: CollectionViewEdit\n};\n"]}