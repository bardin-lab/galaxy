{"version":3,"sources":["mvc/history/multi-panel.js"],"names":["_","Backbone","HistoryViewColumn","View","extend","_baseMvc2","default","LoggableMixin","_logNamespace","tagName","className","id","this","model","get","initialize","options","purgeAllowed","isUndefined","panel","createPanel","setUpListeners","panelOptions","_historyViewEdit2","HistoryViewEdit","defaults","dragItems","$scrollContainer","logNamespace","$el","_this","setUpPanelListeners","_this2","listenTo","rendered","trigger","view","$","off","inView","viewLeft","viewRight","columnLeft","offset","left","width","$panel","render","speed","undefined","modelData","toJSON","html","template","renderPanel","css","setUpBehaviors","columnRight","data","isCurrentHistory","currentHistory","controlsLeftTemplate","history","join","$list","before","_renderDropTargetHelp","events","setAsCurrent","click .delete-history","controlsRightTemplate","_this3","done","click .undelete-history","_this4","undelete","click .purge-history","_this5","confirm","purge","copy","_copyDialog2","_localization2","variable","toString","MultiPanelColumns","columnWidth","columnGap","log","addClass","collection","borderWidth","columnMap","headerHeight","footerHeight","columnOptions","controlsHeight","perPage","datasetSearch","hdaQueue","NamedAjaxQueue","historySearch","setCollection","histories","_this6","on","setUpCollectionListeners","fetchMore","stopListening","_historyModel2","HistoryCollection","models","_this7","error","errorHandler","forEach","add","addModels","sort","all-fetched","_postFetchAll","addAsCurrentColumn","set-as-current","setCurrentHistory","change:deleted change:purged","handleDeletedHistory","fetchData","oldCurrentColumn","height","scrollLeft","_recalcFirstColumnHeight","newCurrentColumn","column","includeDeleted","currentHistoryId","removeColumn","message","xhr","status","readyState","isString","_ajaxErrorHandler","_errorModal2","errorModal","ajaxErrorModal","apply","create","toArray","arguments","each","current","createColumns","_this8","createColumn","Galaxy","config","setUpColumnListeners","searchItems","allow_user_dataset_purge","newColumn","addColumn","_this9","remove","once","queueHdaFetch","widthToRemove","fadeOut","_this10","checkColumnsInView","_this11","in-view","_dropData","view:draggable:dragstart","ev","parse","dataTransfer","getData","currentColumnDropTargetOn","view:draggable:dragend","currentColumnDropTargetOff","droptarget:drop","toCopy","filter","json","contents","isCopyable","queue","name","currentPage","fn","fetchPage","content","responses","fetch","columnMapLength","Object","keys","length","sortedFilteredColumns","filters","sortedColumns","call","index","every","map","_this12","fxSpeed","renderColumns","isNumber","$middle","empty","_addColumns","sortedAndFiltered","allFetched","loadingIndicatorTemplate","columns","children","numExisting","i","_calcMiddleWidth","numColumns","fetchOptions","silent","contentsShown","values","ids","storage","allExpanded","details","fetchCurrentPage","jobStateSummariesCollection","_jobStatesModel2","FETCH_STATE_ON_ADD","running","start","queueHdaFetchDetails","haveDetails","progressivelyFetchDetails","_renderEmptyMessage","renderInfo","msg","text","click .done.btn","click .create-new.btn","click #include-deleted","click .order .set-order","click #toggle-deleted","close","window","location","toggleDeletedHistories","_clickToggleDeletedHistories","currentTarget","is","toggleOptionsPopover","show","root","_clickToggleDeletedDatasets","toggleDeletedDatasets","toggleShowDeleted","delay","_clickToggleHiddenDatasets","toggleHiddenDatasets","toggleShowHidden","_chooseOrder","orderKey","orderDescriptions","fetchFirst","currentHistoryModel","unshift","_this13","clear","_scrollLeft","val","_this14","_moreOptionsPopover","searchInput","placeholder","onfirstsearch","fetchAll","onsearch","matchesAll","onclear","searchFor","progress","deferred","curr","total","clearSearch","resize","debouncedInView","viewport","checkForEndOfScroll","parent","optionsPopoverTemplate","container","placement","popover","$firstColumn","first","middleHeight","controlHeight","find","_viewport","$outerMiddle","columnsInView","right","vp","scrollRight","currentColumn","dataDropped","prototype","dataDrop","dropTarget","mainTemplate","update_time","size","update_time-asc","name-dsc","size-asc"],"mappings":"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","file":"../../../scripts/mvc/history/multi-panel.js","sourcesContent":["import _l from \"utils/localization\";\nimport * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport HISTORY_MODEL from \"mvc/history/history-model\";\nimport HISTORY_VIEW_EDIT from \"mvc/history/history-view-edit\";\nimport JOB_STATES_MODEL from \"mvc/history/job-states-model\";\nimport historyCopyDialog from \"mvc/history/copy-dialog\";\nimport ERROR_MODAL from \"mvc/ui/error-modal\";\nimport baseMVC from \"mvc/base-mvc\";\nimport ajaxQueue from \"utils/ajax-queue\";\nimport \"ui/mode-button\";\nimport \"ui/search-input\";\n\n/* global $ */\n/* global Galaxy */\n\nvar logNamespace = \"history\";\n/* ==============================================================================\nTODO:\n\n============================================================================== */\n/** @class A container for a history panel that renders controls for that history (delete, copy, etc.) */\nvar HistoryViewColumn = Backbone.View.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    tagName: \"div\",\n    className: \"history-column flex-column flex-row-container\",\n    id: function id() {\n        if (!this.model) {\n            return \"\";\n        }\n        return `history-column-${this.model.get(\"id\")}`;\n    },\n\n    // ------------------------------------------------------------------------ set up\n    /** set up passed-in panel (if any) and listeners */\n    initialize: function initialize(options) {\n        options = options || {};\n        this.purgeAllowed = !_.isUndefined(options.purgeAllowed) ? options.purgeAllowed : false;\n        this.panel = options.panel || this.createPanel(options);\n\n        this.setUpListeners();\n    },\n\n    /** create a history panel for this column */\n    createPanel: function createPanel(panelOptions) {\n        return new HISTORY_VIEW_EDIT.HistoryViewEdit(\n            _.defaults(panelOptions, {\n                model: this.model,\n                // non-current panels should set their hdas to draggable\n                purgeAllowed: this.purgeAllowed,\n                dragItems: true,\n                $scrollContainer: function() {\n                    return this.$el;\n                }\n            })\n        );\n    },\n\n    /** set up reflexive listeners */\n    setUpListeners: function setUpListeners() {\n        //this.log( 'setUpListeners', this );\n        this.once(\"rendered\", () => {\n            this.trigger(\"rendered:initial\", this);\n        });\n        this.setUpPanelListeners();\n    },\n\n    /** set listeners needed for panel */\n    setUpPanelListeners: function setUpPanelListeners() {\n        this.listenTo(\n            this.panel,\n            {\n                //'all': function(){ console.info( 'panel of ' + this, arguments ); },\n\n                // assumes panel will take the longest to render\n                rendered: () => {\n                    this.trigger(\"rendered\", this);\n                },\n                // when a panel's view expands turn off the click handler on the rerun button so that it uses it's href\n                // this allows the button to open the tool rerun form in a new tab (instead of erroring)\n                // TODO: hack\n                \"view:expanded view:rendered\": function(view) {\n                    view.$(\".rerun-btn\").off();\n                }\n            },\n            this\n        );\n    },\n\n    /** do the dimensions of this column overlap the given (horizontal) browser coords? */\n    inView: function(viewLeft, viewRight) {\n        var columnLeft = this.$el.offset().left;\n        var columnRight = columnLeft + this.$el.width();\n        if (columnRight < viewLeft) {\n            return false;\n        }\n        if (columnLeft > viewRight) {\n            return false;\n        }\n        return true;\n    },\n\n    /** shortcut to the panel */\n    $panel: function $panel() {\n        return this.$(\".history-panel\");\n    },\n\n    // ------------------------------------------------------------------------ render\n    /** render ths column, its panel, and set up plugins */\n    render: function render(speed) {\n        speed = speed !== undefined ? speed : \"fast\";\n        //this.log( this + '.render', this.$el, this.el );\n        //TODO: not needed\n        var modelData = this.model ? this.model.toJSON() : {};\n        this.$el.html(this.template(modelData));\n        this.renderPanel(speed);\n        // jq 1.12 doesn't fade/show properly when display: flex, re-set here\n        this.panel.$el.css(\"display\", \"flex\");\n        // if model and not children\n        // template\n        // render controls\n        this.setUpBehaviors();\n        // add panel\n        return this;\n    },\n\n    /** set up plugins */\n    setUpBehaviors: function setUpBehaviors() {\n        //this.log( 'setUpBehaviors:', this );\n        // on panel size change, ...\n    },\n\n    /** column body template with inner div for panel based on data (model json) */\n    template: function template(data) {\n        data = _.extend(data || {}, {\n            isCurrentHistory: this.currentHistory\n        });\n        return $(\n            [\n                '<div class=\"panel-controls clear flex-row\">',\n                this.controlsLeftTemplate({\n                    history: data,\n                    view: this\n                }),\n                //'<button class=\"btn btn-default\">Herp</button>',\n                this.controlsRightTemplate({\n                    history: data,\n                    view: this\n                }),\n                \"</div>\",\n                '<div class=\"inner flex-row flex-column-container\">',\n                '<div id=\"history-',\n                data.id,\n                '\" class=\"history-column history-panel flex-column\"></div>',\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    /** render the panel contained in the column using speed for fx speed */\n    renderPanel: function renderPanel(speed) {\n        speed = speed !== undefined ? speed : \"fast\";\n        this.panel.setElement(this.$panel()).render(speed);\n        if (this.currentHistory) {\n            this.panel.$list().before(this.panel._renderDropTargetHelp());\n        }\n        return this;\n    },\n\n    // ------------------------------------------------------------------------ behaviors and events\n    /** event map */\n    events: {\n        // will make this the current history\n        \"click .switch-to.btn\": function() {\n            this.model.setAsCurrent();\n        },\n        //TODO: remove boiler plate from next 3\n        \"click .delete-history\": function() {\n            this.model._delete().done(data => {\n                this.render();\n            });\n        },\n        \"click .undelete-history\": function() {\n            this.model.undelete().done(data => {\n                this.render();\n            });\n        },\n        \"click .purge-history\": function() {\n            if (confirm(_l(\"This will permanently remove the data. Are you sure?\"))) {\n                this.model.purge().done(data => {\n                    this.render();\n                });\n            }\n        },\n        // will copy this history and make the copy the current history\n        \"click .copy-history\": \"copy\"\n    },\n\n    // ------------------------------------------------------------------------ non-current controls\n    /** Open a modal to get a new history name, copy it (if not canceled), and makes the copy current */\n    copy: function copy() {\n        historyCopyDialog(this.model);\n    },\n\n    // ------------------------------------------------------------------------ templates\n    /** controls template displaying controls above the panel based on this.currentHistory */\n    controlsLeftTemplate: _.template(\n        [\n            '<div class=\"pull-left\">',\n            \"<% if( data.history.isCurrentHistory ){ %>\",\n            '<strong class=\"current-label\">',\n            _l(\"Current History\"),\n            \"</strong>\",\n            \"<% } else { %>\",\n            '<button class=\"switch-to btn btn-default\">',\n            _l(\"Switch to\"),\n            \"</button>\",\n            \"<% } %>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"data\" }\n    ),\n\n    /** controls template displaying controls above the panel based on this.currentHistory */\n    controlsRightTemplate: _.template(\n        [\n            '<div class=\"pull-right\">',\n            \"<% if( !data.history.purged ){ %>\",\n            '<div class=\"panel-menu btn-group\">',\n            '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n            '<span class=\"caret\"></span>',\n            \"</button>\",\n            '<ul class=\"dropdown-menu pull-right\" role=\"menu\">',\n            \"<% if( !data.history.deleted ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"copy-history\">',\n            _l(\"Copy\"),\n            \"</a></li>\",\n            //'<li><a href=\"javascript:void(0);\" class=\"publish-history\">',\n            //    _l( 'Publish' ),\n            //'</a></li>',\n            '<li><a href=\"javascript:void(0);\" class=\"delete-history\">',\n            _l(\"Delete\"),\n            \"</a></li>\",\n            \"<% } else /* if is deleted */ { %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"undelete-history\">',\n            _l(\"Undelete\"),\n            \"</a></li>\",\n            \"<% } %>\",\n            \"<% if( data.view.purgeAllowed ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"purge-history\">',\n            _l(\"Purge\"),\n            \"</a></li>\",\n            \"<% } %>\",\n            \"</ul>\",\n            \"</div>\",\n            \"<% } %>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"data\" }\n    ),\n\n    // ------------------------------------------------------------------------ misc\n    /** String rep */\n    toString: function() {\n        return `HistoryViewColumn(${this.panel ? this.panel : \"\"})`;\n    }\n});\n\n//==============================================================================\n/** @class A view of a HistoryCollection and displays histories similarly to the current history panel.\n */\nvar MultiPanelColumns = Backbone.View.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    className: \"multi-panel-history\",\n\n    // ------------------------------------------------------------------------ set up\n    /** Set up internals, history collection, and columns to display the history */\n    initialize: function initialize(options) {\n        options = options || {};\n        this.log(`${this}.init`, options);\n\n        // add the className here (since we gen. pass the el in options)\n        this.$el.addClass(this.className);\n\n        // --- instance vars\n        //TODO: move these to some defaults\n        this.options = {\n            columnWidth: 312,\n            borderWidth: 1,\n            columnGap: 8,\n            headerHeight: 29,\n            footerHeight: 0,\n            controlsHeight: 20\n        };\n\n        /** how many histories to get when fetching a new batch/page */\n        this.perPage = options.perPage || 10;\n\n        /** named ajax queue for loading hdas */\n        this.hdaQueue = new ajaxQueue.NamedAjaxQueue([], false);\n\n        // --- set up models, sub-views, and listeners\n        /** the original unfiltered and unordered collection of histories */\n        this.collection = null;\n        /** model id to column map */\n        this.columnMap = {};\n        /** model id to column map */\n        this.columnOptions = options.columnOptions || {};\n\n        /** what to search for within all histories */\n        this.historySearch = null;\n        /** what to search for within all datasets */\n        this.datasetSearch = null;\n\n        this.setCollection(options.histories);\n        this.setUpListeners();\n    },\n\n    /** Set up reflexive listeners */\n    setUpListeners: function setUpListeners() {\n        //multipanel.log( 'setUpListeners', multipanel );\n        this.on(\"end-of-scroll\", () => {\n            this.collection.fetchMore();\n        });\n    },\n\n    // ------------------------------------------------------------------------ collection\n    /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n    setCollection: function setCollection(collection) {\n        // console.log( 'setCollection:', collection );\n        this.stopListening(this.collection);\n\n        this.collection = collection || new HISTORY_MODEL.HistoryCollection();\n        this.setUpCollectionListeners();\n\n        this.createColumns();\n        this.hdaQueue.clear();\n\n        this.trigger(\"new-collection\", this);\n        return this;\n    },\n\n    /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n    addModels: function addModels(models, collection, options) {\n        // console.log( 'addModels:', models, collection, options );\n        options = options || {};\n        models = _.isArray(models) ? models : [models];\n        models.forEach(model => {\n            this.addColumn(model, false);\n            // if this is from a fetch, sort will be called and it will call render\n        });\n        return this;\n    },\n\n    /** Set up listeners for the collection - handling: added histories, change of current, deletion, and sorting */\n    setUpCollectionListeners: function() {\n        this.listenTo(this.collection, {\n            // handle ajax errors from the collection\n            error: this.errorHandler,\n            // add multiple models\n            add: this.addModels,\n            // when all the histories a user has have been fetched\n            \"all-fetched\": this._postFetchAll,\n            // handle addition of histories, triggered by column copy and create new\n            \"new-current\": this.addAsCurrentColumn,\n            // handle setting a history as current, triggered by history.setAsCurrent\n            \"set-as-current\": this.setCurrentHistory,\n            // handle deleting a history (depends on whether panels is including deleted or not)\n            \"change:deleted change:purged\": this.handleDeletedHistory,\n            // re-render columns after a sort\n            sort: function() {\n                this.renderColumns(0);\n            }\n        });\n    },\n\n    _postFetchAll: function(fetchData) {\n        // console.log( '_postFetchAll' );\n        this.$(\".histories-loading-indicator\").remove();\n        // when new histories is fetched and the indicator is not required,\n        // the panel will jump slightly left - totally aesthetic but jarring\n        // TODO: this probably would be best handled elsewhere during a refinement cycle (if any)\n        if (!this.historySearch) {\n            var $scrollContainer = this.$(\".outer-middle\");\n            $scrollContainer.scrollLeft($scrollContainer.scrollLeft() + 24);\n        }\n    },\n\n    /** Re-render and set currentHistoryId to reflect a new current history */\n    setCurrentHistory: function setCurrentHistory(history) {\n        this.log(\"setCurrentHistory:\", history);\n        var oldCurrentColumn = _.findWhere(this.columnMap, {\n            currentHistory: true\n        });\n        if (oldCurrentColumn) {\n            oldCurrentColumn.currentHistory = false;\n            oldCurrentColumn.$el.height(\"\");\n        }\n\n        var newCurrentColumn = this.columnMap[this.collection.currentHistoryId];\n        newCurrentColumn.currentHistory = true;\n        this.collection.sort();\n        this._recalcFirstColumnHeight();\n        return newCurrentColumn;\n    },\n\n    /** Either remove a deleted history or re-render it to show the deleted message\n     *      based on collection.includeDeleted\n     */\n    handleDeletedHistory: function handleDeletedHistory(history) {\n        if (history.get(\"deleted\") || history.get(\"purged\")) {\n            this.log(\"handleDeletedHistory\", this.collection.includeDeleted, history);\n            var column = this.columnMap[history.id];\n            if (!column) {\n                return;\n            }\n\n            // if it's the current column, create a new, empty history as the new current\n            if (column.model.id === this.collection.currentHistoryId) {\n                //TODO: figuring out the order of async here is tricky\n                //  - for now let the user handle the two step process\n                //multipanel.collection.create().done( function(){\n                //    if( !multipanel.collection.includeDeleted ){ multipanel.removeColumn( column, false ); }\n                //});\n            } else if (!this.collection.includeDeleted) {\n                this.removeColumn(column);\n            }\n        }\n    },\n\n    // ........................................................................ error handling\n    /** Event handler for errors (from the history collection mainly)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  (e.g. this.trigger( 'error', 'Heres a message', 'Heres a title' ))\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n    errorHandler: function(model, xhr, options) {\n        // interrupted ajax or no connection\n        if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n            // return ERROR_MODAL.offlineErrorModal();\n            // fail silently\n            return;\n        }\n        // otherwise, leave something to report in the console\n        this.error(model, xhr, options);\n        // and feedback to a modal\n        // if sent two strings (and possibly details as 'options'), use those as message and title\n        if (_.isString(model) && _.isString(xhr)) {\n            var message = model;\n            var title = xhr;\n            return ERROR_MODAL.errorModal(message, title, options);\n        }\n        // bad gateway\n        // TODO: possibly to global handler\n        if (xhr && xhr.status === 502) {\n            return ERROR_MODAL.badGatewayErrorModal();\n        }\n        return ERROR_MODAL.ajaxErrorModal(model, xhr, options);\n    },\n\n    /** If Galaxy object is available handle error there, otherwise, locally (and crudely) */\n    _ajaxErrorHandler: function() {\n        ERROR_MODAL.ajaxErrorModal.apply(null, _.toArray(arguments));\n    },\n\n    /** create a new history and set it to current */\n    create: function(ev) {\n        return this.collection.create({ current: true });\n    },\n\n    // ------------------------------------------------------------------------ columns\n    /** create columns from collection */\n    createColumns: function createColumns(models, columnOptions) {\n        columnOptions = columnOptions || this.options.columnOptions;\n        // clear column map\n        // TODO: make cummulative\n        this.columnMap = {};\n        this.collection.each((model, i) => {\n            this.columnMap[model.id] = this.createColumn(model, columnOptions);\n        });\n    },\n\n    /** create a column and its panel and set up any listeners to them */\n    createColumn: function createColumn(history, options) {\n        // options passed can be re-used, so extend them before adding the model to prevent pollution for the next\n        options = _.extend({}, options, {\n            model: history,\n            purgeAllowed: Galaxy.config.allow_user_dataset_purge\n        });\n        var column = new HistoryViewColumn(options);\n        if (history.id === this.collection.currentHistoryId) {\n            column.currentHistory = true;\n        }\n        this.setUpColumnListeners(column);\n        if (this.datasetSearch) {\n            column.panel.searchItems(this.datasetSearch);\n            this.queueHdaFetchDetails(column);\n        }\n        return column;\n    },\n\n    /** add a new column for history and render all columns if render is true */\n    addColumn: function add(history, render) {\n        render = render !== undefined ? render : true;\n        var newColumn = this.createColumn(history);\n        this.columnMap[history.id] = newColumn;\n        if (render) {\n            this.renderColumns();\n        }\n        return newColumn;\n    },\n\n    /** add a new column for history and make it the current history/column */\n    addAsCurrentColumn: function add(history, collection, options) {\n        var newColumn = this.addColumn(history, false);\n        this.setCurrentHistory(history);\n        newColumn.once(\"rendered\", () => {\n            this.queueHdaFetch(newColumn);\n        });\n        return newColumn;\n    },\n\n    /** remove the given column, it's listeners, and optionally render */\n    removeColumn: function remove(column, render) {\n        render = render !== undefined ? render : true;\n        this.log(\"removeColumn\", column);\n        if (!column) {\n            return;\n        }\n        var widthToRemove = this.options.columnWidth + this.options.columnGap;\n        column.$el.fadeOut(\"fast\", () => {\n            if (render) {\n                $(this).remove();\n                this.$(\".middle\").width(this.$(\".middle\").width() - widthToRemove);\n                this.checkColumnsInView();\n                this._recalcFirstColumnHeight();\n            }\n\n            //TODO: to freeColumn (where Columns have freePanel)\n            this.stopListening(column.panel);\n            this.stopListening(column);\n            delete this.columnMap[column.model.id];\n            column.remove();\n        });\n    },\n\n    /** set up listeners for a column and it's panel - handling: hda lazy-loading, drag and drop */\n    setUpColumnListeners: function setUpColumnListeners(column) {\n        this.listenTo(column, {\n            //'all': function(){ console.info( 'column ' + column + ':', arguments ) },\n            \"in-view\": this.queueHdaFetch\n        });\n\n        this.listenTo(column.panel, {\n            //'all': function(){ console.info( 'panel ' + column.panel + ':', arguments ) },\n\n            \"view:draggable:dragstart\": (ev, view, panel, column) => {\n                this._dropData = JSON.parse(ev.dataTransfer.getData(\"text\"));\n                this.currentColumnDropTargetOn();\n            },\n            \"view:draggable:dragend\": (ev, view, panel, column) => {\n                this._dropData = null;\n                this.currentColumnDropTargetOff();\n            },\n            \"droptarget:drop\": (ev, data, panel) => {\n                //note: bad copy sources fail silently\n                var toCopy = this._dropData.filter(json => panel.model.contents.isCopyable(json));\n                this._dropData = null;\n\n                var queue = new ajaxQueue.NamedAjaxQueue();\n                if (panel.model.contents.currentPage !== 0) {\n                    queue.add({\n                        name: \"fetch-front-page\",\n                        fn: function() {\n                            return panel.model.contents.fetchPage(0);\n                        }\n                    });\n                }\n                // need to reverse to better match expected order\n                // TODO: reconsider order in list-view._setUpItemViewListeners, dragstart (instead of here)\n                toCopy.reverse().forEach(content => {\n                    queue.add({\n                        name: `copy-${content.id}`,\n                        fn: function() {\n                            return panel.model.contents.copy(content);\n                        }\n                    });\n                });\n                queue.start();\n                queue.done(responses => {\n                    panel.model.fetch();\n                });\n            }\n        });\n    },\n\n    /** conv. fn to count the columns in columnMap */\n    columnMapLength: function() {\n        return Object.keys(this.columnMap).length;\n    },\n\n    /** return array of Columns filtered by filters and sorted to match the collection\n     *  @param: filters Function[] array of filter fns\n     */\n    sortedFilteredColumns: function(filters) {\n        filters = filters || this.filters;\n        if (!filters || !filters.length) {\n            return this.sortedColumns();\n        }\n        return this.sortedColumns().filter((column, index) => {\n            var filtered = column.currentHistory || _.every(filters.map(filter => filter.call(column)));\n            return filtered;\n        });\n    },\n\n    /** return array of Columns sorted to match the collection */\n    sortedColumns: function() {\n        var sorted = this.collection.map((history, index) => this.columnMap[history.id]);\n        return sorted;\n    },\n\n    // ------------------------------------------------------------------------ render\n    /** Render this view, columns, and set up view plugins */\n    render: function render(speed) {\n        speed = speed !== undefined ? speed : this.fxSpeed;\n\n        this.log(`${this}.render`);\n        this.$el.html(this.mainTemplate(this));\n        this.renderColumns(speed);\n\n        // set the columns to full height allowed and set up behaviors for thie multipanel\n        this.setUpBehaviors();\n        //TODO: wrong - has to wait for columns to render\n        //  - create a column listener that fires this when all columns are rendered\n        this.trigger(\"rendered\", this);\n        return this;\n    },\n\n    /** Render the columns and panels */\n    renderColumns: function renderColumns(speed) {\n        speed = _.isNumber(speed) ? speed : this.fxSpeed;\n        // console.log( 'renderColumns:', speed );\n        // render columns and track the total number rendered, firing an event when all are rendered\n        var sortedAndFiltered = this.sortedFilteredColumns();\n        // console.log( '\\t sortedAndFiltered:', sortedAndFiltered );\n        var $middle = this.$(\".middle\").empty();\n\n        this._addColumns(sortedAndFiltered, speed);\n        if (!this.collection.allFetched) {\n            $middle.append(this.loadingIndicatorTemplate(this));\n        }\n        //TODO: sorta - at least their fx queue has started the re-rendering\n        this.trigger(\"columns-rendered\", sortedAndFiltered, this);\n\n        if (!this.datasetSearch || sortedAndFiltered.length > 1) {\n            // check for in-view, hda lazy-loading if so\n            this.checkColumnsInView();\n            // the first, current column has position: fixed and flex css will not apply - adjust height manually\n            this._recalcFirstColumnHeight();\n        }\n        return sortedAndFiltered;\n    },\n\n    _addColumns: function(columns, speed) {\n        speed = _.isNumber(speed) ? speed : this.fxSpeed;\n        var $middle = this.$(\".middle\");\n\n        var numExisting = $middle.children(\".history-column\").length;\n        $middle.width(this._calcMiddleWidth(columns.length + numExisting));\n\n        columns.forEach((column, i) => {\n            column\n                .delegateEvents()\n                .render(speed)\n                .$el.appendTo($middle);\n        });\n    },\n\n    _calcMiddleWidth: function(numColumns) {\n        var preventStackWidthAdj = 16;\n        return (\n            numColumns * (this.options.columnWidth + this.options.columnGap) +\n            // last column gap\n            this.options.columnGap +\n            // the amount that safely prevents stacking of columns when adding a new one\n            preventStackWidthAdj\n        );\n    },\n\n    //TODO: combine the following two more sensibly\n    //TODO: could have HistoryContents.haveDetails return false\n    //      if column.model.contents.length === 0 && !column.model.get( 'empty' ) then just check that\n    /** Get the *summary* contents of a column's history (and details on any expanded contents),\n     *      queueing the ajax call and using a named queue to prevent the call being sent twice\n     */\n    queueHdaFetch: function queueHdaFetch(column) {\n        // console.log( column.model + '.contentsShown:', column.model.contentsShown() );\n        var contents = column.model.contents;\n        // console.log( 'queueHdaFetch:', column, column.model.get( 'contents_active' ) );\n        // if the history model says it has hdas but none are present, queue an ajax req for them\n        if (contents.length === 0 && column.model.contentsShown()) {\n            var fetchOptions = { silent: true };\n            var ids = _.values(contents.storage.allExpanded()).join();\n            if (ids) {\n                fetchOptions.details = ids;\n            }\n            // this uses a 'named' queue so that duplicate requests are ignored\n            this.hdaQueue.add({\n                name: column.model.id,\n                fn: function() {\n                    return contents\n                        .fetchCurrentPage(fetchOptions)\n                        .done(() => {\n                            column.panel.renderItems();\n                        })\n                        .done(() => {\n                            if (!JOB_STATES_MODEL.FETCH_STATE_ON_ADD) {\n                                contents.jobStateSummariesCollection.fetch();\n                            }\n                        });\n                }\n            });\n            // the queue is re-used, so if it's not processing requests - start it again\n            if (!this.hdaQueue.running) {\n                this.hdaQueue.start();\n            }\n        }\n    },\n\n    /** Get the *detailed* json for *all* of a column's history's contents - req'd for searching */\n    queueHdaFetchDetails: function(column) {\n        var contents = column.model.contents;\n        var needsContentsLoaded = contents.length === 0 && column.model.contentsShown();\n        if (needsContentsLoaded || !contents.haveDetails()) {\n            // this uses a 'named' queue so that duplicate requests are ignored\n            this.hdaQueue.add({\n                name: column.model.id,\n                fn: function() {\n                    return contents.progressivelyFetchDetails().done(() => {\n                        column.panel._renderEmptyMessage();\n                    });\n                }\n            });\n            // the queue is re-used, so if it's not processing requests - start it again\n            if (!this.hdaQueue.running) {\n                this.hdaQueue.start();\n            }\n        }\n    },\n\n    /** put a text msg in the header */\n    renderInfo: function(msg) {\n        return this.$(\".header .header-info\").text(msg);\n    },\n\n    // ------------------------------------------------------------------------ events/behaviors\n    events: {\n        // will move to the server root (gen. Analyze data)\n        \"click .done.btn\": \"close\",\n        // creates a new empty history and makes it current\n        \"click .create-new.btn\": \"create\",\n        \"click #include-deleted\": \"_clickToggleDeletedHistories\",\n        // these change the collection and column sort order\n        \"click .order .set-order\": \"_chooseOrder\",\n        \"click #toggle-deleted\": \"_clickToggleDeletedDatasets\",\n        \"click #toggle-hidden\": \"_clickToggleHiddenDatasets\"\n        //'dragstart .list-item .title-bar'                       : function( e ){ console.debug( 'ok' ); }\n    },\n\n    close: function(ev) {\n        //TODO: switch to pushState/router\n        window.location = Galaxy.root;\n    },\n\n    _clickToggleDeletedHistories: function(ev) {\n        this.toggleDeletedHistories($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    /** Include deleted histories in the collection */\n    toggleDeletedHistories: function(show) {\n        if (show) {\n            window.location = `${Galaxy.root}history/view_multiple?include_deleted_histories=True`;\n        } else {\n            window.location = `${Galaxy.root}history/view_multiple`;\n        }\n    },\n\n    _clickToggleDeletedDatasets: function(ev) {\n        this.toggleDeletedDatasets($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    toggleDeletedDatasets: function(show) {\n        show = show !== undefined ? show : false;\n        this.sortedFilteredColumns().forEach((column, i) => {\n            _.delay(() => {\n                column.panel.toggleShowDeleted(show, false);\n            }, i * 200);\n        });\n    },\n\n    _clickToggleHiddenDatasets: function(ev) {\n        this.toggleHiddenDatasets($(ev.currentTarget).is(\":checked\"));\n        this.toggleOptionsPopover();\n    },\n    toggleHiddenDatasets: function(show) {\n        show = show !== undefined ? show : false;\n        this.sortedFilteredColumns().forEach((column, i) => {\n            _.delay(() => {\n                column.panel.toggleShowHidden(show, false);\n            }, i * 200);\n        });\n    },\n\n    /** change the collection order and re-fetch when the drop down in the options menu is changed */\n    _chooseOrder: function(ev) {\n        var collection = this.collection;\n        var orderKey = $(ev.currentTarget).data(\"order\");\n        // set the sort order text also\n        this.$(\".current-order\").text(this.orderDescriptions[orderKey]);\n        this.toggleOptionsPopover();\n        // set the order and re-fetch using the new order, saving the current history as the first\n        collection.setOrder(orderKey);\n        var currentHistoryModel = collection.slice(0, 1);\n        collection.fetchFirst().done(() => {\n            collection.unshift(currentHistoryModel, {\n                silent: true\n            });\n            this.createColumns();\n            // need to clear this or previously fetched contents won't refetch now (bc of named queue)\n            this.hdaQueue.clear();\n            this.render();\n        });\n        this.once(\"columns-rendered\", this._scrollLeft);\n        //TODO: check allFetched and do not reset if so - just sort instead\n    },\n\n    /** scroll the column container right or left */\n    _scrollLeft: function(val) {\n        val = _.isNumber(val) ? val : 0;\n        this.$(\".outer-middle\").scrollLeft(val);\n    },\n\n    /** Set up any view plugins */\n    setUpBehaviors: function() {\n        this._moreOptionsPopover();\n\n        // input to search histories\n        this.$(\"#search-histories\").searchInput({\n            name: \"search-histories\",\n            placeholder: _l(\"search histories\"),\n\n            onfirstsearch: searchFor => {\n                this.$(\"#search-histories\").searchInput(\"toggle-loading\");\n                this.renderInfo(_l(\"loading all histories for search\"));\n                this.collection.fetchAll().done(() => {\n                    this.$(\"#search-histories\").searchInput(\"toggle-loading\");\n                    this.renderInfo(\"\");\n                });\n            },\n            onsearch: searchFor => {\n                this.historySearch = searchFor;\n                this.filters = [\n                    () => {\n                        return this.model.matchesAll(this.historySearch);\n                    }\n                ];\n                this.renderColumns(0);\n            },\n            onclear: searchFor => {\n                this.historySearch = null;\n                //TODO: remove specifically not just reset\n                this.filters = [];\n                this.renderColumns(0);\n            }\n        });\n\n        // input to search datasets\n        this.$(\"#search-datasets\").searchInput({\n            name: \"search-datasets\",\n            placeholder: _l(\"search all datasets\"),\n\n            onfirstsearch: searchFor => {\n                this.hdaQueue.clear();\n                this.$(\"#search-datasets\").searchInput(\"toggle-loading\");\n                this.datasetSearch = searchFor;\n                this.sortedFilteredColumns().forEach(column => {\n                    column.panel.searchItems(searchFor);\n                    // load details for them that need\n                    this.queueHdaFetchDetails(column);\n                });\n                this.hdaQueue.progress(progress => {\n                    this.renderInfo([_l(\"searching\"), progress.curr + 1, _l(\"of\"), progress.total].join(\" \"));\n                });\n                this.hdaQueue.deferred.done(() => {\n                    this.renderInfo(\"\");\n                    this.$(\"#search-datasets\").searchInput(\"toggle-loading\");\n                });\n            },\n            onsearch: searchFor => {\n                this.datasetSearch = searchFor;\n                this.sortedFilteredColumns().forEach(column => {\n                    column.panel.searchItems(searchFor);\n                });\n            },\n            onclear: searchFor => {\n                this.datasetSearch = null;\n                this.sortedFilteredColumns().forEach(column => {\n                    column.panel.clearSearch();\n                });\n            }\n        });\n\n        // resize first (fixed position) column on page resize\n        $(window).resize(() => {\n            this._recalcFirstColumnHeight();\n        });\n\n        // when scrolling - check for histories now in view: they will fire 'in-view' and queueHdaLoading if necc.\n        //TODO:?? might be able to simplify and not use pub-sub\n        var debouncedInView = _.debounce(() => {\n            var viewport = this._viewport();\n            this.checkColumnsInView(viewport);\n            this.checkForEndOfScroll(viewport);\n        }, 100);\n        this.$(\".middle\")\n            .parent()\n            .scroll(debouncedInView);\n    },\n\n    /** create the options popover */\n    _moreOptionsPopover: function() {\n        return this.$(\".open-more-options.btn\").popover({\n            container: \".header\",\n            placement: \"bottom\",\n            html: true,\n            content: $(this.optionsPopoverTemplate(this))\n        });\n    },\n\n    /** change the collection order and re-fetch when the drop down in the options menu is changed */\n    toggleOptionsPopover: function(ev) {\n        // hide seems broken in our version\n        this.$(\".open-more-options.btn\").popover(\"toggle\");\n    },\n\n    /** Adjust the height of the first, current column since flex-boxes won't work with fixed postiion elements */\n    _recalcFirstColumnHeight: function() {\n        var $firstColumn = this.$(\".history-column\").first();\n        var middleHeight = this.$(\".middle\").height();\n        var controlHeight = $firstColumn.find(\".panel-controls\").height();\n        $firstColumn\n            .height(middleHeight)\n            .find(\".inner\")\n            .height(middleHeight - controlHeight);\n    },\n\n    /** Get the left and right pixel coords of the middle element */\n    _viewport: function() {\n        var $outerMiddle = this.$(\".middle\").parent();\n        var viewLeft = $outerMiddle.offset().left;\n        var width = $outerMiddle.width();\n        return {\n            left: viewLeft,\n            right: viewLeft + width\n        };\n    },\n\n    /** returns the columns currently in the viewport */\n    columnsInView: function(viewport) {\n        //TODO: uses offset which is render intensive\n        //TODO: 2N - could use arg filter (sortedFilteredColumns( filter )) instead\n        var vp = viewport || this._viewport();\n        return this.sortedFilteredColumns().filter(column => column.currentHistory || column.inView(vp.left, vp.right));\n    },\n\n    //TODO: sortByInView - return cols in view, then others\n    /** trigger in-view from columns in-view */\n    checkColumnsInView: function() {\n        //TODO: assbackward - don't fire from the column, fire from here and listen from here\n        this.columnsInView().forEach(column => {\n            column.trigger(\"in-view\", column);\n        });\n    },\n\n    /** is the middle, horizontally scrolling section scrolled fully to the right? */\n    checkForEndOfScroll: function(viewport) {\n        viewport = viewport || this._viewport();\n        var END_PADDING = 16;\n        var $middle = this.$(\".middle\");\n        var scrollRight = $middle.parent().scrollLeft() + viewport.right;\n        if (scrollRight >= $middle.width() - END_PADDING) {\n            this.trigger(\"end-of-scroll\");\n        }\n    },\n\n    /** Show and enable the current columns drop target */\n    currentColumnDropTargetOn: function() {\n        var currentColumn = this.columnMap[this.collection.currentHistoryId];\n        if (!currentColumn) {\n            return;\n        }\n        //TODO: fix this - shouldn't need monkeypatch\n        currentColumn.panel.dataDropped = data => {};\n        currentColumn.panel.dropTargetOn();\n    },\n\n    /** Hide and disable the current columns drop target */\n    currentColumnDropTargetOff: function() {\n        var currentColumn = this.columnMap[this.collection.currentHistoryId];\n        if (!currentColumn) {\n            return;\n        }\n        currentColumn.panel.dataDropped = HISTORY_VIEW_EDIT.HistoryViewEdit.prototype.dataDrop;\n        // slight override of dropTargetOff to not erase drop-target-help\n        currentColumn.panel.dropTarget = false;\n        currentColumn.panel.$(\".history-drop-target\").remove();\n    },\n\n    // ------------------------------------------------------------------------ misc\n    /** String rep */\n    toString: function() {\n        return `MultiPanelColumns(${this.columns ? this.columns.length : 0})`;\n    },\n\n    // ------------------------------------------------------------------------ templates\n    mainTemplate: _.template(\n        [\n            '<div class=\"header flex-column-container\">',\n            '<div class=\"control-column control-column-left flex-column\">',\n            '<button class=\"done btn btn-default\" tabindex=\"1\">',\n            _l(\"Done\"),\n            \"</button>\",\n            '<div id=\"search-histories\" class=\"search-control\"></div>',\n            '<div id=\"search-datasets\" class=\"search-control\"></div>',\n            '<a class=\"open-more-options btn btn-default\" tabindex=\"3\">',\n            '<span class=\"fa fa-ellipsis-h\"></span>',\n            \"</a>\",\n            \"</div>\",\n            // feedback\n            '<div class=\"control-column control-column-center flex-column\">',\n            '<div class=\"header-info\">',\n            \"</div>\",\n            \"</div>\",\n            '<div class=\"control-column control-column-right flex-column\">',\n            '<button class=\"create-new btn btn-default\" tabindex=\"4\">',\n            _l(\"Create new\"),\n            \"</button> \",\n            \"</div>\",\n            \"</div>\",\n            // middle - where the columns go\n            '<div class=\"outer-middle flex-row flex-row-container\">',\n            '<div class=\"middle flex-column-container flex-row\"></div>',\n            \"</div>\",\n            // footer\n            '<div class=\"footer flex-column-container\"></div>'\n        ].join(\"\"),\n        { variable: \"view\" }\n    ),\n\n    loadingIndicatorTemplate: _.template(\n        [\n            '<div class=\"histories-loading-indicator\">',\n            '<span class=\"fa fa-spin fa-spinner\"></span>',\n            _l(\"Loading histories\"),\n            \"...\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"view\" }\n    ),\n\n    orderDescriptions: {\n        update_time: _l(\"most recent first\"),\n        \"update_time-asc\": _l(\"least recent first\"),\n        name: _l(\"name, a to z\"),\n        \"name-dsc\": _l(\"name, z to a\"),\n        size: _l(\"size, large to small\"),\n        \"size-asc\": _l(\"size, small to large\")\n    },\n\n    optionsPopoverTemplate: _.template(\n        [\n            '<div class=\"more-options\">',\n            '<div class=\"order btn-group\">',\n            '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n            `${_l(\"Order histories by\")} `,\n            '<span class=\"current-order\"><%- view.orderDescriptions[ view.collection.order ] %></span> ',\n            '<span class=\"caret\"></span>',\n            \"</button>\",\n            '<ul class=\"dropdown-menu\" role=\"menu\">',\n            \"<% _.each( view.orderDescriptions, function( text, order ){ %>\",\n            '<li><a href=\"javascript:void(0);\" class=\"set-order\" data-order=\"<%- order %>\">',\n            \"<%- text %>\",\n            \"</a></li>\",\n            \"<% }); %>\",\n            \"</ul>\",\n            \"</div>\",\n\n            '<div class=\"checkbox\"><label><input id=\"include-deleted\" type=\"checkbox\"',\n            '<%= view.collection.includeDeleted? \" checked\" : \"\" %>>',\n            _l(\"Include deleted histories\"),\n            \"</label></div>\",\n\n            \"<hr />\",\n\n            '<div class=\"checkbox\"><label><input id=\"toggle-deleted\" type=\"checkbox\">',\n            _l(\"Include deleted datasets\"),\n            \"</label></div>\",\n            '<div class=\"checkbox\"><label><input id=\"toggle-hidden\" type=\"checkbox\">',\n            _l(\"Include hidden datasets\"),\n            \"</label></div>\",\n            \"</div>\"\n        ].join(\"\"),\n        { variable: \"view\" }\n    )\n});\n\n//==============================================================================\nexport default {\n    MultiPanelColumns: MultiPanelColumns\n};\n"]}