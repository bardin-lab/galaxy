{"version":3,"sources":["mvc/history/hdca-li.js"],"names":["_super","_collectionLi2","default","DCListItemView","HDCAListItemView","extend","className","prototype","_setUpListeners","_this","this","call","renderListen","model","options","render","jobStatesSummary","listenTo","change:tags change:visible change:state","_getFoldoutPanelClass","_swapNewRender","$newRender","state","errored","terminal","running","get","OK","_states2","RUNNING","addClass","html","stateDescription","collection","jobStateSource","collectionTypeDescription","_collectionView2","collectionDescription","hasDetails","isNew","new","jobCount","numInError","simpleDescription","states","okPercent","runningPercent","errorCount","otherPercent","toString","templates","warnings","_","hidden","visible","_localization2","hid","escape","name","titleBar","titleBarTemplate"],"mappings":"uXAQIA,EAASC,EAAAC,QAAMC,eAGfC,EAAmBJ,EAAOK,QAEtBC,UAAcN,EAAOO,UAAUD,UAA/B,mBAGAE,gBAAiB,WAAW,IAAAC,EAAAC,KACxBV,EAAOO,UAAUC,gBAAgBG,KAAKD,MACtC,IAAIE,EAAe,SAACC,EAAOC,GACvBL,EAAKM,UAELL,KAAKG,MAAMG,kBACXN,KAAKO,SAASP,KAAKG,MAAMG,iBAAkB,SAAUJ,GAEzDF,KAAKO,SAASP,KAAKG,OAjB/BK,0CAAAN,KAKIO,sBAAA,WACIb,OAAcN,EAAAA,QAAOO,gBAGOa,eAAA,SAAAC,GAoBxBrB,EAAOO,UAAUa,eAAeT,KAAKD,KAAMW,GAlB3C,IAAIT,EACAI,EAAAN,KAAAG,MAAAG,iBAGAM,EAJJN,EAGIA,EAAWA,MACNC,UACRD,EAAAO,UACa,QACVP,EAAAQ,WADJ,KAZiCR,EAAAS,UAoCjB,UAlBpBN,SAlBqCT,KAAAG,MAAAa,IAAA,iBAsBrC,UAEWnB,KAAUa,MAAAA,IAAAA,mBAA0BC,EAAAA,QAA3CM,GAAAC,EAAA1B,QAAA2B,QAEAnB,KAAIY,IAAJQ,SAAA,SAAAR,GACA,IAAIN,EAAmBN,KAAKG,mBAExB,OADJH,KAAIM,EAAAA,sBAAkBe,KAAAC,GAClBtB,KAAIM,KAGAM,iBAAAA,WACH,IAAAW,EAAUjB,KAAAA,MAEVkB,GADWD,EAARP,IAAA,iBACOV,EAAiBS,IAAAA,oBAE3BU,GADWzB,KAARG,MAAAa,IAAA,mBACGU,EAAAlC,QAAAiC,0BAAAF,IACHX,EAAAc,EAAAlC,QAAAmC,sBAAAJ,GACHjB,EAAAiB,EAAAjB,iBACJ,GAZDkB,GAYW,OAAWR,EAElBJ,CAAAA,GAAQN,GAARA,EAAAsB,aAMG,CACP,IAAOC,EAAPvB,EAAAwB,MAjDiCC,EAAAF,EAAA,KAAAvB,EAAAyB,WAuE7B,GAAIF,EAnBZP,MAAAA,wRAKQG,GAAAA,EAA4BZ,UAE5BP,MAAAA,KAAAA,EAAAA,SADoBA,EAAA0B,aACpB1B,MAAJyB,EAAIzB,iBACCkB,GAAAA,EAAkBA,WACnB,OAAOS,EAEP,IAAAlB,EAAAT,EAAA4B,SAAA,SAAA,EAMIL,GADDvB,EAAA4B,SAAA,IAAA,IACH,EAAY5B,GACRyB,EAAmBhB,GAAwBgB,EAAjBzB,GAC1BuB,EAAO,EAAAM,EAAAC,EAAX,MAAA,oHACIL,GAAAA,EAAA,EAAAA,EAAA,QAAA,SADJ,iBAQkDM,EARlD,kFASwC,IAAAF,EATxC,yFAUI,IAAAC,EAVJ,qFAWO,IAAAE,EAXP,sCA/BG,MAAA,gIAKNb,EALM,mJACH,OAAAQ,GAuDCM,SAAA,WAhG4B,MAAA,qBAiGhCvC,KAAAG,MAAA,GAAAH,KAAAG,MAAA,cAjGgC,OAwGjCT,EAAAG,UAAA2C,UAAA,WACH,IAAAC,EAAAC,EAAA/C,UAAAL,EAAAO,UAAA2C,UAAAC,UA1GTE,OAAA,SAAApB,GAkHYA,EAAWqB,UAHuB,EAAAC,EAAArD,SAAA,sCA4B9C,OAAAkD,EAAA/C,UAAAL,EAAAO,UAAA2C,WALQC,SAAUA,EAOd/C,SAxBK,SAAA6B,GAAA,MAAA,0KAGkBA,EAAAuB,IAHlB,+CAGLJ,EAAAK,OAAAxB,EAAAyB,MAHK,6GAkBDC,EAAAA,QAAUC,gBAAAA,GAlBT,4BAZG,cAoCRxD,iBAAkBA","file":"../../../scripts/mvc/history/hdca-li.js","sourcesContent":["import STATES from \"mvc/dataset/states\";\nimport DC_LI from \"mvc/collection/collection-li\";\nimport DC_VIEW from \"mvc/collection/collection-view\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport HISTORY_ITEM_LI from \"mvc/history/history-item-li\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\nvar _super = DC_LI.DCListItemView;\n/** @class Read only view for HistoryDatasetCollectionAssociation (a dataset collection inside a history).\n */\nvar HDCAListItemView = _super.extend(\n    /** @lends HDCAListItemView.prototype */ {\n        className: `${_super.prototype.className} history-content`,\n\n        /** event listeners */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n            var renderListen = (model, options) => {\n                this.render();\n            };\n            if (this.model.jobStatesSummary) {\n                this.listenTo(this.model.jobStatesSummary, \"change\", renderListen);\n            }\n            this.listenTo(this.model, {\n                \"change:tags change:visible change:state\": renderListen\n            });\n        },\n\n        /** Override to provide the proper collections panels as the foldout */\n        _getFoldoutPanelClass: function() {\n            return DC_VIEW.CollectionView;\n        },\n\n        /** In this override, add the state as a class for use with state-based CSS */\n        _swapNewRender: function($newRender) {\n            _super.prototype._swapNewRender.call(this, $newRender);\n            //TODO: model currently has no state\n            var state;\n            var jobStatesSummary = this.model.jobStatesSummary;\n            if (jobStatesSummary) {\n                if (jobStatesSummary.new()) {\n                    state = \"loading\";\n                } else if (jobStatesSummary.errored()) {\n                    state = \"error\";\n                } else if (jobStatesSummary.terminal()) {\n                    state = \"ok\";\n                } else if (jobStatesSummary.running()) {\n                    state = \"running\";\n                } else {\n                    state = \"queued\";\n                }\n            } else if (this.model.get(\"job_source_id\")) {\n                // Initial rendering - polling will fill in more details in a bit.\n                state = \"loading\";\n            } else {\n                state = this.model.get(\"populated_state\") ? STATES.OK : STATES.RUNNING;\n            }\n            this.$el.addClass(`state-${state}`);\n            var stateDescription = this.stateDescription();\n            this.$(\".state-description\").html(stateDescription);\n            return this.$el;\n        },\n\n        stateDescription: function() {\n            var collection = this.model;\n            var elementCount = collection.get(\"element_count\");\n            var jobStateSource = collection.get(\"job_source_type\");\n            var collectionType = this.model.get(\"collection_type\");\n            var collectionTypeDescription = DC_VIEW.collectionTypeDescription(collection);\n            var simpleDescription = DC_VIEW.collectionDescription(collection);\n            var jobStatesSummary = collection.jobStatesSummary;\n            if (!jobStateSource || jobStateSource == \"Job\") {\n                return simpleDescription;\n            } else if (!jobStatesSummary || !jobStatesSummary.hasDetails()) {\n                return `\n                    <div class=\"progress state-progress\">\n                        <span class=\"note\">Loading job data for ${collectionTypeDescription}.<span class=\"blinking\">..</span></span>\n                        <div class=\"progress-bar info\" style=\"width:100%\">\n                    </div>`;\n            } else {\n                var isNew = jobStatesSummary.new();\n                var jobCount = isNew ? null : jobStatesSummary.jobCount();\n                if (isNew) {\n                    return `\n                        <div class=\"progress state-progress\">\n                            <span class=\"note\">Creating jobs.<span class=\"blinking\">..</span></span>\n                            <div class=\"progress-bar info\" style=\"width:100%\">\n                        </div>`;\n                } else if (jobStatesSummary.errored()) {\n                    var errorCount = jobStatesSummary.numInError();\n                    return `a ${collectionTypeDescription} with ${errorCount} / ${jobCount} jobs in error`;\n                } else if (jobStatesSummary.terminal()) {\n                    return simpleDescription;\n                } else {\n                    var running = jobStatesSummary.states()[\"running\"] || 0;\n                    var ok = jobStatesSummary.states()[\"ok\"] || 0;\n                    var okPercent = ok / (jobCount * 1.0);\n                    var runningPercent = running / (jobCount * 1.0);\n                    var otherPercent = 1.0 - okPercent - runningPercent;\n                    var jobsStr = jobCount && jobCount > 1 ? `${jobCount} jobs` : `a job`;\n                    return `\n                        <div class=\"progress state-progress\">\n                            <span class=\"note\">${jobsStr} generating a ${collectionTypeDescription}</span>\n                            <div class=\"progress-bar ok\" style=\"width:${okPercent * 100.0}%\"></div>\n                            <div class=\"progress-bar running\" style=\"width:${runningPercent * 100.0}%\"></div>\n                            <div class=\"progress-bar new\" style=\"width:${otherPercent * 100.0}%\">\n                        </div>`;\n                }\n            }\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `HDCAListItemView(${modelString})`;\n        }\n    }\n);\n\n/** underscore templates */\nHDCAListItemView.prototype.templates = (() => {\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        hidden: collection => {\n            collection.visible\n                ? \"\"\n                : `<div class=\"hidden-msg warningmessagesmall\">${_l(\"This collection has been hidden\")}</div>`;\n        }\n    });\n\n    var titleBarTemplate = collection => `\n        <div class=\"title-bar clear\" tabindex=\"0\">\n            <span class=\"state-icon\"></span>\n            <div class=\"title\">\n                <span class=\"hid\">${collection.hid}</span>\n                <span class=\"name\">${_.escape(collection.name)}</span>\n            </div>\n            <div class=\"state-description\">\n            </div>\n            ${HISTORY_ITEM_LI.nametagTemplate(collection)}\n        </div>\n    `;\n\n    return _.extend({}, _super.prototype.templates, {\n        warnings: warnings,\n        titleBar: titleBarTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    HDCAListItemView: HDCAListItemView\n};\n"]}