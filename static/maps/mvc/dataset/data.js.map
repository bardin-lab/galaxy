{"version":3,"sources":["mvc/dataset/data.js"],"names":["DatasetMetadata","Backbone","Model","extend","Dataset","defaults","id","type","name","hda_ldda","metadata","initialize","this","get","_set_metadata","_","keys","attributes","k","new_key","split","set","silent","get_metadata","attribute","urlRoot","Galaxy","root","TabularDataset","prototype","chunk_url","first_data_chunk","offset","options","call","at_eof","url_viz","get_next_chunk","self","next_chunk","$","Deferred","getJSON","success","chunk","rval","ck_data","resolve","DatasetCollection","Collection","TabularDatasetChunkedView","View","row_count","loading_chunk","TabularButtonTracksterView","$el","expand_to_container","scroll_elt","height","model","scrolled_to_bottom","loading_indicator","show","then","result","attempt_to_fetch","hide","_renderChunk","cellpadding","append","data_table","render","header_container","appendTo","header_row","column_names","join","attr","j","first_chunk","when","_renderCell","cell_contents","index","colspan","$cell","text","column_types","undefined","addClass","length","_renderRow","cells","line","num_columns","row","each","TopLevelTabularDatasetChunkedView","p","find","parents","css","window","scrollTop","EmbeddedTabularDatasetChunkedView","position","overflow","innerHeight","el","scrollHeight","chrom","end","start","dataset_id","genome_build","file_ext","modal","frame","col","console","log","array","search","str","match","icon_class","IconButtonView","IconButton","title","_localization2","default","setElement","btn_viz","events","mouseover tr","mouseleave","e","target","children","eq","html","btn_viz_pars","left","n","isNaN","parseFloat","isFinite","is_numeric","off","url","top","click","add","param","createTabularDatasetChunkedView","view","dataset_config","parent_elt","embedded"],"mappings":"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","file":"../../../scripts/mvc/dataset/data.js","sourcesContent":["import _l from \"utils/localization\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n// Additional dependencies: jQuery, underscore.\n/**\n * Dataset metedata.\n */\nvar DatasetMetadata = Backbone.Model.extend({});\n\n/**\n * A dataset. In Galaxy, datasets are associated with a history, so\n * this object is also known as a HistoryDatasetAssociation.\n */\nvar Dataset = Backbone.Model.extend({\n    defaults: {\n        id: \"\",\n        type: \"\",\n        name: \"\",\n        hda_ldda: \"hda\",\n        metadata: null\n    },\n\n    initialize: function() {\n        // Metadata can be passed in as a model or a set of attributes; if it's\n        // already a model, there's no need to set metadata.\n        if (!this.get(\"metadata\")) {\n            this._set_metadata();\n        }\n\n        // Update metadata on change.\n        this.on(\"change\", this._set_metadata, this);\n    },\n\n    _set_metadata: function() {\n        var metadata = new DatasetMetadata();\n\n        // Move metadata from dataset attributes to metadata object.\n        _.each(\n            _.keys(this.attributes),\n            function(k) {\n                if (k.indexOf(\"metadata_\") === 0) {\n                    // Found metadata.\n                    var new_key = k.split(\"metadata_\")[1];\n                    metadata.set(new_key, this.attributes[k]);\n                    delete this.attributes[k];\n                }\n            },\n            this\n        );\n\n        // Because this is an internal change, silence it.\n        this.set(\"metadata\", metadata, { silent: true });\n    },\n\n    /**\n     * Returns dataset metadata for a given attribute.\n     */\n    get_metadata: function(attribute) {\n        return this.attributes.metadata.get(attribute);\n    },\n\n    urlRoot: `${Galaxy.root}api/datasets`\n});\n\n/**\n * A tabular dataset. This object extends dataset to provide incremental chunked data.\n */\nvar TabularDataset = Dataset.extend({\n    defaults: _.extend({}, Dataset.prototype.defaults, {\n        chunk_url: null,\n        first_data_chunk: null,\n        offset: 0,\n        at_eof: false\n    }),\n\n    initialize: function(options) {\n        Dataset.prototype.initialize.call(this);\n\n        // If first data chunk is available, next chunk is 1.\n        if (this.attributes.first_data_chunk) {\n            this.attributes.offset = this.attributes.first_data_chunk.offset;\n        }\n        this.attributes.chunk_url = `${Galaxy.root}dataset/display?dataset_id=${this.id}`;\n        this.attributes.url_viz = `${Galaxy.root}visualization`;\n    },\n\n    /**\n     * Returns a jQuery Deferred object that resolves to the next data chunk or null if at EOF.\n     */\n    get_next_chunk: function() {\n        // If already at end of file, do nothing.\n        if (this.attributes.at_eof) {\n            return null;\n        }\n\n        // Get next chunk.\n        var self = this;\n\n        var next_chunk = $.Deferred();\n        $.getJSON(this.attributes.chunk_url, {\n            offset: self.attributes.offset\n        }).success(chunk => {\n            var rval;\n            if (chunk.ck_data !== \"\") {\n                // Found chunk.\n                rval = chunk;\n                self.attributes.offset = chunk.offset;\n            } else {\n                // At EOF.\n                self.attributes.at_eof = true;\n                rval = null;\n            }\n            next_chunk.resolve(rval);\n        });\n\n        return next_chunk;\n    }\n});\n\nvar DatasetCollection = Backbone.Collection.extend({\n    model: Dataset\n});\n\n/**\n * Provides a base for table-based, dynamic view of a tabular dataset.\n * Do not instantiate directly; use either TopLevelTabularDatasetChunkedView\n * or EmbeddedTabularDatasetChunkedView.\n */\nvar TabularDatasetChunkedView = Backbone.View.extend({\n    /**\n     * Initialize view and, importantly, set a scroll element.\n     */\n    initialize: function(options) {\n        // Row count for rendering.\n        this.row_count = 0;\n        this.loading_chunk = false;\n\n        // load trackster button\n        new TabularButtonTracksterView({\n            model: options.model,\n            $el: this.$el\n        });\n    },\n\n    expand_to_container: function() {\n        if (this.$el.height() < this.scroll_elt.height()) {\n            this.attempt_to_fetch();\n        }\n    },\n\n    attempt_to_fetch: function(func) {\n        var self = this;\n        if (!this.loading_chunk && this.scrolled_to_bottom()) {\n            this.loading_chunk = true;\n            this.loading_indicator.show();\n            $.when(self.model.get_next_chunk()).then(result => {\n                if (result) {\n                    self._renderChunk(result);\n                    self.loading_chunk = false;\n                }\n                self.loading_indicator.hide();\n                self.expand_to_container();\n            });\n        }\n    },\n\n    render: function() {\n        // Add loading indicator.\n        this.loading_indicator = $(\"<div/>\").attr(\"id\", \"loading_indicator\");\n        this.$el.append(this.loading_indicator);\n\n        // Add data table and header.\n        var data_table = $(\"<table/>\").attr({\n            id: \"content_table\",\n            cellpadding: 0\n        });\n        this.$el.append(data_table);\n        var column_names = this.model.get_metadata(\"column_names\");\n        var header_container = $(\"<thead/>\").appendTo(data_table);\n        var header_row = $(\"<tr/>\").appendTo(header_container);\n        if (column_names) {\n            header_row.append(`<th>${column_names.join(\"</th><th>\")}</th>`);\n        } else {\n            for (var j = 1; j <= this.model.get_metadata(\"columns\"); j++) {\n                header_row.append(`<th>${j}</th>`);\n            }\n        }\n\n        // Render first chunk.\n        var self = this;\n\n        var first_chunk = this.model.get(\"first_data_chunk\");\n        if (first_chunk) {\n            // First chunk is bootstrapped, so render now.\n            this._renderChunk(first_chunk);\n        } else {\n            // No bootstrapping, so get first chunk and then render.\n            $.when(self.model.get_next_chunk()).then(result => {\n                self._renderChunk(result);\n            });\n        }\n\n        // -- Show new chunks during scrolling. --\n\n        // Set up chunk loading when scrolling using the scrolling element.\n        this.scroll_elt.scroll(() => {\n            self.attempt_to_fetch();\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return false;\n    },\n\n    // -- Helper functions. --\n\n    _renderCell: function(cell_contents, index, colspan) {\n        var $cell = $(\"<td>\").text(cell_contents);\n        var column_types = this.model.get_metadata(\"column_types\");\n        if (colspan !== undefined) {\n            $cell.attr(\"colspan\", colspan).addClass(\"stringalign\");\n        } else if (column_types) {\n            if (index < column_types.length) {\n                if (column_types[index] === \"str\" || column_types[index] === \"list\") {\n                    /* Left align all str columns, right align the rest */\n                    $cell.addClass(\"stringalign\");\n                }\n            }\n        }\n        return $cell;\n    },\n\n    _renderRow: function(line) {\n        // Check length of cells to ensure this is a complete row.\n        var cells = line.split(\"\\t\");\n\n        var row = $(\"<tr>\");\n        var num_columns = this.model.get_metadata(\"columns\");\n\n        if (this.row_count % 2 !== 0) {\n            row.addClass(\"dark_row\");\n        }\n\n        if (cells.length === num_columns) {\n            _.each(\n                cells,\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n        } else if (cells.length > num_columns) {\n            // SAM file or like format with optional metadata included.\n            _.each(\n                cells.slice(0, num_columns - 1),\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n            row.append(this._renderCell(cells.slice(num_columns - 1).join(\"\\t\"), num_columns - 1));\n        } else if (cells.length === 1) {\n            // Comment line, just return the one cell.\n            row.append(this._renderCell(line, 0, num_columns));\n        } else {\n            // cells.length is greater than one, but less than num_columns.  Render cells and pad tds.\n            // Possibly a SAM file or like format with optional metadata missing.\n            // Could also be a tabular file with a line with missing columns.\n            _.each(\n                cells,\n                function(cell_contents, index) {\n                    row.append(this._renderCell(cell_contents, index));\n                },\n                this\n            );\n            _.each(_.range(num_columns - cells.length), () => {\n                row.append($(\"<td>\"));\n            });\n        }\n\n        this.row_count++;\n        return row;\n    },\n\n    _renderChunk: function(chunk) {\n        var data_table = this.$el.find(\"table\");\n        _.each(\n            chunk.ck_data.split(\"\\n\"),\n            function(line, index) {\n                if (line !== \"\") {\n                    data_table.append(this._renderRow(line));\n                }\n            },\n            this\n        );\n    }\n});\n\n/**\n * Tabular view that is placed at the top level of page. Scrolling occurs\n * view top-level elements outside of view.\n */\nvar TopLevelTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Scrolling happens in top-level elements.\n        var scroll_elt = _.find(this.$el.parents(), p => $(p).css(\"overflow\") === \"auto\");\n\n        // If no scrolling element found, use window.\n        if (!scroll_elt) {\n            scroll_elt = window;\n        }\n\n        // Wrap scrolling element for easy access.\n        this.scroll_elt = $(scroll_elt);\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return this.$el.height() - this.scroll_elt.scrollTop() - this.scroll_elt.height() <= 0;\n    }\n});\n\n/**\n * Tabular view tnat is embedded in a page. Scrolling occurs in view's el.\n */\nvar EmbeddedTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n    initialize: function(options) {\n        TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n        // Because view is embedded, set up div to do scrolling.\n        this.scroll_elt = this.$el.css({\n            position: \"relative\",\n            overflow: \"scroll\",\n            height: options.height || \"500px\"\n        });\n    },\n\n    /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n    scrolled_to_bottom: function() {\n        return this.$el.scrollTop() + this.$el.innerHeight() >= this.el.scrollHeight;\n    }\n});\n\n/** Button for trackster visualization */\nvar TabularButtonTracksterView = Backbone.View.extend({\n    // gene region columns\n    col: {\n        chrom: null,\n        start: null,\n        end: null\n    },\n\n    // url for trackster\n    url_viz: null,\n\n    // dataset id\n    dataset_id: null,\n\n    // database key\n    genome_build: null,\n\n    // data type\n    file_ext: null,\n\n    // backbone initialize\n    initialize: function(options) {\n        // check if environment is available\n        var Galaxy = parent.Galaxy;\n\n        // link galaxy modal or create one\n        if (Galaxy && Galaxy.modal) {\n            this.modal = Galaxy.modal;\n        }\n\n        // link galaxy frames\n        if (Galaxy && Galaxy.frame) {\n            this.frame = Galaxy.frame;\n        }\n\n        // check\n        if (!this.modal || !this.frame) {\n            return;\n        }\n\n        // model/metadata\n        var model = options.model;\n        var metadata = model.get(\"metadata\");\n\n        // check for datatype\n        if (!model.get(\"file_ext\")) {\n            return;\n        }\n\n        // get data type\n        this.file_ext = model.get(\"file_ext\");\n\n        // check for bed-file format\n        if (this.file_ext == \"bed\") {\n            // verify that metadata exists\n            if (metadata.get(\"chromCol\") && metadata.get(\"startCol\") && metadata.get(\"endCol\")) {\n                // read in columns\n                this.col.chrom = metadata.get(\"chromCol\") - 1;\n                this.col.start = metadata.get(\"startCol\") - 1;\n                this.col.end = metadata.get(\"endCol\") - 1;\n            } else {\n                console.log(\"TabularButtonTrackster : Bed-file metadata incomplete.\");\n                return;\n            }\n        }\n\n        // check for vcf-file format\n        if (this.file_ext == \"vcf\") {\n            // search array\n            function search(str, array) {\n                for (var j = 0; j < array.length; j++) if (array[j].match(str)) return j;\n                return -1;\n            }\n\n            // load\n            this.col.chrom = search(\"Chrom\", metadata.get(\"column_names\"));\n            this.col.start = search(\"Pos\", metadata.get(\"column_names\"));\n            this.col.end = null;\n\n            // verify that metadata exists\n            if (this.col.chrom == -1 || this.col.start == -1) {\n                console.log(\"TabularButtonTrackster : VCF-file metadata incomplete.\");\n                return;\n            }\n        }\n\n        // check\n        if (this.col.chrom === undefined) {\n            return;\n        }\n\n        // get dataset id\n        if (model.id) {\n            this.dataset_id = model.id;\n        } else {\n            console.log(\"TabularButtonTrackster : Dataset identification is missing.\");\n            return;\n        }\n\n        // get url\n        if (model.get(\"url_viz\")) {\n            this.url_viz = model.get(\"url_viz\");\n        } else {\n            console.log(\"TabularButtonTrackster : Url for visualization controller is missing.\");\n            return;\n        }\n\n        // get genome_build / database key\n        if (model.get(\"genome_build\")) {\n            this.genome_build = model.get(\"genome_build\");\n        }\n\n        // create the icon\n        var btn_viz = new mod_icon_btn.IconButtonView({\n            model: new mod_icon_btn.IconButton({\n                title: _l(\"Visualize\"),\n                icon_class: \"chart_curve\",\n                id: \"btn_viz\"\n            })\n        });\n\n        // set element\n        this.setElement(options.$el);\n\n        // add to element\n        this.$el.append(btn_viz.render().$el);\n\n        // hide the button\n        this.hide();\n    },\n\n    /** Add event handlers */\n    events: {\n        \"mouseover tr\": \"show\",\n        mouseleave: \"hide\"\n    },\n\n    // show button\n    show: function(e) {\n        var self = this;\n\n        // is numeric\n        function is_numeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        // check\n        if (this.col.chrom === null) return;\n\n        // get selected data line\n        var row = $(e.target).parent();\n\n        // verify that location has been found\n        var chrom = row\n            .children()\n            .eq(this.col.chrom)\n            .html();\n        var start = row\n            .children()\n            .eq(this.col.start)\n            .html();\n\n        // end is optional\n        var end = this.col.end\n            ? row\n                  .children()\n                  .eq(this.col.end)\n                  .html()\n            : start;\n\n        // double check location\n        if (!chrom.match(\"^#\") && chrom !== \"\" && is_numeric(start)) {\n            // get target gene region\n            var btn_viz_pars = {\n                dataset_id: this.dataset_id,\n                gene_region: `${chrom}:${start}-${end}`\n            };\n\n            // get button position\n            var offset = row.offset();\n            var left = offset.left - 10;\n            var top = offset.top - $(window).scrollTop() + 3;\n\n            // update css\n            $(\"#btn_viz\").css({\n                position: \"fixed\",\n                top: `${top}px`,\n                left: `${left}px`\n            });\n            $(\"#btn_viz\").off(\"click\");\n            $(\"#btn_viz\").click(() => {\n                self.frame.add({\n                    title: _l(\"Trackster\"),\n                    url: `${self.url_viz}/trackster?${$.param(btn_viz_pars)}`\n                });\n            });\n\n            // show the button\n            $(\"#btn_viz\").show();\n        } else {\n            // hide the button\n            $(\"#btn_viz\").hide();\n        }\n    },\n\n    /** hide button */\n    hide: function() {\n        this.$(\"#btn_viz\").hide();\n    }\n});\n\n// -- Utility functions. --\n\n/**\n * Create a model, attach it to a view, render view, and attach it to a parent element.\n */\nvar createModelAndView = (model, view, model_config, parent_elt) => {\n    // Create model, view.\n    var a_view = new view({\n        model: new model(model_config)\n    });\n\n    // Render view and add to parent element.\n    a_view.render();\n    if (parent_elt) {\n        parent_elt.append(a_view.$el);\n    }\n\n    return a_view;\n};\n\n/**\n * Create a tabular dataset chunked view (and requisite tabular dataset model)\n * and appends to parent_elt.\n */\nvar createTabularDatasetChunkedView = options => {\n    // If no model, create and set model from dataset config.\n    if (!options.model) {\n        options.model = new TabularDataset(options.dataset_config);\n    }\n\n    var parent_elt = options.parent_elt;\n    var embedded = options.embedded;\n\n    // Clean up options so that only needed options are passed to view.\n    delete options.embedded;\n    delete options.parent_elt;\n    delete options.dataset_config;\n\n    // Create and set up view.\n    var view = embedded\n        ? new EmbeddedTabularDatasetChunkedView(options)\n        : new TopLevelTabularDatasetChunkedView(options);\n    view.render();\n\n    if (parent_elt) {\n        parent_elt.append(view.$el);\n        // If we're sticking this in another element, once it's appended check\n        // to make sure we've filled enough space.\n        // Without this, the scroll elements don't work.\n        view.expand_to_container();\n    }\n\n    return view;\n};\n\nexport default {\n    Dataset: Dataset,\n    TabularDataset: TabularDataset,\n    DatasetCollection: DatasetCollection,\n    TabularDatasetChunkedView: TabularDatasetChunkedView,\n    createTabularDatasetChunkedView: createTabularDatasetChunkedView\n};\n"]}