{"version":3,"sources":["mvc/ui/ui-frames.js"],"names":["FrameView","Backbone","View","extend","initialize","options","this","model","Model","setElement","$","addClass","$el","append","tooltip","placement","title","$header","$content","$title","listenTo","render","self","_","menu","attributes","$option","isFunction","disabled","attr","option","onclick","on","html","content","url","defaultOptions","indexOf","rows","frame_max","visible","frame","cols","top","frame_z","frame_counter","frame_uid","frame_list","frame_shadow","event","top_max","el","_frameInit","_frameResize","top_min","window","resize","_panelRefresh","width","height","show","hide","add","buttons","Close","Galaxy","modal","_localization2","default","body","_toPixelCoord","trigger","$frame","css","fadeOut","frame_id","_panelAnimationComplete","_frameInsert","left","del","remove","id","length","fadeIn","events","type","mousemove","mouseup","mouseleave","DOMMouseScroll","mousewheel","e","preventDefault","mousedown .frame-background","mousedown .frame-scroll-up","x","originalEvent","y","_eventFrameMouseDown","target","hasClass","_eventFrameMouseMove","event_xy_new","event_xy_delta","_frameIdentify","pageX","pageY","_frameDragStart","p","Math","xy","_frameScreen","_frameOffset","_toGridCoord","margin","max","min_dim","l","_eventFrameMouseUp","_eventFrameClose","_frameDragStop","_eventPanelScroll","frames","stopPropagation","_eventHide","_panelScroll","srcElement","parents","_eventPanelScroll_down","detail","wheelDelta","_eventPanelScroll_up","_frameGrid","_frameFocus","grid_location","sign","px","_toPixel","cell","g","_toGrid","_isCollision","is_collision_pair","i","promise","a","b","animate","_locationRank","top_new","loc","parseInt","done","grid_rank","delta","substring","scroll","min","place_list","screen_location","push","each","new_loc","_framePlace","j","sort","place","f","has_focus"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-frames.js","sourcesContent":["import _l from \"utils/localization\";\n/** Frame view */\nvar FrameView = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.setElement($(\"<div/>\").addClass(\"corner frame\"));\n        this.$el\n            .append(\n                $(\"<div/>\")\n                    .addClass(\"f-header corner\")\n                    .append($(\"<div/>\").addClass(\"f-title\"))\n                    .append(\n                        $(\"<div/>\")\n                            .addClass(\"f-icon f-close fa fa-close\")\n                            .tooltip({\n                                title: _l(\"Close\"),\n                                placement: \"bottom\"\n                            })\n                    )\n            )\n            .append($(\"<div/>\").addClass(\"f-content\"))\n            .append(\n                $(\"<div/>\")\n                    .addClass(\"f-resize f-icon corner fa fa-expand\")\n                    .tooltip({ title: \"Resize\" })\n            )\n            .append($(\"<div/>\").addClass(\"f-cover\"));\n        this.$header = this.$(\".f-header\");\n        this.$title = this.$(\".f-title\");\n        this.$content = this.$(\".f-content\");\n        this.render();\n        this.listenTo(this.model, \"change\", this.render, this);\n    },\n\n    render: function() {\n        var self = this;\n        var options = this.model.attributes;\n        this.$title.html(options.title || \"\");\n        this.$header.find(\".f-icon-left\").remove();\n        _.each(options.menu, option => {\n            var $option = $(\"<div/>\")\n                .addClass(\"f-icon-left\")\n                .addClass(option.icon);\n            if (_.isFunction(option.disabled) && option.disabled()) {\n                $option.attr(\"disabled\", true);\n            } else {\n                $option\n                    .on(\"click\", () => {\n                        option.onclick(self);\n                    })\n                    .tooltip({\n                        title: option.tooltip,\n                        placement: \"bottom\"\n                    });\n            }\n            self.$header.append($option);\n        });\n        if (options.url) {\n            this.$content.html(\n                $(\"<iframe/>\")\n                    .addClass(\"f-iframe\")\n                    .attr(\"scrolling\", \"auto\")\n                    .attr(\"src\", `${options.url + (options.url.indexOf(\"?\") === -1 ? \"?\" : \"&\")}widget=True`)\n            );\n        } else if (options.content) {\n            _.isFunction(options.content) ? options.content(self.$content) : self.$content.html(options.content);\n        }\n    }\n});\n\n/** Scratchbook viewer */\nvar View = Backbone.View.extend({\n    defaultOptions: {\n        frame: {\n            // default frame size in cells\n            cols: 6,\n            rows: 3\n        },\n        rows: 1000, // maximum number of rows\n        cell: 130, // cell size in px\n        margin: 5, // margin between frames\n        scroll: 5, // scroll speed\n        top_min: 40, // top margin\n        frame_max: 9, // maximum number of frames\n        visible: true // initial visibility\n    },\n\n    cols: 0, // number of columns\n    top: 0, // scroll/element top\n    top_max: 0, // viewport scrolling state\n    frame_z: 0, // frame z-index\n    frame_counter: 0, // frame counter\n    frame_uid: 0, // unique frame id counter\n    frame_list: {}, // list of all frames\n    frame_shadow: null, // frame shown as placeholder when moving active frames\n    visible: false, // flag indicating if scratchbook viewer is visible or not\n    event: {}, // dictionary keeping track of current event\n\n    initialize: function(options) {\n        var self = this;\n        this.options = _.defaults(options || {}, this.defaultOptions);\n        this.visible = this.options.visible;\n        this.top = this.top_max = this.options.top_min;\n        this.setElement(\n            $(\"<div/>\")\n                .addClass(\"galaxy-frame\")\n                .append($(\"<div/>\").addClass(\"frame-background\"))\n                .append($(\"<div/>\").addClass(\"frame-menu frame-scroll-up fa fa-chevron-up fa-2x\"))\n                .append($(\"<div/>\").addClass(\"frame-menu frame-scroll-down fa fa-chevron-down fa-2x\"))\n        );\n\n        // initialize shadow to guiding drag/resize events\n        this.frame_shadow = new Backbone.View({\n            el: $(\"<div/>\").addClass(\"corner frame-shadow\")\n        });\n        this.$el.append(this.frame_shadow.$el);\n        this._frameInit(this.frame_shadow, \"#frame-shadow\");\n        this._frameResize(this.frame_shadow, { width: 0, height: 0 });\n        this.frame_list[\"#frame-shadow\"] = this.frame_shadow;\n\n        // initialize panel\n        this.visible ? this.show() : this.hide();\n        this._panelRefresh();\n        $(window).resize(() => {\n            self.visible && self._panelRefresh();\n        });\n    },\n\n    /** Render */\n    render: function() {\n        this.$(\".frame-scroll-up\")[(this.top != this.options.top_min && \"show\") || \"hide\"]();\n        this.$(\".frame-scroll-down\")[(this.top != this.top_max && \"show\") || \"hide\"]();\n    },\n\n    /**\n     * Adds and displays a new frame.\n     *\n     * options:\n     *  url     : loaded into an iframe\n     *  content : content is treated as a function or raw HTML, function is passed a single\n     *              argument that is the frame's content DOM element\n     */\n    add: function(options) {\n        if (this.frame_counter >= this.options.frame_max) {\n            Galaxy.modal.show({\n                title: _l(\"Warning\"),\n                body: `You have reached the maximum number of allowed frames (${this.options.frame_max}).`,\n                buttons: {\n                    Close: function() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n        } else {\n            var frame_id = `#frame-${this.frame_uid++}`;\n            if ($(frame_id).length !== 0) {\n                Galaxy.modal.show({\n                    title: _l(\"Error\"),\n                    body: \"This frame already exists. This page might contain multiple frame managers.\",\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            } else {\n                // initialize new frame elements\n                this.top = this.options.top_min;\n                var frame = new FrameView(options);\n                this.$el.append(frame.$el);\n\n                // set dimensions\n                options.width = this._toPixelCoord(\"width\", this.options.frame.cols);\n                options.height = this._toPixelCoord(\"height\", this.options.frame.rows);\n\n                // set default z-index and add to ui and frame list\n                this.frame_z = parseInt(frame.$el.css(\"z-index\"));\n                this.frame_list[frame_id] = frame;\n                this.frame_counter++;\n                this._frameInit(frame, frame_id);\n                this._frameResize(frame, {\n                    width: options.width,\n                    height: options.height\n                });\n                this._frameInsert(frame, { top: 0, left: 0 }, true);\n                !this.visible && this.show();\n                this.trigger(\"add\");\n            }\n        }\n    },\n\n    /** Remove a frame */\n    del: function(frame) {\n        var self = this;\n        var $frame = frame.$el;\n        $frame.fadeOut(\"fast\", () => {\n            $frame.remove();\n            delete self.frame_list[frame.id];\n            self.frame_counter--;\n            self._panelRefresh(true);\n            self._panelAnimationComplete();\n            self.trigger(\"remove\");\n        });\n    },\n\n    /** Show panel */\n    show: function() {\n        this.visible = true;\n        this.$el.fadeIn(\"fast\");\n        this.trigger(\"show\");\n    },\n\n    /** Hide panel */\n    hide: function() {\n        if (!this.event.type) {\n            this.visible = false;\n            this.$el.fadeOut(\"fast\", function() {\n                $(this).hide();\n            });\n            this.trigger(\"hide\");\n        }\n    },\n\n    /** Returns the number of frames */\n    length: function() {\n        return this.frame_counter;\n    },\n\n    /*\n        EVENT HANDLING\n    */\n    events: {\n        // global frame events\n        mousemove: \"_eventFrameMouseMove\",\n        mouseup: \"_eventFrameMouseUp\",\n        mouseleave: \"_eventFrameMouseUp\",\n        mousewheel: \"_eventPanelScroll\",\n        DOMMouseScroll: \"_eventPanelScroll\",\n\n        // events fixed to elements\n        \"mousedown .frame\": \"_eventFrameMouseDown\",\n        \"mousedown .frame-background\": \"_eventHide\",\n        \"mousedown .frame-scroll-up\": \"_eventPanelScroll_up\",\n        \"mousedown .frame-scroll-down\": \"_eventPanelScroll_down\",\n        \"mousedown .f-close\": \"_eventFrameClose\"\n    },\n\n    /** Start drag/resize event */\n    _eventFrameMouseDown: function(e) {\n        $(\".tooltip\").hide();\n        if (!this.event.type) {\n            if ($(e.target).hasClass(\"f-header\") || $(e.target).hasClass(\"f-title\")) {\n                this.event.type = \"drag\";\n            }\n            if ($(e.target).hasClass(\"f-resize\")) {\n                this.event.type = \"resize\";\n            }\n            if (this.event.type) {\n                e.preventDefault();\n                this.event.target = this._frameIdentify(e.target);\n                this.event.xy = {\n                    x: e.originalEvent.pageX,\n                    y: e.originalEvent.pageY\n                };\n                this._frameDragStart(this.event.target);\n            }\n        }\n    },\n\n    /** Processes drag/resize events */\n    _eventFrameMouseMove: function(e) {\n        if (this.event.type) {\n            // get mouse motion and delta\n            var event_xy_new = {\n                x: e.originalEvent.pageX,\n                y: e.originalEvent.pageY\n            };\n            var event_xy_delta = {\n                x: event_xy_new.x - this.event.xy.x,\n                y: event_xy_new.y - this.event.xy.y\n            };\n            this.event.xy = event_xy_new;\n\n            // get current screen position and size of frame\n            var p = this._frameScreen(this.event.target);\n\n            // drag/resize event\n            if (this.event.type == \"resize\") {\n                p.width += event_xy_delta.x;\n                p.height += event_xy_delta.y;\n                var min_dim = this.options.cell - this.options.margin - 1;\n                p.width = Math.max(p.width, min_dim);\n                p.height = Math.max(p.height, min_dim);\n                this._frameResize(this.event.target, p);\n                p.width = this._toGridCoord(\"width\", p.width) + 1;\n                p.height = this._toGridCoord(\"height\", p.height) + 1;\n                p.width = this._toPixelCoord(\"width\", p.width);\n                p.height = this._toPixelCoord(\"height\", p.height);\n                this._frameResize(this.frame_shadow, p);\n                this._frameInsert(this.frame_shadow, {\n                    top: this._toGridCoord(\"top\", p.top),\n                    left: this._toGridCoord(\"left\", p.left)\n                });\n            } else if (this.event.type == \"drag\") {\n                p.left += event_xy_delta.x;\n                p.top += event_xy_delta.y;\n                this._frameOffset(this.event.target, p);\n                var l = {\n                    top: this._toGridCoord(\"top\", p.top),\n                    left: this._toGridCoord(\"left\", p.left)\n                };\n                l.left !== 0 && l.left++;\n                this._frameInsert(this.frame_shadow, l);\n            }\n        }\n    },\n\n    /** Stop drag/resize events */\n    _eventFrameMouseUp: function(e) {\n        if (this.event.type) {\n            this._frameDragStop(this.event.target);\n            this.event.type = null;\n        }\n    },\n\n    /** Destroy a frame */\n    _eventFrameClose: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this.del(this._frameIdentify(e.target));\n        }\n    },\n\n    /** Hide all frames */\n    _eventHide: function(e) {\n        !this.event.type && this.hide();\n    },\n\n    /** Fired when scrolling occurs on panel */\n    _eventPanelScroll: function(e) {\n        if (!this.event.type && this.visible) {\n            // Stop propagation if scrolling is happening inside a frame.\n            // TODO: could propagate scrolling if at top/bottom of frame.\n            var frames = $(e.srcElement).parents(\".frame\");\n            if (frames.length !== 0) {\n                e.stopPropagation();\n            } else {\n                e.preventDefault();\n                this._panelScroll(e.originalEvent.detail ? e.originalEvent.detail : e.originalEvent.wheelDelta / -3);\n            }\n        }\n    },\n\n    /** Handle scroll up event */\n    _eventPanelScroll_up: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this._panelScroll(-this.options.scroll);\n        }\n    },\n\n    /** Handle scroll down */\n    _eventPanelScroll_down: function(e) {\n        if (!this.event.type) {\n            e.preventDefault();\n            this._panelScroll(this.options.scroll);\n        }\n    },\n\n    /*\n        FRAME EVENTS SUPPORT\n    */\n\n    /** Identify the target frame */\n    _frameIdentify: function(target) {\n        return this.frame_list[\n            `#${$(target)\n                .closest(\".frame\")\n                .attr(\"id\")}`\n        ];\n    },\n\n    /** Provides drag support */\n    _frameDragStart: function(frame) {\n        this._frameFocus(frame, true);\n        var p = this._frameScreen(frame);\n        this._frameResize(this.frame_shadow, p);\n        this._frameGrid(this.frame_shadow, frame.grid_location);\n        frame.grid_location = null;\n        this.frame_shadow.$el.show();\n        $(\".f-cover\").show();\n    },\n\n    /** Removes drag support */\n    _frameDragStop: function(frame) {\n        this._frameFocus(frame, false);\n        var p = this._frameScreen(this.frame_shadow);\n        this._frameResize(frame, p);\n        this._frameGrid(frame, this.frame_shadow.grid_location, true);\n        this.frame_shadow.grid_location = null;\n        this.frame_shadow.$el.hide();\n        $(\".f-cover\").hide();\n        this._panelAnimationComplete();\n    },\n\n    /*\n        GRID/PIXEL CONVERTER\n    */\n\n    /** Converts a pixel to a grid dimension */\n    _toGridCoord: function(type, px) {\n        var sign = type == \"width\" || type == \"height\" ? 1 : -1;\n        type == \"top\" && (px -= this.top);\n        return parseInt((px + sign * this.options.margin) / this.options.cell, 10);\n    },\n\n    /** Converts a grid to a pixels dimension */\n    _toPixelCoord: function(type, g) {\n        var sign = type == \"width\" || type == \"height\" ? 1 : -1;\n        var px = g * this.options.cell - sign * this.options.margin;\n        type == \"top\" && (px += this.top);\n        return px;\n    },\n\n    /** Converts a pixel to a grid coordinate set */\n    _toGrid: function(px) {\n        return {\n            top: this._toGridCoord(\"top\", px.top),\n            left: this._toGridCoord(\"left\", px.left),\n            width: this._toGridCoord(\"width\", px.width),\n            height: this._toGridCoord(\"height\", px.height)\n        };\n    },\n\n    /** Converts a pixel to a grid coordinate set */\n    _toPixel: function(g) {\n        return {\n            top: this._toPixelCoord(\"top\", g.top),\n            left: this._toPixelCoord(\"left\", g.left),\n            width: this._toPixelCoord(\"width\", g.width),\n            height: this._toPixelCoord(\"height\", g.height)\n        };\n    },\n\n    /* \n        COLLISION DETECTION\n    */\n\n    /** Check collisions for a grid coordinate set */\n    _isCollision: function(g) {\n        function is_collision_pair(a, b) {\n            return !(\n                a.left > b.left + b.width - 1 ||\n                a.left + a.width - 1 < b.left ||\n                a.top > b.top + b.height - 1 ||\n                a.top + a.height - 1 < b.top\n            );\n        }\n        for (var i in this.frame_list) {\n            var frame = this.frame_list[i];\n            if (frame.grid_location !== null && is_collision_pair(g, frame.grid_location)) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /** Return location/grid rank */\n    _locationRank: function(loc) {\n        return loc.top * this.cols + loc.left;\n    },\n\n    /*\n        PANEL/WINDOW FUNCTIONS\n    */\n\n    /** Refresh panel */\n    _panelRefresh: function(animate) {\n        this.cols = parseInt($(window).width() / this.options.cell, 10) + 1;\n        this._frameInsert(null, null, animate);\n    },\n\n    /** Complete panel animation / frames not moving */\n    _panelAnimationComplete: function() {\n        var self = this;\n        $(\".frame\")\n            .promise()\n            .done(() => {\n                self._panelScroll(0, true);\n            });\n    },\n\n    /** Scroll panel */\n    _panelScroll: function(delta, animate) {\n        var top_new = this.top - this.options.scroll * delta;\n        top_new = Math.max(top_new, this.top_max);\n        top_new = Math.min(top_new, this.options.top_min);\n        if (this.top != top_new) {\n            for (var i in this.frame_list) {\n                var frame = this.frame_list[i];\n                if (frame.grid_location !== null) {\n                    var screen_location = {\n                        top: frame.screen_location.top - (this.top - top_new),\n                        left: frame.screen_location.left\n                    };\n                    this._frameOffset(frame, screen_location, animate);\n                }\n            }\n            this.top = top_new;\n        }\n        this.render();\n    },\n\n    /*\n        FRAME FUNCTIONS\n    */\n\n    /** Initialize a new frame */\n    _frameInit: function(frame, id) {\n        frame.id = id;\n        frame.screen_location = {};\n        frame.grid_location = {};\n        frame.grid_rank = null;\n        frame.$el.attr(\"id\", id.substring(1));\n    },\n\n    /** Insert frame at given location */\n    _frameInsert: function(frame, new_loc, animate) {\n        var self = this;\n        var place_list = [];\n        if (frame) {\n            frame.grid_location = null;\n            place_list.push([frame, this._locationRank(new_loc)]);\n        }\n        _.each(this.frame_list, f => {\n            if (f.grid_location !== null) {\n                f.grid_location = null;\n                place_list.push([f, f.grid_rank]);\n            }\n        });\n        place_list.sort((a, b) => (a[1] < b[1] ? -1 : a[1] > b[1] ? 1 : 0));\n        _.each(place_list, place => {\n            self._framePlace(place[0], animate);\n        });\n        this.top_max = 0;\n        _.each(this.frame_list, f => {\n            if (f.grid_location !== null) {\n                self.top_max = Math.max(self.top_max, f.grid_location.top + f.grid_location.height);\n            }\n        });\n        this.top_max = $(window).height() - this.top_max * this.options.cell - 2 * this.options.margin;\n        this.top_max = Math.min(this.top_max, this.options.top_min);\n        this.render();\n    },\n\n    /** Naive frame placement */\n    _framePlace: function(frame, animate) {\n        frame.grid_location = null;\n        var g = this._toGrid(this._frameScreen(frame));\n        var done = false;\n        for (var i = 0; i < this.options.rows; i++) {\n            for (var j = 0; j < Math.max(1, this.cols - g.width); j++) {\n                g.top = i;\n                g.left = j;\n                if (!this._isCollision(g)) {\n                    done = true;\n                    break;\n                }\n            }\n            if (done) {\n                break;\n            }\n        }\n        if (done) {\n            this._frameGrid(frame, g, animate);\n        } else {\n            console.log(\"Grid dimensions exceeded.\");\n        }\n    },\n\n    /** Handle frame focussing */\n    _frameFocus: function(frame, has_focus) {\n        frame.$el.css(\"z-index\", this.frame_z + (has_focus ? 1 : 0));\n    },\n\n    /** New left/top position frame */\n    _frameOffset: function(frame, p, animate) {\n        frame.screen_location.left = p.left;\n        frame.screen_location.top = p.top;\n        if (animate) {\n            this._frameFocus(frame, true);\n            var self = this;\n            frame.$el.animate({ top: p.top, left: p.left }, \"fast\", () => {\n                self._frameFocus(frame, false);\n            });\n        } else {\n            frame.$el.css({ top: p.top, left: p.left });\n        }\n    },\n\n    /** Resize frame */\n    _frameResize: function(frame, p) {\n        frame.$el.css({ width: p.width, height: p.height });\n        frame.screen_location.width = p.width;\n        frame.screen_location.height = p.height;\n    },\n\n    /** Push frame to new grid location */\n    _frameGrid: function(frame, l, animate) {\n        frame.grid_location = l;\n        this._frameOffset(frame, this._toPixel(l), animate);\n        frame.grid_rank = this._locationRank(l);\n    },\n\n    /** Get frame dimensions */\n    _frameScreen: function(frame) {\n        var p = frame.screen_location;\n        return {\n            top: p.top,\n            left: p.left,\n            width: p.width,\n            height: p.height\n        };\n    }\n});\n\nexport default {\n    View: View\n};\n"]}