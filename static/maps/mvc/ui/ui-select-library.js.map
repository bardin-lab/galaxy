{"version":3,"sources":["mvc/ui/ui-select-library.js"],"names":["Libraries","Backbone","Collection","extend","url","Galaxy","root","LibraryDatasets","initialize","self","this","config","Model","library_id","on","fetch","reset","get","View","options","libraries","datasets","library_select","_uiMisc2","default","Select","value","set","dataset_list","name","optional","multiple","onchange","trigger","data","each","model","push","id","update","text","label","library_current","setElement","_template","$","append","$el","success","val"],"mappings":"mOAKIA,EAAYC,SAASC,WAAWC,QAChCC,IAAQC,OAAOC,KAAf,gCAIAC,EAAkBN,SAASC,WAAWC,QACtCK,WAAY,WACR,IAAIC,EAAOC,KACXA,KAAKC,OAAS,IAAIV,SAASW,OAAQC,WAAY,OAC/CH,KAAKC,OAAOG,GAAG,SAAU,WACrBL,EAAKM,OAAQC,OAAO,OAfhCZ,IAAA,WAKIJ,OAAAA,OAAYC,KAAZD,iBAAYU,KAA2BC,OAAAM,IAAA,cAAvCjB,eAKJkB,EAAIX,SAAAA,KAAAA,QAEIC,WAAIC,SAAOU,GAEX,IAAAV,EAAKE,KAGRD,KAP4CU,UAAA,IAAApB,EAQ7CI,KAAKiB,SAAA,IAAWd,EARpBG,KAAAS,QAAAA,EAeIT,KAAAY,eAAA,IAAAC,EAAAC,QAAAC,OAAAP,MACAV,SAAY,SAAAkB,GACRjB,EAAAY,SAAAV,OAAAgB,IAAA,aAAAD,MAKAhB,KAAAkB,aAAgB,IAAIrB,EAAAA,QAAAA,MAehBsB,KAAM,UAbVC,SAAAX,EAAAW,SACAC,SAAKZ,EAAUA,SAeXa,SAAU,WAbdvB,EAAAwB,QAAA,aAKKvB,KAAAU,UAAAN,GAAA,QAAA,WAHoC,IAAzCoB,KAmBIzB,EAAKW,UAAUe,KAAK,SAAAC,GAbxBF,EAAAG,MACKT,MAAAA,EAAeU,GAChBT,MAAMO,EADwBnB,IAAA,YAI9Be,EAAAA,eAAUO,OAAAL,KAkBdxB,KAAKW,SAASP,GAAG,QAAS,WAb1B,IAAAoB,KAEI,OADczB,EAASa,eAAMkB,QAE7B/B,EAAKW,SAALe,KAAA,SAAAC,GACc,SAAVF,EAAUjB,IAAA,SACNS,EAAAA,MACAe,MAAOL,EAAUE,GAFrBG,MAAAL,EAAAnB,IAAA,YAQRR,EAAAmB,aAAAW,OAAAL,KAIIxB,KAAAI,GAAA,SAAI4B,WACAjC,EAAAA,UACIU,EAAAa,SAAII,EAAUV,WAKbhB,KAAAiC,WAAAjC,KAAAkC,aACJlC,KAAAmC,EAAA,mBAPDC,OAAApC,KAAAY,eAAAyB,KAQHrC,KAAAqC,IAAAD,OAAApC,KAAAkB,aAAAmB,KAiBLrC,KAAKU,UAAUL,OAbfC,OAAA,EACAgC,QAAQ,WACJvC,EAAIU,eAAJc,QAAsB,eACIP,IAAtBP,EAAAA,QAAQa,OACXvB,EAAAiB,MAAAjB,EAAAU,QAAAO,WAqBTA,MAAO,SAASuB,GAbZ,OAAAvC,KAAAkB,aAAAF,MAAAuB,IAIQxC,UAAAA,WACA,MACIA,iLAWhBS,KAAAA","file":"../../../scripts/mvc/ui/ui-select-library.js","sourcesContent":["// dependencies\nimport Ui from \"mvc/ui/ui-misc\";\nimport List from \"mvc/ui/ui-list\";\n\n// collection of libraries\nvar Libraries = Backbone.Collection.extend({\n    url: `${Galaxy.root}api/libraries?deleted=false`\n});\n\n// collection of dataset\nvar LibraryDatasets = Backbone.Collection.extend({\n    initialize: function() {\n        var self = this;\n        this.config = new Backbone.Model({ library_id: null });\n        this.config.on(\"change\", () => {\n            self.fetch({ reset: true });\n        });\n    },\n    url: function() {\n        return `${Galaxy.root}api/libraries/${this.config.get(\"library_id\")}/contents`;\n    }\n});\n\n// hda/hdca content selector ui element\nvar View = Backbone.View.extend({\n    // initialize\n    initialize: function(options) {\n        // link this\n        var self = this;\n\n        // collections\n        this.libraries = new Libraries();\n        this.datasets = new LibraryDatasets();\n\n        // link app and options\n        this.options = options;\n\n        // select field for the library\n        // TODO: Remove this once the library API supports searching for library datasets\n        this.library_select = new Ui.Select.View({\n            onchange: function(value) {\n                self.datasets.config.set(\"library_id\", value);\n            }\n        });\n\n        // create ui-list view to keep track of selected data libraries\n        this.dataset_list = new List.View({\n            name: \"dataset\",\n            optional: options.optional,\n            multiple: options.multiple,\n            onchange: function() {\n                self.trigger(\"change\");\n            }\n        });\n\n        // add reset handler for fetched libraries\n        this.libraries.on(\"reset\", () => {\n            var data = [];\n            self.libraries.each(model => {\n                data.push({\n                    value: model.id,\n                    label: model.get(\"name\")\n                });\n            });\n            self.library_select.update(data);\n        });\n\n        // add reset handler for fetched library datasets\n        this.datasets.on(\"reset\", () => {\n            var data = [];\n            var library_current = self.library_select.text();\n            if (library_current !== null) {\n                self.datasets.each(model => {\n                    if (model.get(\"type\") === \"file\") {\n                        data.push({\n                            value: model.id,\n                            label: model.get(\"name\")\n                        });\n                    }\n                });\n            }\n            self.dataset_list.update(data);\n        });\n\n        // add change event. fires on trigger\n        this.on(\"change\", () => {\n            if (options.onchange) {\n                options.onchange(self.value());\n            }\n        });\n\n        // create elements\n        this.setElement(this._template());\n        this.$(\".library-select\").append(this.library_select.$el);\n        this.$el.append(this.dataset_list.$el);\n\n        // initial fetch of libraries\n        this.libraries.fetch({\n            reset: true,\n            success: function() {\n                self.library_select.trigger(\"change\");\n                if (self.options.value !== undefined) {\n                    self.value(self.options.value);\n                }\n            }\n        });\n    },\n\n    /** Return/Set currently selected library datasets */\n    value: function(val) {\n        return this.dataset_list.value(val);\n    },\n\n    /** Template */\n    _template: function() {\n        return (\n            '<div class=\"ui-select-library\">' +\n            '<div class=\"library ui-margin-bottom\">' +\n            '<span class=\"library-title\">Select Library</span>' +\n            '<span class=\"library-select\"/>' +\n            \"</div>\" +\n            \"</div>\"\n        );\n    }\n});\n\nexport default {\n    View: View\n};\n"]}