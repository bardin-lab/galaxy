{"version":3,"sources":["mvc/ui/ui-select-default.js"],"names":["View","Backbone","extend","initialize","options","_this","this","data","data2","model","Model","id","_utils2","default","uid","cls","error_text","empty_text","visible","wait","multiple","searchable","readonly","onchange","value","individual","pagesize","_changeData","_changeDisabled","optional","_changeWait","disabled","_changeVisible","_changeValue","render","on","get","_renderSearchable","_renderClassic","$el","listenTo","attr","$select","empty","addClass","prop","_this2","_getValue","trigger","_this3","append","$","$dropdown","$resize_icon","show","$resize","removeClass","off","event","height","minHeight","currentHeight","currentY","pageY","hide","_this4","select2","all_button","_uiButtons2","ButtonCheck","onclick","_","each","new_value","option","prepend","_match","term","text","String","toUpperCase","indexOf","label","_this5","length","order","index","tags","matched_tags","closeOnSelect","query","q","found","e","tag","callback","more","results","slice","page","formatResult","filteredTags","extraTagWarning","filter","result","t","hasOwnProperty","escape","reduce","memo","find","remove","html","_setValue","isArray","first","undefined","v","set","d","exists","unwait","push","disable","update","add","sorter","setOnChange","findWhere","val","_this6","selected","sort","a","b","isEmpty"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select-default.js","sourcesContent":["/**\n *  This class creates/wraps a default html select field as backbone class.\n */\nimport Utils from \"utils/utils\";\nimport Buttons from \"mvc/ui/ui-buttons\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        this.data = [];\n        this.data2 = [];\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                id: Utils.uid(),\n                cls: \"ui-select\",\n                error_text: \"No options available\",\n                empty_text: \"Nothing selected\",\n                visible: true,\n                wait: false,\n                multiple: false,\n                searchable: true,\n                optional: false,\n                disabled: false,\n                readonly: false,\n                onchange: function() {},\n                value: null,\n                individual: false,\n                pagesize: 20\n            }).set(options);\n        this.on(\"change\", () => {\n            if (this.model.get(\"onchange\")) {\n                this.model.get(\"onchange\")(this.value());\n            }\n        });\n        this.listenTo(this.model, \"change:data\", this._changeData, this);\n        this.listenTo(this.model, \"change:disabled\", this._changeDisabled, this);\n        this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n        this.listenTo(this.model, \"change:visible\", this._changeVisible, this);\n        this.listenTo(this.model, \"change:value\", this._changeValue, this);\n        this.listenTo(this.model, \"change:multiple change:searchable change:cls change:id\", this.render, this);\n        this.render();\n    },\n\n    render: function() {\n        if (this.model.get(\"searchable\")) {\n            this._renderSearchable();\n        } else {\n            this._renderClassic();\n        }\n        this.$el.addClass(this.model.get(\"cls\")).attr(\"id\", this.model.get(\"id\"));\n        this.$select\n            .empty()\n            .addClass(\"select\")\n            .attr(\"id\", `${this.model.get(\"id\")}_select`)\n            .prop(\"multiple\", this.model.get(\"multiple\"))\n            .on(\"change\", () => {\n                this.value(this._getValue());\n                this.trigger(\"change\");\n            });\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n        this._changeDisabled();\n    },\n\n    /** Renders the classic selection field */\n    _renderClassic: function() {\n        this.$el\n            .addClass(this.model.get(\"multiple\") ? \"ui-select-multiple\" : \"ui-select\")\n            .append((this.$select = $(\"<select/>\")))\n            .append((this.$dropdown = $(\"<div/>\")))\n            .append((this.$resize = $(\"<div/>\").append((this.$resize_icon = $(\"<i/>\")))));\n        if (this.model.get(\"multiple\")) {\n            this.$dropdown.hide();\n            this.$resize_icon.addClass(\"fa fa-angle-double-right fa-rotate-45\").show();\n            this.$resize\n                .removeClass()\n                .addClass(\"icon-resize\")\n                .show()\n                .off(\"mousedown\")\n                .on(\"mousedown\", event => {\n                    var currentY = event.pageY;\n                    var currentHeight = this.$select.height();\n                    this.minHeight = this.minHeight || currentHeight;\n                    $(\"#dd-helper\")\n                        .show()\n                        .on(\"mousemove\", event => {\n                            this.$select.height(Math.max(currentHeight + (event.pageY - currentY), this.minHeight));\n                        })\n                        .on(\"mouseup mouseleave\", () => {\n                            $(\"#dd-helper\")\n                                .hide()\n                                .off();\n                        });\n                });\n        } else {\n            this.$dropdown.show();\n            this.$resize.hide();\n            this.$resize_icon.hide();\n        }\n    },\n\n    /** Renders the default select2 field */\n    _renderSearchable: function() {\n        this.$el.append((this.$select = $(\"<div/>\"))).append((this.$dropdown = $(\"<div/>\")));\n        this.$dropdown.hide();\n        if (!this.model.get(\"multiple\")) {\n            this.$dropdown.show().on(\"click\", () => {\n                if (this.$select.select2) {\n                    this.$select.select2(\"open\");\n                }\n            });\n        }\n        this.all_button = null;\n        if (this.model.get(\"multiple\") && !this.model.get(\"individual\") && !this.model.get(\"readonly\")) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: () => {\n                    var new_value = [];\n                    if (this.all_button.value() !== 0) {\n                        _.each(this.model.get(\"data\"), option => {\n                            new_value.push(option.value);\n                        });\n                    }\n                    this.value(new_value);\n                    this.trigger(\"change\");\n                }\n            });\n            this.$el.prepend(this.all_button.$el);\n        }\n    },\n\n    /** Matches a search term with a given text */\n    _match: function(term, text) {\n        return (\n            !term ||\n            term === \"\" ||\n            String(text)\n                .toUpperCase()\n                .indexOf(term.toUpperCase()) >= 0\n        );\n    },\n\n    /** Updates the selection options */\n    _changeData: function() {\n        this.data = [];\n        if (!this.model.get(\"multiple\") && this.model.get(\"optional\")) {\n            this.data.push({\n                value: \"__null__\",\n                label: this.model.get(\"empty_text\")\n            });\n        }\n        _.each(this.model.get(\"data\"), option => {\n            this.data.push(option);\n        });\n        if (this.length() === 0) {\n            this.data.push({\n                value: \"__null__\",\n                label: this.model.get(\"error_text\")\n            });\n        }\n        if (this.model.get(\"searchable\")) {\n            this.data2 = [];\n            _.each(this.data, (option, index) => {\n                this.data2.push({\n                    order: index,\n                    id: option.value,\n                    text: option.label,\n                    tags: option.tags\n                });\n            });\n            if (this.$select.data(\"select2\")) {\n                this.$select.select2(\"destroy\");\n            }\n            this.matched_tags = {};\n            this.$select.select2({\n                data: this.data2,\n                closeOnSelect: !this.model.get(\"multiple\"),\n                multiple: this.model.get(\"multiple\"),\n                query: q => {\n                    this.matched_tags = {};\n                    var pagesize = this.model.get(\"pagesize\");\n                    var results = _.filter(this.data2, e => {\n                        var found = false;\n                        _.each(e.tags, tag => {\n                            if (this._match(q.term, tag)) {\n                                found = this.matched_tags[tag] = true;\n                            }\n                        });\n                        return found || this._match(q.term, e.text);\n                    });\n                    q.callback({\n                        results: results.slice((q.page - 1) * pagesize, q.page * pagesize),\n                        more: results.length >= q.page * pagesize\n                    });\n                },\n                formatResult: result => {\n                    let extraTagWarning = \"\";\n                    let filteredTags = _.filter(result.tags, t => this.matched_tags.hasOwnProperty(t));\n                    if (filteredTags.length > 5) {\n                        extraTagWarning = `&nbsp;<div class=\"label label-warning\">${filteredTags.length -\n                            5} more tags</div>`;\n                    }\n                    return `\n                    ${_.escape(result.text)}\n                    <div class=\"ui-tags\">\n                        ${_.reduce(\n                            filteredTags.slice(0, 5),\n                            (memo, tag) => {\n                                return `${memo}&nbsp;<div class=\"label label-info\">${_.escape(tag)}</div>`;\n                            },\n                            \"\"\n                        )}\n                        ${extraTagWarning}\n                   </div>`;\n                }\n            });\n            this.$(\".select2-container .select2-search input\").off(\"blur\");\n        } else {\n            this.$select.find(\"option\").remove();\n            _.each(this.data, option => {\n                this.$select.append(\n                    $(\"<option/>\")\n                        .attr(\"value\", option.value)\n                        .html(_.escape(option.label))\n                );\n            });\n        }\n        this.model.set(\"disabled\", this.model.get(\"readonly\") || this.length() === 0);\n        this._changeValue();\n    },\n\n    /** Handles field enabling/disabling, usually used when no options are available */\n    _changeDisabled: function() {\n        if (this.model.get(\"searchable\")) {\n            this.$select.select2(this.model.get(\"disabled\") ? \"disable\" : \"enable\");\n        } else {\n            this.$select.prop(\"disabled\", this.model.get(\"disabled\"));\n        }\n    },\n\n    /** Searchable fields may display a spinner e.g. while waiting for a server response */\n    _changeWait: function() {\n        this.$dropdown\n            .removeClass()\n            .addClass(\"icon-dropdown fa\")\n            .addClass(this.model.get(\"wait\") ? \"fa-spinner fa-spin\" : \"fa-caret-down\");\n    },\n\n    /** Handles field visibility */\n    _changeVisible: function() {\n        this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        this.$select[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n    },\n\n    /** Synchronizes the model value with the actually selected field value */\n    _changeValue: function() {\n        this._setValue(this.model.get(\"value\"));\n        if (this.model.get(\"multiple\")) {\n            if (this.all_button) {\n                var value = this._getValue();\n                this.all_button.value($.isArray(value) ? value.length : 0, this.length());\n            }\n        } else if (this._getValue() === null && !this.model.get(\"optional\")) {\n            this._setValue(this.first());\n        }\n    },\n\n    /** Return/Set current selection */\n    value: function(new_value) {\n        if (new_value !== undefined) {\n            this.model.set(\"value\", new_value);\n        }\n        return this._getValue();\n    },\n\n    /** Return the first select option */\n    first: function() {\n        return this.data.length > 0 ? this.data[0].value : null;\n    },\n\n    /** Check if a value is an existing option */\n    exists: function(value) {\n        return _.findWhere(this.data, { value: value });\n    },\n\n    /** Return the label/text of the current selection */\n    text: function() {\n        var v = this._getValue();\n        var d = this.exists($.isArray(v) ? v[0] : v);\n        return d ? d.label : \"\";\n    },\n\n    /** Show the select field */\n    show: function() {\n        this.model.set(\"visible\", true);\n    },\n\n    /** Hide the select field */\n    hide: function() {\n        this.model.set(\"visible\", false);\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set(\"wait\", true);\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set(\"wait\", false);\n    },\n\n    /** Returns true if the field is disabled */\n    disabled: function() {\n        return this.model.get(\"disabled\");\n    },\n\n    /** Enable the select field */\n    enable: function() {\n        this.model.set(\"disabled\", false);\n    },\n\n    /** Disable the select field */\n    disable: function() {\n        this.model.set(\"disabled\", true);\n    },\n\n    /** Update all available options at once */\n    add: function(options, sorter) {\n        _.each(this.model.get(\"data\"), v => {\n            if (v.keep && !_.findWhere(options, { value: v.value })) {\n                options.push(v);\n            }\n        });\n        if (sorter && options) {\n            options.sort(sorter);\n        }\n        this.model.set(\"data\", options);\n    },\n\n    /** Update available options */\n    update: function(options) {\n        this.model.set(\"data\", options);\n    },\n\n    /** Set the custom onchange callback function */\n    setOnChange: function(callback) {\n        this.model.set(\"onchange\", callback);\n    },\n\n    /** Number of available options */\n    length: function() {\n        return $.isArray(this.model.get(\"data\")) ? this.model.get(\"data\").length : 0;\n    },\n\n    /** Set value to dom */\n    _setValue: function(new_value) {\n        if (new_value === null || new_value === undefined) {\n            new_value = \"__null__\";\n        }\n        if (this.model.get(\"multiple\")) {\n            new_value = $.isArray(new_value) ? new_value : [new_value];\n        } else if ($.isArray(new_value)) {\n            if (new_value.length > 0) {\n                new_value = new_value[0];\n            } else {\n                new_value = \"__null__\";\n            }\n        }\n        if (this.model.get(\"searchable\")) {\n            if ($.isArray(new_value)) {\n                var val = [];\n                _.each(new_value, v => {\n                    var d = _.findWhere(this.data2, { id: v });\n                    if (d) {\n                        val.push(d);\n                    }\n                });\n                new_value = val;\n            } else {\n                var d = _.findWhere(this.data2, { id: new_value });\n                new_value = d;\n            }\n            this.$select.select2(\"data\", new_value);\n        } else {\n            this.$select.val(new_value);\n        }\n    },\n\n    /** Get value from dom */\n    _getValue: function() {\n        var val = null;\n        if (this.model.get(\"searchable\")) {\n            var selected = this.$select.select2(\"data\");\n            if (selected) {\n                if ($.isArray(selected)) {\n                    val = [];\n                    selected.sort((a, b) => a.order - b.order);\n                    _.each(selected, v => {\n                        val.push(v.id);\n                    });\n                } else {\n                    val = selected.id;\n                }\n            }\n        } else {\n            val = this.$select.val();\n        }\n        return Utils.isEmpty(val) ? null : val;\n    }\n});\n\nexport default {\n    View: View\n};\n"]}