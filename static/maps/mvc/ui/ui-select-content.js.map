{"version":3,"sources":["mvc/ui/ui-select-content.js"],"names":["Batch","DISABLED","ENABLED","LINKED","Configurations","data","src","icon","tooltip","_localization2","default","multiple","batch","data_multiple","workflow_data","workflow_data_multiple","workflow_data_collection","module_data","src_labels","pagelimit","statustimer","this","model","options","setElement","Backbone","button_product","value","hda","hdca","addClass","_uiMisc2","RadioButton","View","$batch_div","$","e","preventDefault","append","on","html","self","$batch","linked","history","clone","enabled","listenTo","$el","onchange","render","_changeValue","target","_changeWait","lastenter","removeClass","_handleDrop","_changeData","_changeCurrent","new_value","current","_changeType","details","result","wait","set","unwait","update","_","$batchfield","undefined","button_type","config","field","hide","id_list","isArray","length","_batch","values","i","Galaxy","get","config_id","push","sort","a","b","hid","emit","debug","c","fields","optional","batchmode","individual","String","extensions","_utils2","textify","button_data","each","searchable","select_options","item","keep","label","tags","trigger","button_width","Math","max","css","margin-left","list","items","name","new_src","drop_data","id","new_id","current_value","_handleDropStatus","indexOf","JSON","originalEvent","dataTransfer","getData","history_content_type","map_over_type","ev","status","setTimeout"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select-content.js","sourcesContent":["import _l from \"utils/localization\";\nimport Utils from \"utils/utils\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Select from \"mvc/ui/ui-select-default\";\n/** Batch mode variations */\nvar Batch = { DISABLED: \"disabled\", ENABLED: \"enabled\", LINKED: \"linked\" };\n\n/** List of available content selectors options */\nvar Configurations = {\n    data: [\n        {\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: _l(\"Single dataset\"),\n            multiple: false,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: _l(\"Multiple datasets\"),\n            multiple: true,\n            batch: Batch.LINKED\n        },\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: _l(\"Dataset collection\"),\n            multiple: false,\n            batch: Batch.LINKED\n        }\n    ],\n    data_multiple: [\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: _l(\"Multiple datasets\"),\n            multiple: true,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: _l(\"Dataset collections\"),\n            multiple: true,\n            batch: Batch.DISABLED\n        }\n    ],\n    data_collection: [\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: _l(\"Dataset collection\"),\n            multiple: false,\n            batch: Batch.DISABLED\n        }\n    ],\n    workflow_data: [\n        {\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: _l(\"Single dataset\"),\n            multiple: false,\n            batch: Batch.DISABLED\n        }\n    ],\n    workflow_data_multiple: [\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: _l(\"Multiple datasets\"),\n            multiple: true,\n            batch: Batch.DISABLED\n        }\n    ],\n    workflow_data_collection: [\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: _l(\"Dataset collection\"),\n            multiple: false,\n            batch: Batch.DISABLED\n        }\n    ],\n    module_data: [\n        {\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: _l(\"Single dataset\"),\n            multiple: false,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: _l(\"Multiple datasets\"),\n            multiple: true,\n            batch: Batch.ENABLED\n        }\n    ],\n    module_data_collection: [\n        {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: _l(\"Dataset collection\"),\n            multiple: false,\n            batch: Batch.DISABLED\n        },\n        {\n            src: \"hdca\",\n            icon: \"fa-folder\",\n            tooltip: _l(\"Multiple collections\"),\n            multiple: true,\n            batch: Batch.ENABLED\n        }\n    ]\n};\n\n/** View for hda and hdca content selector ui elements */\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model =\n            (options && options.model) ||\n            new Backbone.Model({\n                src_labels: { hda: \"dataset\", hdca: \"dataset collection\" },\n                pagelimit: 100,\n                statustimer: 1000\n            }).set(options);\n        this.setElement($(\"<div/>\").addClass(\"ui-select-content\"));\n        this.button_product = new Ui.RadioButton.View({\n            value: \"false\",\n            data: [\n                {\n                    icon: \"fa fa-chain\",\n                    value: \"false\",\n                    tooltip:\n                        \"Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.\"\n                },\n                {\n                    icon: \"fa fa-chain-broken\",\n                    value: \"true\",\n                    tooltip: \"Unlinked dataset inputs will be run against *all* other inputs.\"\n                }\n            ]\n        });\n        var $batch_div = $(\"<div/>\")\n            .addClass(\"ui-form-info\")\n            .append($(\"<i/>\").addClass(\"fa fa-sitemap\"))\n            .append(\n                $(\"<span/>\").html(\n                    \"This is a batch mode input field. Separate jobs will be triggered for each dataset selection.\"\n                )\n            );\n        this.$batch = {\n            linked: $batch_div.clone(),\n            enabled: $batch_div\n                .clone()\n                .append(\n                    $(\"<div/>\")\n                        .append(\n                            $(\"<div/>\")\n                                .addClass(\"ui-form-title\")\n                                .html(\"Batch options:\")\n                        )\n                        .append(this.button_product.$el)\n                )\n                .append($(\"<div/>\").css(\"clear\", \"both\"))\n        };\n\n        // add drag-drop event handlers\n        this.$el\n            .on(\"dragenter\", function(e) {\n                this.lastenter = e.target;\n                self.$el.addClass(\"ui-dragover\");\n            })\n            .on(\"dragover\", e => {\n                e.preventDefault();\n            })\n            .on(\"dragleave\", function(e) {\n                this.lastenter === e.target && self.$el.removeClass(\"ui-dragover\");\n            })\n            .on(\"drop\", e => {\n                self._handleDrop(e);\n            });\n\n        // track current history elements\n        this.history = {};\n\n        // add listeners\n        this.listenTo(this.model, \"change:data\", this._changeData, this);\n        this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n        this.listenTo(this.model, \"change:current\", this._changeCurrent, this);\n        this.listenTo(this.model, \"change:value\", this._changeValue, this);\n        this.listenTo(\n            this.model,\n            \"change:type change:optional change:multiple change:extensions\",\n            this._changeType,\n            this\n        );\n        this.render();\n\n        // add change event\n        this.on(\"change\", () => {\n            options.onchange && options.onchange(self.value());\n        });\n    },\n\n    render: function() {\n        this._changeType();\n        this._changeValue();\n        this._changeWait();\n    },\n\n    /** Indicate that select fields are being updated */\n    wait: function() {\n        this.model.set(\"wait\", true);\n    },\n\n    /** Indicate that the options update has been completed */\n    unwait: function() {\n        this.model.set(\"wait\", false);\n    },\n\n    /** Update data representing selectable options */\n    update: function(options) {\n        this.model.set(\"data\", options);\n    },\n\n    /** Return the currently selected dataset values */\n    value: function(new_value) {\n        new_value !== undefined && this.model.set(\"value\", new_value);\n        var current = this.model.get(\"current\");\n        if (this.config[current]) {\n            var id_list = this.fields[current].value();\n            if (id_list !== null) {\n                id_list = $.isArray(id_list) ? id_list : [id_list];\n                if (id_list.length > 0) {\n                    var result = this._batch({ values: [] });\n                    for (var i in id_list) {\n                        var details = this.history[`${id_list[i]}_${this.config[current].src}`];\n                        if (details) {\n                            result.values.push(details);\n                        } else {\n                            Galaxy.emit.debug(\n                                \"ui-select-content::value()\",\n                                `Requested details not found for '${id_list[i]}'.`\n                            );\n                            return null;\n                        }\n                    }\n                    result.values.sort((a, b) => a.hid - b.hid);\n                    return result;\n                }\n            }\n        } else {\n            Galaxy.emit.debug(\"ui-select-content::value()\", `Invalid value/source '${new_value}'.`);\n        }\n        return null;\n    },\n\n    /** Change of current select field */\n    _changeCurrent: function() {\n        var self = this;\n        _.each(this.fields, (field, i) => {\n            if (self.model.get(\"current\") == i) {\n                field.$el.show();\n                _.each(self.$batch, ($batchfield, batchmode) => {\n                    $batchfield[self.config[i].batch == batchmode ? \"show\" : \"hide\"]();\n                });\n                self.button_type.value(i);\n            } else {\n                field.$el.hide();\n            }\n        });\n    },\n\n    /** Change of type */\n    _changeType: function() {\n        var self = this;\n\n        // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n        var config_id =\n            (this.model.get(\"flavor\") ? `${this.model.get(\"flavor\")}_` : \"\") +\n            String(this.model.get(\"type\")) +\n            (this.model.get(\"multiple\") ? \"_multiple\" : \"\");\n        if (Configurations[config_id]) {\n            this.config = Configurations[config_id];\n        } else {\n            this.config = Configurations[\"data\"];\n            Galaxy.emit.debug(\"ui-select-content::_changeType()\", `Invalid configuration/type id '${config_id}'.`);\n        }\n\n        // prepare extension component of error message\n        var data = self.model.get(\"data\");\n        var extensions = Utils.textify(this.model.get(\"extensions\"));\n        var src_labels = this.model.get(\"src_labels\");\n\n        // build views\n        this.fields = [];\n        this.button_data = [];\n        _.each(this.config, (c, i) => {\n            self.button_data.push({\n                value: i,\n                icon: c.icon,\n                tooltip: c.tooltip\n            });\n            self.fields.push(\n                new Select.View({\n                    optional: self.model.get(\"optional\"),\n                    multiple: c.multiple,\n                    searchable:\n                        !c.multiple || (data && data[c.src] && data[c.src].length > self.model.get(\"pagelimit\")),\n                    individual: true,\n                    error_text: `No ${extensions ? `${extensions} ` : \"\"}${src_labels[c.src] || \"content\"} available.`,\n                    onchange: function() {\n                        self.trigger(\"change\");\n                    }\n                })\n            );\n        });\n        this.button_type = new Ui.RadioButton.View({\n            value: this.model.get(\"current\"),\n            data: this.button_data,\n            onchange: function(value) {\n                self.model.set(\"current\", value);\n                self.trigger(\"change\");\n            }\n        });\n\n        // append views\n        this.$el.empty();\n        var button_width = 0;\n        if (this.fields.length > 1) {\n            this.$el.append(this.button_type.$el);\n            button_width = `${Math.max(0, this.fields.length * 36)}px`;\n        }\n        _.each(this.fields, field => {\n            self.$el.append(field.$el.css({ \"margin-left\": button_width }));\n        });\n        _.each(this.$batch, ($batchfield, batchmode) => {\n            self.$el.append($batchfield.css({ \"margin-left\": button_width }));\n        });\n        this.model.set(\"current\", 0);\n        this._changeCurrent();\n        this._changeData();\n    },\n\n    /** Change of wait flag */\n    _changeWait: function() {\n        var self = this;\n        _.each(this.fields, field => {\n            field[self.model.get(\"wait\") ? \"wait\" : \"unwait\"]();\n        });\n    },\n\n    /** Change of available options */\n    _changeData: function() {\n        var options = this.model.get(\"data\");\n        var self = this;\n        var select_options = {};\n        _.each(options, (items, src) => {\n            select_options[src] = [];\n            _.each(items, item => {\n                select_options[src].push({\n                    hid: item.hid,\n                    keep: item.keep,\n                    label: `${item.hid}: ${item.name}`,\n                    value: item.id,\n                    tags: item.tags\n                });\n                self.history[`${item.id}_${src}`] = item;\n            });\n        });\n        _.each(this.config, (c, i) => {\n            select_options[c.src] && self.fields[i].add(select_options[c.src], (a, b) => b.hid - a.hid);\n        });\n    },\n\n    /** Change of incoming value */\n    _changeValue: function() {\n        var new_value = this.model.get(\"value\");\n        if (new_value && new_value.values && new_value.values.length > 0) {\n            // create list with content ids\n            var list = [];\n            _.each(new_value.values, value => {\n                list.push(value.id);\n            });\n            // sniff first suitable field type from config list\n            var src = new_value.values[0].src;\n            var multiple = new_value.values.length > 1;\n            for (var i = 0; i < this.config.length; i++) {\n                var field = this.fields[i];\n                var c = this.config[i];\n                if (c.src == src && [multiple, true].indexOf(c.multiple) !== -1) {\n                    this.model.set(\"current\", i);\n                    field.value(list);\n                    break;\n                }\n            }\n        } else {\n            _.each(this.fields, field => {\n                field.value(null);\n            });\n        }\n    },\n\n    /** Handles drop events e.g. from history panel */\n    _handleDrop: function(ev) {\n        try {\n            var data = this.model.get(\"data\");\n            var current = this.model.get(\"current\");\n            var config = this.config[current];\n            var field = this.fields[current];\n            var drop_data = JSON.parse(ev.originalEvent.dataTransfer.getData(\"text\"))[0];\n            var new_id = drop_data.id;\n            var new_src = drop_data.history_content_type == \"dataset\" ? \"hda\" : \"hdca\";\n            var new_value = { id: new_id, src: new_src };\n            if (data && _.findWhere(data[new_src], new_value)) {\n                if (config.src == new_src) {\n                    var current_value = field.value();\n                    if (current_value && config.multiple) {\n                        if (current_value.indexOf(new_id) == -1) {\n                            current_value.push(new_id);\n                        }\n                    } else {\n                        current_value = new_id;\n                    }\n                    field.value(current_value);\n                } else {\n                    this.model.set(\"value\", { values: [new_value] });\n                    this.model.trigger(\"change:value\");\n                }\n                this.trigger(\"change\");\n                this._handleDropStatus(\"success\");\n            } else {\n                this._handleDropStatus(\"danger\");\n            }\n        } catch (e) {\n            this._handleDropStatus(\"danger\");\n        }\n        ev.preventDefault();\n    },\n\n    /** Highlight drag result */\n    _handleDropStatus: function(status) {\n        var self = this;\n        this.$el.removeClass(\"ui-dragover\").addClass(`ui-dragover-${status}`);\n        setTimeout(() => {\n            self.$el.removeClass(`ui-dragover-${status}`);\n        }, this.model.get(\"statustimer\"));\n    },\n\n    /** Assists in identifying the batch mode */\n    _batch: function(result) {\n        result[\"batch\"] = false;\n        var current = this.model.get(\"current\");\n        var config = this.config[current];\n        if (config.src == \"hdca\" && !config.multiple) {\n            var hdca = this.history[`${this.fields[current].value()}_hdca`];\n            if (hdca && hdca.map_over_type) {\n                result[\"batch\"] = true;\n            }\n        }\n        if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n            result[\"batch\"] = true;\n            if (config.batch == Batch.ENABLED && this.button_product.value() === \"true\") {\n                result[\"product\"] = true;\n            }\n        }\n        return result;\n    }\n});\n\nexport default {\n    View: View\n};\n"]}