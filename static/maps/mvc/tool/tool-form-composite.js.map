{"version":3,"sources":["mvc/tool/tool-form-composite.js"],"names":["View","Backbone","extend","initialize","options","self","this","modal","parent","Galaxy","_uiModal2","default","model","Model","deferred","_deferred2","setElement","$","addClass","append","$message","$header","$steps","$el","_configure","render","window","resize","_refresh","_","reduce","children","memo","child","outerHeight","height","margin","input","value","callback","match","re","exec","String","wp_name","wp_inputs","label","name","wp_count","_handleWorkflowParameter","steps","links","parms","each","get","step","i","emit","debug","step_type","title","step_label","step_name","annotation","step_version","merge","escape","icon","help","parseInt","_isDataStep","sustain_conditionals","text_disable","index","fixed_title","citations","collapsible","collapsed","sustain_repeats","narrow","text_enable","initial_errors","cls","inputs","hide_operations","output_connection","sub_step","j","step_index","input_step_index","push","connections_by_name","output_connections","connection","type","step_linked","output_name","wp_input","color","style","backdrop","pja","post_job_actions","action_arguments","_formData2","visitInputs","context","is_runtime_value","__class__","is_data_input","indexOf","data_ref","data_resolved","length","wp_linked","is_workflow","isEmpty","flavor","reset","_renderHeader","_renderParameters","_renderHistory","_renderUseCachedJob","_renderMessage","execute_btn","_uiMisc2","Button","onclick","empty","message","status","persistent","fade","step_version_changes","Message","wp_form","onchange","_formView2","_append","input_list","input_def","_refreshStep","cases","extra_user_preferences","attributes","preferences","history_form","test_param","user","JSON","parse","display_use_cached_job_checkbox","job_options_form","_renderStep","execute","postchange","current_state","tool_id","success","form","process","error","response","id","tool_version","version","data","create","portlet","_utils2","request","url","root","is_simple_input","hide_label","resolve","ignore","needs_refresh","html","short_str","field","new_value","link","multiple","forms","wp_field","show_progress","set","wait","wait_text","setTimeout","promise","_refreshHistory","history","_refresh_history","clearTimeout","field_list","refresh","numOfUnfinishedShownContents","UPDATE_DELAY","source_step","values","v","_submit","wp_value","split","join","replacement_params","trigger","batch","validated","currHistoryPanel","job_input_id","job_inputs","input_value","input_id","job_def","new_history_name","history_form_data","toolId","toolVersion","input_found","step_related_errors","err_data","optional","error_messages","highlight","parameters","show","buttons","Close","complete","hide","$container","isArray","enabled","_webhooks2","WebhookView","lst","matchResponse","startsWith","_templateSuccess","body","_templateError","err_msg","_enabled","percentage","sanitize","text","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form-composite.js","sourcesContent":["import _l from \"utils/localization\";\n/** This is the run workflow tool form view. */\nimport Utils from \"utils/utils\";\nimport Deferred from \"utils/deferred\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport Form from \"mvc/form/form-view\";\nimport FormData from \"mvc/form/form-data\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport Webhooks from \"mvc/webhooks\";\nimport WorkflowIcons from \"mvc/workflow/workflow-icons\";\nvar View = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.modal = parent.Galaxy.modal || new Modal.View();\n        this.model = (options && options.model) || new Backbone.Model(options);\n        this.deferred = new Deferred();\n        this.setElement(\n            $(\"<div/>\")\n                .addClass(\"ui-form-composite\")\n                .append((this.$message = $(\"<div/>\")))\n                .append((this.$header = $(\"<div/>\")))\n                .append((this.$steps = $(\"<div/>\")))\n        );\n        $(\"body\").append(this.$el);\n        this._configure();\n        this.render();\n        $(window).resize(() => {\n            self._refresh();\n        });\n    },\n\n    /** Refresh height of scrollable div below header, handle scrolling by lazy loading steps */\n    _refresh: function(step_index) {\n        var margin =\n            _.reduce(this.$el.children(), (memo, child) => memo + $(child).outerHeight(), 0) -\n            this.$steps.height() +\n            90;\n        this.$steps.css(\"height\", $(window).height() - margin);\n    },\n\n    /** Configures form/step options for each workflow step */\n    _configure: function() {\n        var self = this;\n        this.forms = [];\n        this.steps = [];\n        this.links = [];\n        this.parms = [];\n        _.each(this.model.get(\"steps\"), (step, i) => {\n            Galaxy.emit.debug(\"tool-form-composite::initialize()\", `${i} : Preparing workflow step.`);\n            var icon = WorkflowIcons[step.step_type];\n            var title = `${parseInt(i + 1)}: ${step.step_label || step.step_name}`;\n            if (step.annotation) {\n                title += ` - ${step.annotation}`;\n            }\n            if (step.step_version) {\n                title += ` (Galaxy Version ${step.step_version})`;\n            }\n            step = Utils.merge(\n                {\n                    index: i,\n                    fixed_title: _.escape(title),\n                    icon: icon || \"\",\n                    help: null,\n                    citations: null,\n                    collapsible: true,\n                    collapsed: i > 0 && !self._isDataStep(step),\n                    sustain_version: true,\n                    sustain_repeats: true,\n                    sustain_conditionals: true,\n                    narrow: true,\n                    text_enable: \"Edit\",\n                    text_disable: \"Undo\",\n                    cls_enable: \"fa fa-edit\",\n                    cls_disable: \"fa fa-undo\",\n                    errors: step.messages,\n                    initial_errors: true,\n                    cls: \"ui-portlet-narrow\",\n                    hide_operations: true,\n                    needs_refresh: false,\n                    always_refresh: step.step_type != \"tool\"\n                },\n                step\n            );\n            self.steps[i] = step;\n            self.links[i] = [];\n            self.parms[i] = {};\n        });\n\n        // build linear index of step input pairs\n        _.each(this.steps, (step, i) => {\n            FormData.visitInputs(step.inputs, (input, name) => {\n                self.parms[i][name] = input;\n            });\n        });\n\n        // iterate through data input modules and collect linked sub steps\n        _.each(this.steps, (step, i) => {\n            _.each(step.output_connections, output_connection => {\n                _.each(self.steps, (sub_step, j) => {\n                    sub_step.step_index === output_connection.input_step_index && self.links[i].push(sub_step);\n                });\n            });\n        });\n\n        // convert all connected data inputs to hidden fields with proper labels,\n        // and track the linked source step\n        _.each(this.steps, (step, i) => {\n            _.each(self.steps, (sub_step, j) => {\n                var connections_by_name = {};\n                _.each(step.output_connections, connection => {\n                    sub_step.step_index === connection.input_step_index &&\n                        (connections_by_name[connection.input_name] = connection);\n                });\n                _.each(self.parms[j], (input, name) => {\n                    var connection = connections_by_name[name];\n                    if (connection) {\n                        input.type = \"hidden\";\n                        input.help = input.step_linked ? `${input.help}, ` : \"\";\n                        input.help += `Output dataset '${connection.output_name}' from step ${parseInt(i) + 1}`;\n                        input.step_linked = input.step_linked || [];\n                        input.step_linked.push({ index: step.index, step_type: step.step_type });\n                    }\n                });\n            });\n        });\n\n        // identify and configure workflow parameters\n        var wp_count = 0;\n        this.wp_inputs = {};\n        function _handleWorkflowParameter(value, callback) {\n            var re = /\\$\\{(.+?)\\}/g;\n            var match;\n            while ((match = re.exec(String(value)))) {\n                var wp_name = match[1];\n                callback(\n                    (self.wp_inputs[wp_name] = self.wp_inputs[wp_name] || {\n                        label: wp_name,\n                        name: wp_name,\n                        type: \"text\",\n                        color: `hsl( ${++wp_count * 100}, 70%, 30% )`,\n                        style: \"ui-form-wp-source\",\n                        links: []\n                    })\n                );\n            }\n        }\n        _.each(this.steps, (step, i) => {\n            _.each(self.parms[i], (input, name) => {\n                _handleWorkflowParameter(input.value, wp_input => {\n                    wp_input.links.push(step);\n                    input.wp_linked = true;\n                    input.type = \"text\";\n                    input.backdrop = true;\n                    input.style = \"ui-form-wp-target\";\n                });\n            });\n            _.each(step.post_job_actions, pja => {\n                _.each(pja.action_arguments, arg => {\n                    _handleWorkflowParameter(arg, () => {});\n                });\n            });\n        });\n\n        // select fields are shown for dynamic fields if all putative data inputs are available,\n        // or if an explicit reference is specified as data_ref and available\n        _.each(this.steps, (step, i) => {\n            if (step.step_type == \"tool\") {\n                var data_resolved = true;\n                FormData.visitInputs(step.inputs, (input, name, context) => {\n                    var is_runtime_value = input.value && input.value.__class__ == \"RuntimeValue\";\n                    var is_data_input = [\"data\", \"data_collection\"].indexOf(input.type) != -1;\n                    var data_ref = context[input.data_ref];\n                    input.step_linked && !self._isDataStep(input.step_linked) && (data_resolved = false);\n                    input.options &&\n                        ((input.options.length == 0 && !data_resolved) || input.wp_linked) &&\n                        (input.is_workflow = true);\n                    data_ref &&\n                        (input.is_workflow =\n                            (data_ref.step_linked && !self._isDataStep(data_ref.step_linked)) || input.wp_linked);\n                    (is_data_input || (input.value && input.value.__class__ == \"RuntimeValue\" && !input.step_linked)) &&\n                        (step.collapsed = false);\n                    is_runtime_value && (input.value = input.default_value);\n                    input.flavor = \"workflow\";\n                    if (!is_runtime_value && !is_data_input && input.type !== \"hidden\" && !input.wp_linked) {\n                        if (input.optional || (!Utils.isEmpty(input.value) && input.value !== \"\")) {\n                            input.collapsible_value = input.value;\n                            input.collapsible_preview = true;\n                        }\n                    }\n                });\n            }\n        });\n    },\n\n    render: function() {\n        var self = this;\n        this.deferred.reset();\n        this._renderHeader();\n        this._renderMessage();\n        this._renderParameters();\n        this._renderHistory();\n        this._renderUseCachedJob();\n        _.each(this.steps, step => {\n            self._renderStep(step);\n        });\n    },\n\n    /** Render header */\n    _renderHeader: function() {\n        var self = this;\n        this.execute_btn = new Ui.Button({\n            icon: \"fa-check\",\n            title: _l(\"Run workflow\"),\n            cls: \"btn btn-primary\",\n            onclick: function() {\n                self._execute();\n            }\n        });\n        this.$header\n            .addClass(\"ui-form-header\")\n            .empty()\n            .append(\n                new Ui.Label({\n                    title: `Workflow: ${this.model.get(\"name\")}`\n                }).$el\n            )\n            .append(this.execute_btn.$el);\n    },\n\n    /** Render message */\n    _renderMessage: function() {\n        this.$message.empty();\n        if (this.model.get(\"has_upgrade_messages\")) {\n            this.$message.append(\n                new Ui.Message({\n                    message:\n                        \"Some tools in this workflow may have changed since it was last saved or some errors were found. The workflow may still run, but any new options will have default values. Please review the messages below to make a decision about whether the changes will affect your analysis.\",\n                    status: \"warning\",\n                    persistent: true,\n                    fade: false\n                }).$el\n            );\n        }\n        var step_version_changes = this.model.get(\"step_version_changes\");\n        if (step_version_changes && step_version_changes.length > 0) {\n            this.$message.append(\n                new Ui.Message({\n                    message:\n                        \"Some tools are being executed with different versions compared to those available when this workflow was last saved because the other versions are not or no longer available on this Galaxy instance. To upgrade your workflow and dismiss this message simply edit the workflow and re-save it.\",\n                    status: \"warning\",\n                    persistent: true,\n                    fade: false\n                }).$el\n            );\n        }\n    },\n\n    /** Render workflow parameters */\n    _renderParameters: function() {\n        var self = this;\n        this.wp_form = null;\n        if (!_.isEmpty(this.wp_inputs)) {\n            this.wp_form = new Form({\n                title: \"<b>Workflow Parameters</b>\",\n                inputs: this.wp_inputs,\n                cls: \"ui-portlet-narrow\",\n                onchange: function() {\n                    _.each(self.wp_form.input_list, (input_def, i) => {\n                        _.each(input_def.links, step => {\n                            self._refreshStep(step);\n                        });\n                    });\n                }\n            });\n            this._append(this.$steps.empty(), this.wp_form.$el);\n        }\n    },\n\n    /** Render workflow parameters */\n    _renderHistory: function() {\n        this.history_form = new Form({\n            cls: \"ui-portlet-narrow\",\n            title: \"<b>History Options</b>\",\n            inputs: [\n                {\n                    type: \"conditional\",\n                    name: \"new_history\",\n                    test_param: {\n                        name: \"check\",\n                        label: \"Send results to a new history\",\n                        type: \"boolean\",\n                        value: \"false\",\n                        help: \"\"\n                    },\n                    cases: [\n                        {\n                            value: \"true\",\n                            inputs: [\n                                {\n                                    name: \"name\",\n                                    label: \"History name\",\n                                    type: \"text\",\n                                    value: this.model.get(\"name\")\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        });\n        this._append(this.$steps, this.history_form.$el);\n    },\n\n    /** Render job caching option */\n    _renderUseCachedJob: function() {\n        var extra_user_preferences = {};\n        if (Galaxy.user.attributes.preferences && \"extra_user_preferences\" in Galaxy.user.attributes.preferences) {\n            extra_user_preferences = JSON.parse(Galaxy.user.attributes.preferences.extra_user_preferences);\n        }\n        var display_use_cached_job_checkbox =\n            \"use_cached_job|use_cached_job_checkbox\" in extra_user_preferences\n                ? extra_user_preferences[\"use_cached_job|use_cached_job_checkbox\"]\n                : false;\n        this.display_use_cached_job_checkbox = display_use_cached_job_checkbox === \"true\";\n        if (this.display_use_cached_job_checkbox) {\n            this.job_options_form = new Form({\n                cls: \"ui-portlet-narrow\",\n                title: \"<b>Job re-use Options</b>\",\n                inputs: [\n                    {\n                        type: \"conditional\",\n                        name: \"use_cached_job\",\n                        test_param: {\n                            name: \"check\",\n                            label: \"BETA: Attempt to reuse jobs with identical parameters?\",\n                            type: \"boolean\",\n                            value: \"false\",\n                            help: \"This may skip executing jobs that you have already run.\"\n                        }\n                    }\n                ]\n            });\n            this._append(this.$steps, this.job_options_form.$el);\n        }\n    },\n\n    /** Render step */\n    _renderStep: function(step) {\n        var self = this;\n        var form = null;\n        this.deferred.execute(promise => {\n            self.$steps.addClass(\"ui-steps\");\n            if (step.step_type == \"tool\") {\n                step.postchange = function(process, form) {\n                    var self = this;\n                    var current_state = {\n                        tool_id: step.id,\n                        tool_version: step.version,\n                        inputs: $.extend(true, {}, form.data.create())\n                    };\n                    form.wait(true);\n                    Galaxy.emit.debug(\"tool-form-composite::postchange()\", \"Sending current state.\", current_state);\n                    Utils.request({\n                        type: \"POST\",\n                        url: `${Galaxy.root}api/tools/${step.id}/build`,\n                        data: current_state,\n                        success: function(data) {\n                            form.update(data);\n                            form.wait(false);\n                            Galaxy.emit.debug(\"tool-form-composite::postchange()\", \"Received new model.\", data);\n                            process.resolve();\n                        },\n                        error: function(response) {\n                            Galaxy.emit.debug(\"tool-form-composite::postchange()\", \"Refresh request failed.\", response);\n                            process.reject();\n                        }\n                    });\n                };\n                form = new ToolFormBase(step);\n                if (step.post_job_actions && step.post_job_actions.length) {\n                    form.portlet.append(\n                        $(\"<div/>\")\n                            .addClass(\"ui-form-element-disabled\")\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-title\")\n                                    .html(\"<b>Job Post Actions</b>\")\n                            )\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-preview\")\n                                    .html(\n                                        _.reduce(\n                                            step.post_job_actions,\n                                            (memo, value) => `${memo} ${value.short_str}`,\n                                            \"\"\n                                        )\n                                    )\n                            )\n                    );\n                }\n            } else {\n                var is_simple_input = [\"data_input\", \"data_collection_input\"].indexOf(step.step_type) != -1;\n                _.each(step.inputs, input => {\n                    input.flavor = \"module\";\n                    input.hide_label = is_simple_input;\n                });\n                form = new Form(\n                    Utils.merge(\n                        {\n                            title: step.fixed_title,\n                            onchange: function() {\n                                _.each(self.links[step.index], link => {\n                                    self._refreshStep(link);\n                                });\n                            },\n                            inputs:\n                                step.inputs && step.inputs.length > 0\n                                    ? step.inputs\n                                    : [\n                                          {\n                                              type: \"hidden\",\n                                              name: \"No options available.\",\n                                              ignore: null\n                                          }\n                                      ]\n                        },\n                        step\n                    )\n                );\n            }\n            self.forms[step.index] = form;\n            self._append(self.$steps, form.$el);\n            self._refresh();\n            step.needs_refresh && self._refreshStep(step);\n            form.portlet[!self.show_progress ? \"enable\" : \"disable\"]();\n            self.show_progress &&\n                self.execute_btn.model.set({\n                    wait: true,\n                    wait_text: \"Preparing...\",\n                    percentage: (step.index + 1) * 100.0 / self.steps.length\n                });\n            Galaxy.emit.debug(\"tool-form-composite::initialize()\", `${step.index} : Workflow step state ready.`, step);\n            setTimeout(() => {\n                promise.resolve();\n            }, 0);\n        });\n    },\n\n    /** Refreshes step values from source step values */\n    _refreshStep: function(step) {\n        var self = this;\n        var form = this.forms[step.index];\n        if (form) {\n            _.each(self.parms[step.index], (input, name) => {\n                if (input.step_linked || input.wp_linked) {\n                    var field = form.field_list[form.data.match(name)];\n                    if (field) {\n                        var new_value = undefined;\n                        if (input.step_linked) {\n                            new_value = { values: [] };\n                            _.each(input.step_linked, source_step => {\n                                if (self._isDataStep(source_step)) {\n                                    var value = self.forms[source_step.index].data.create().input;\n                                    value &&\n                                        _.each(value.values, v => {\n                                            new_value.values.push(v);\n                                        });\n                                }\n                            });\n                            if (!input.multiple && new_value.values.length > 0) {\n                                new_value = {\n                                    values: [new_value.values[0]]\n                                };\n                            }\n                        } else if (input.wp_linked) {\n                            new_value = input.value;\n                            var re = /\\$\\{(.+?)\\}/g;\n                            var match;\n                            while ((match = re.exec(input.value))) {\n                                var wp_field = self.wp_form.field_list[self.wp_form.data.match(match[1])];\n                                var wp_value = wp_field && wp_field.value();\n                                if (wp_value) {\n                                    new_value = new_value.split(match[0]).join(wp_value);\n                                }\n                            }\n                        }\n                        if (new_value !== undefined) {\n                            field.value(new_value);\n                        }\n                    }\n                }\n            });\n            form.trigger(\"change\");\n        } else {\n            step.needs_refresh = true;\n        }\n    },\n\n    /** Refresh the history after job submission while form is shown */\n    _refreshHistory: function() {\n        var self = this;\n        var history = parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.model;\n        this._refresh_history && clearTimeout(this._refresh_history);\n        if (history) {\n            history.refresh().success(() => {\n                if (history.numOfUnfinishedShownContents() === 0) {\n                    self._refresh_history = setTimeout(() => {\n                        self._refreshHistory();\n                    }, history.UPDATE_DELAY);\n                }\n            });\n        }\n    },\n\n    /** Build remaining steps */\n    _execute: function() {\n        var self = this;\n        this.show_progress = true;\n        this._enabled(false);\n        this.deferred.execute(promise => {\n            setTimeout(() => {\n                promise.resolve();\n                self._submit();\n            }, 0);\n        });\n    },\n\n    /** Validate and submit workflow */\n    _submit: function() {\n        var self = this;\n        var history_form_data = this.history_form.data.create();\n        var job_def = {\n            new_history_name: history_form_data[\"new_history|name\"] ? history_form_data[\"new_history|name\"] : null,\n            history_id: !history_form_data[\"new_history|name\"] ? this.model.get(\"history_id\") : null,\n            replacement_params: this.wp_form ? this.wp_form.data.create() : {},\n            parameters: {},\n            // Tool form will submit flat maps for each parameter\n            // (e.g. \"repeat_0|cond|param\": \"foo\" instead of nested\n            // data structures).\n            parameters_normalized: true,\n            // Tool form always wants a list of invocations back\n            // so that inputs can be batched.\n            batch: true\n        };\n        if (this.display_use_cached_job_checkbox) {\n            job_def[\"use_cached_job\"] = this.job_options_form.data.create()[\"use_cached_job|check\"] === \"true\";\n        }\n        var validated = true;\n        for (var i in this.forms) {\n            var form = this.forms[i];\n            var job_inputs = form.data.create();\n            var step = self.steps[i];\n            var step_index = step.step_index;\n            form.trigger(\"reset\");\n            for (var job_input_id in job_inputs) {\n                var input_value = job_inputs[job_input_id];\n                var input_id = form.data.match(job_input_id);\n                var input_field = form.field_list[input_id];\n                var input_def = form.input_list[input_id];\n                if (!input_def.step_linked) {\n                    if (this._isDataStep(step)) {\n                        validated = input_value && input_value.values && input_value.values.length > 0;\n                    } else {\n                        validated =\n                            input_def.optional ||\n                            (input_def.is_workflow && input_value !== \"\") ||\n                            (!input_def.is_workflow && input_value !== null);\n                    }\n                    if (!validated) {\n                        form.highlight(input_id);\n                        break;\n                    }\n                    job_def.parameters[step_index] = job_def.parameters[step_index] || {};\n                    job_def.parameters[step_index][job_input_id] = job_inputs[job_input_id];\n                }\n            }\n            if (!validated) {\n                break;\n            }\n        }\n        if (!validated) {\n            self._enabled(true);\n            Galaxy.emit.debug(\"tool-form-composite::submit()\", \"Validation failed.\", job_def);\n        } else {\n            Galaxy.emit.debug(\"tool-form-composite::submit()\", \"Validation complete.\", job_def);\n            Utils.request({\n                type: \"POST\",\n                url: `${Galaxy.root}api/workflows/${this.model.id}/invocations`,\n                data: job_def,\n                success: function(response) {\n                    Galaxy.emit.debug(\"tool-form-composite::submit\", \"Submission successful.\", response);\n                    self.$el.children().hide();\n                    self.$el.append(self._templateSuccess(response));\n\n                    // Show Webhook if job is running\n                    if ($.isArray(response) && response.length > 0) {\n                        self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                        var WebhookApp = new Webhooks.WebhookView({\n                            type: \"workflow\",\n                            toolId: job_def.tool_id,\n                            toolVersion: job_def.tool_version\n                        });\n                    }\n\n                    self._refreshHistory();\n                },\n                error: function(response) {\n                    Galaxy.emit.debug(\"tool-form-composite::submit\", \"Submission failed.\", response);\n                    var input_found = false;\n                    if (response && response.err_data) {\n                        for (var i in self.forms) {\n                            var form = self.forms[i];\n                            var step_related_errors = response.err_data[form.model.get(\"step_index\")];\n                            if (step_related_errors) {\n                                var error_messages = form.data.matchResponse(step_related_errors);\n                                for (var input_id in error_messages) {\n                                    form.highlight(input_id, error_messages[input_id]);\n                                    input_found = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (!input_found) {\n                        self.modal.show({\n                            title: _l(\"Workflow submission failed\"),\n                            body: self._templateError(job_def, response && response.err_msg),\n                            buttons: {\n                                Close: function() {\n                                    self.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                },\n                complete: function() {\n                    self._enabled(true);\n                }\n            });\n        }\n    },\n\n    /** Append new dom to body */\n    _append: function($container, $el) {\n        $container.append(\"<p/>\").append($el);\n    },\n\n    /** Set enabled/disabled state */\n    _enabled: function(enabled) {\n        this.execute_btn.model.set({\n            wait: !enabled,\n            wait_text: \"Sending...\",\n            percentage: -1\n        });\n        this.wp_form && this.wp_form.portlet[enabled ? \"enable\" : \"disable\"]();\n        this.history_form && this.history_form.portlet[enabled ? \"enable\" : \"disable\"]();\n        _.each(this.forms, form => {\n            form && form.portlet[enabled ? \"enable\" : \"disable\"]();\n        });\n    },\n\n    /** Is data input module/step */\n    _isDataStep: function(steps) {\n        var lst = $.isArray(steps) ? steps : [steps];\n        for (var i = 0; i < lst.length; i++) {\n            var step = lst[i];\n            if (!step || !step.step_type || !step.step_type.startsWith(\"data\")) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /** Templates */\n    _templateSuccess: function(response) {\n        if ($.isArray(response) && response.length > 0) {\n            return $(\"<div/>\")\n                .addClass(\"donemessagelarge\")\n                .append(\n                    $(\"<p/>\").html(\n                        `Successfully invoked workflow <b>${Utils.sanitize(this.model.get(\"name\"))}</b>${\n                            response.length > 1 ? ` <b>${response.length} times</b>` : \"\"\n                        }.`\n                    )\n                )\n                .append(\n                    $(\"<p/>\")\n                        .append(\"<b/>\")\n                        .text(\n                            \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                        )\n                );\n        } else {\n            return this._templateError(response, \"Invalid success response. No invocations found.\");\n        }\n    },\n\n    _templateError: function(response, err_msg) {\n        return $(\"<div/>\")\n            .addClass(\"errormessagelarge\")\n            .append(\n                $(\"<p/>\").text(\n                    `The server could not complete the request. Please contact the Galaxy Team if this error persists. ${JSON.stringify(\n                        err_msg\n                    ) || \"\"}`\n                )\n            )\n            .append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n    }\n});\nexport default {\n    View: View\n};\n"]}