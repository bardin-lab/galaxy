{"version":3,"sources":["mvc/annotation.js"],"names":["AnnotationEditor","Backbone","View","extend","_baseMvc2","default","LoggableMixin","HiddenUntilActivatedViewMixin","tagName","className","initialize","options","this","tooltipConfig","placement","render","hiddenUntilActivated","$activator","$el","html","_template","listenTo","model","use_textarea","on_finish","newAnnotation","view","save","annotation","silent","fail","$annotation","text","previous","get","_localization2","_","escape","join","find","remove","off","call"],"mappings":"8OAMIA,EAAmBC,SAASC,KAAKC,OAAOC,EAAAC,QAAQC,eAC/CH,OAAOC,EAAAC,QAAQE,+BACfJ,QACGK,QAAS,MACTC,UAAW,qBAGXC,WAAY,SAASC,GACjBA,EAAUA,MACVC,KAAKC,cAAgBF,EAAQE,gBACzBC,UAAW,UAVvBd,KAAAA,SAAAA,KAAmBC,MAASC,oBAAY,WAGpCM,KAASO,WAcLH,KAAKI,qBAAqBL,EAAQM,WAAYN,IAR9CI,OAAA,WACID,IAAAA,EAAAA,KAaJ,OAd8CF,KAA9CM,IAAAC,KAAAP,KAAAQ,aAKAR,KAAKS,cAAcC,oBACfC,cAAA,EADJC,UAAA,SAAAC,GAGKT,EAAAA,cAAqBL,KAAAA,GAf1Be,EAAAJ,MAAAK,MAAAC,WAAAH,IAAAI,QAAA,IAAAC,KAAA,WA6BYJ,EAAKK,cAAcC,KAAKN,EAAKJ,MAAMW,SAAS,oBARnDf,MAIDK,UAAAA,WACAC,IAAAA,EAAWZ,KAAAU,MAAAY,IAAA,cACPR,OAEIA,0BACH,EAAAS,EAAA9B,SAAA,cACJ,WAEL,2BAjCA+B,EAAAC,OAAAT,GA+CI,UAXRU,KAAA,KAIQP,YAAA,WACA,OAAAnB,KAAAM,IAAAqB,KAAA,gBAgBRC,OAAQ,WANR5B,KAAAmB,YAAAU,MACAV,KAAAA,cAAanB,KAAAU,OACTrB,SAAOC,KAAKgB,UAASsB,OAAAE,KAArB9B,OAIJ4B,SAAQ,WACJ,OAAKT,oBAAAA,GAALnB,KAAAU,MAAA,KAAAgB,KAAA,kBAKJtC,iBAAAA","file":"../../scripts/mvc/annotation.js","sourcesContent":["import baseMVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport \"ui/editable-text\";\n// =============================================================================\n/** A view on any model that has a 'annotation' attribute\n */\nvar AnnotationEditor = Backbone.View.extend(baseMVC.LoggableMixin)\n    .extend(baseMVC.HiddenUntilActivatedViewMixin)\n    .extend({\n        tagName: \"div\",\n        className: \"annotation-display\",\n\n        /** Set up listeners, parse options */\n        initialize: function(options) {\n            options = options || {};\n            this.tooltipConfig = options.tooltipConfig || {\n                placement: \"bottom\"\n            };\n            //console.debug( this, options );\n            // only listen to the model only for changes to annotations\n            this.listenTo(this.model, \"change:annotation\", function() {\n                this.render();\n            });\n            this.hiddenUntilActivated(options.$activator, options);\n        },\n\n        /** Build the DOM elements, call select to on the created input, and set up behaviors */\n        render: function() {\n            var view = this;\n            this.$el.html(this._template());\n\n            //TODO: handle empties better\n            this.$annotation().make_text_editable({\n                use_textarea: true,\n                on_finish: function(newAnnotation) {\n                    view.$annotation().text(newAnnotation);\n                    view.model.save({ annotation: newAnnotation }, { silent: true }).fail(() => {\n                        view.$annotation().text(view.model.previous(\"annotation\"));\n                    });\n                }\n            });\n            return this;\n        },\n\n        /** @returns {String} the html text used to build the view's DOM */\n        _template: function() {\n            var annotation = this.model.get(\"annotation\");\n            return [\n                //TODO: make prompt optional\n                '<label class=\"prompt\">',\n                _l(\"Annotation\"),\n                \"</label>\",\n                // set up initial tags by adding as CSV to input vals (necc. to init select2)\n                '<div class=\"annotation\">',\n                _.escape(annotation),\n                \"</div>\"\n            ].join(\"\");\n        },\n\n        /** @returns {jQuery} the main element for this view */\n        $annotation: function() {\n            return this.$el.find(\".annotation\");\n        },\n\n        /** shut down event listeners and remove this view's DOM */\n        remove: function() {\n            this.$annotation.off();\n            this.stopListening(this.model);\n            Backbone.View.prototype.remove.call(this);\n        },\n\n        /** string rep */\n        toString: function() {\n            return [\"AnnotationEditor(\", `${this.model}`, \")\"].join(\"\");\n        }\n    });\n// =============================================================================\nexport default {\n    AnnotationEditor: AnnotationEditor\n};\n"]}