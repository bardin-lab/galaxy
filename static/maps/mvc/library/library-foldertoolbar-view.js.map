{"version":3,"sources":["mvc/library/library-foldertoolbar-view.js"],"names":["FolderToolbarView","Backbone","View","extend","el","events","click .toolbtn-create-folder","click .toolbtn-bulk-import","click .include-deleted-datasets-chk","click .toolbtn-bulk-delete","click .toolbtn-show-locinfo","click .page-size-prompt","click .toolbtn-collection-import","defaults","can_add_library_item","contains_file_or_folder","chain_call_control","total_number","failed_number","jstree","histories","select_genome","auto","id","modal","description","list_genomes","initialize","options","this","_","list_extensions","render","text","templateToolBar","template_defaults","is_admin","mutiple_add_dataset_options","Galaxy","fetchExtAndGenomes","user","isAdmin","is_anonym","isAnonymous","config","user_library_import_dir","allow_library_path_paste","paginator_template","templatePaginator","$","find","html","show_page","parseInt","page_count","renderPaginator","get","total_items_count","items_shown","show","configureElements","hide","tooltip","event","_this","stopPropagation","template","templateNewFolderInModal","createFolderFromModal","title","_localization2","default","body","Close","closing_events","createNewFolderEvent","serializeNewFolder","current_folder_id","folder","_libraryModel2","FolderAsModel","url_items","history","fragment","split","indexOf","length","url","urlRoot","save","success","_toastr2","libraries","folderListView","collection","add","error","model","response","folderDetails","responseJSON","err_msg","type","name","val","validateNewFolder","e","_this2","preventDefault","$checkedValues","findCheckedRows","templateImportIntoHistoryModal","fetchUserHistories","done","models","promise","Import","importAllIntoHistory","GalaxyHistories","fetch","_this3","disableButton","new_history_name","processImportToHistory","new_history","history_id","history_name","always","createNewHistory","root","checked_items","findCheckedItems","i","dataset_ids","library_dataset_id","historyItem","HistoryItem","items_to_import","push","folder_ids","content","source","initChainCallControl","jQuery","getJSON","progress","chainCallImportingIntoHistory","width","Math","round","txt_representation","format","data","ld_ids","processDownload","method","param","inputs","each","pair","appendTo","remove","addFilesFromHistoryModal","_this4","template_modal","templateAddFilesFromHistory","buttons","Add","navigate","trigger","closing_callback","library_router","fetchAndDisplayHistoryContents","target","value","importFilesFromPathModal","_this5","templateImportPathModal","_this6","_utils2","datatypes","key","extension","description_url","b","a","genomes","sort","cache","css","container","$el","select_extension","_uiSelect2","renderSelectBoxes","_this7","importFromJstreePath","importFilesFromGalaxyFolderModal","bind","renderJstree","change","disabled_jstree_element","Jstree","core","types","icon","err_code","warning","checkbox","importFromPathsClicked","preserve_dirs","is","link_data","space_to_tab","to_posix_lines","tag_using_filenames","file_type","dbkey","paths","valid_paths","action","chainCallImportingFolders","trimmed","info","templateAddingDatasetsProgressBar","folder_name","templateDeletingItemsProgressBar","templateImportIntoHistoryProgressBar","emit","all_nodes","get_selected","selected_nodes","filter","node","state","disabled","selection_type","undefined","li_attr","full_path","full_source","_this8","HistoryContents","history_contents_template","templateHistoryContents","set","contents","history_contents","reverse","prop","addAllDatasetsFromHistory","checked_hdas","history_item_ids","history_item_types","items_to_add","hid","item_type","closest","history_item_id","folder_item","Item","from_hdca_id","chainCallAddingHdas","history_item_set","_this9","popped_item","pop","window","onclick","location","when","updateProgress","fail","chainCallImportingUserdirFiles","_this10","post","_this11","added_hdas","hdas_set","_this12","Folder","from_hda_id","item_to_delete","chainCallDeletingItems","updated_item","_this13","deleted_items","item","destroy","checkIncludeDeleted","fetchFolder","include_deleted","model_class","items_to_delete","items_total","progressStep","dataset","row_id","substring","library","libraryListView","parent_library_id","showLocInfoModal","showLocInfo","Library","_this14","showImportModal","templateLocInfoInModal","showPageSizePrompt","folder_page_size","back","prompt","preferences","showCollectionSelect","templateCollectionSelectModal","Continue","prepareCollectionTypeSelect","prepareHistoryTypeSelect","select_collection_type","onchange","updateCollectionType","history_options","_this16","collectionType","showColectionBuilder","elements_source","_this17","collection_item","deleted","select_collection_history","collection_elements","collectionImport","folder_container","modal_title","creator_class","creationFn","elements","Collection","element","where","_this18","selected_history_id","collectionCreatorModal","selected_history_name","src","_this19","historyId","ListCollectionCreator","defaultHideSourceItems","hdca","map","createHDCA","HistoryDatasetCollection","hideSourceItems","collection_type","hide_source_items","_pairCollectionCreator2","PairCollectionCreator","_listCollectionCreator2","_listOfPairsCollectionCreator2","pairedCollectionCreatorModal","elementIdentifiers","_hdcaModel2","history_content_type","element_identifiers","templateBrowserModal","join"],"mappings":"giBAWIA,EAAoBC,SAASC,KAAKC,QAClCC,GAAI,UAEJC,QACIC,+BAAgC,wBAChCC,6BAA8B,uBAC9BC,sCAAuC,sBACvCC,6BAA8B,sBAC9BC,8BAA+B,cAC/BC,0BAA2B,qBAC3BC,mCAAoC,wBAGxCC,UACIC,sBAAsB,EACtBC,yBAAyB,EACzBC,oBACIC,aAAc,EACdC,cAAe,GAlBvBlB,wBAAoBC,WAGpBI,MAAAA,KAGIc,OAAA,KAGAC,UAAA,KAuBJC,cAAe,KAjBXN,iBAAAA,KAGIG,mBALEI,MA6BNC,GAAI,OAnBRC,KAAAA,cAqBIC,YAnBJ,sZASAC,gBAsBAC,WAAY,SAASC,GAnBrBC,KAAAD,QAAAE,EAAAjB,SAAAe,MAAAC,KAAAhB,UACAkB,KAAAA,qBAqBIF,KAAKG,UAjBLT,OAAAA,SAAIK,GACJK,KAAAA,QAAMH,EAAA3B,OAFJ0B,KAAAD,QAAAA,GAGFH,IAAAA,EACII,KAAAK,kBA7CiCC,GAkEjCZ,GAAIM,KAAKD,QAAQL,GAbzBa,UAAA,EACAV,WAAc,EAeNW,6BAA6B,GAZjCC,OAAKV,OACLO,EAAKI,SAALD,OAAAE,KAAAC,UACAN,EAAAO,UAAAJ,OAAAE,KAAAG,cAgBkD,OAA1CL,OAAOM,OAAOC,0BAbA,IAAlBP,OAAAM,OAAAE,0BACkClB,OAAtCU,OAAKV,OAAYzB,qBAEbgC,EAAAA,6BAAoB,IAGpBO,KAAAA,IAAAA,KAAAA,EAHoBP,KAchBA,gBAAAA,SAAAA,GACHN,KAAAD,QAAAE,EAAA3B,OAAA0B,KAAAD,QAAAA,GACJ,IAAAmB,EAAAlB,KAAAmB,oBACDC,EAAA,QAlFqCC,KAAA,qBA8FhCC,KATTJ,GAWgBxB,GAAIM,KAAKD,QAAQL,GACjB6B,UAAWC,SAASxB,KAAKD,QAAQwB,WACjCE,WAAYD,SAASxB,KAAKD,QAAQ0B,YATlDC,kBAAiB1B,KAAAD,QAASA,kBACjBA,YAAYzB,KAAOyB,QAAKA,YACzBmB,iBAAqBT,OAAKU,UAAAA,YAA9BQ,IAAA,wBAQYC,kBAAAA,SAAAA,GACAC,KAAAA,QAAAA,EAAAA,OAAa7B,KAAKD,QAAQ8B,IARtC,IAG2B7B,KAH3BD,QAAAd,qBA5FqCmC,EAAA,sBAAAU,OA0GzCC,EAAAA,sBAAmBC,QAQ8B,IAAzChC,KAAKD,QAAQb,yBALbuB,OAAKV,KACHU,OAAAE,KAAAG,eAIFM,EAAKrB,yBAAQb,OACTuB,EAAAA,gCAAauB,SAJdZ,EAAA,gCAAAU,OACDV,EAAA,yBAAFU,SAUKV,EAAA,gCAAAY,OACJZ,EAAA,yBAAMY,QAEHZ,KAAAA,IAAAA,KAAE,iBAAAa,WAGNb,sBAAE,SAAAc,GAAA,IAAAC,EAAAnC,KACFoB,EAAAA,iBACHc,EAAAE,kBACD,IAAAC,EAAShB,KAAKiB,2BACjBtC,KApIwCL,MAAAc,OAAAd,MA2IrCK,KAAKL,MAAMmC,MALfS,gBAAAA,EAAuCC,OAAA,EAAAC,EAAAC,SAAA,qBAQ/BC,KAAMN,IAPVH,SACAA,OAAME,WACFC,EAAAA,wBAEJO,MAAWd,WACPe,OAAAA,MAAgBb,YAMXc,qBAHI,WAILF,IAAAA,EAAO5C,KAAA+C,qBACHtC,GAAAA,KAAAA,kBAAOd,GAAP,CACH,IAVTqD,EAUSC,EAAA,IAAAC,EAAAR,QAAAS,cANIC,EAAAhF,SAAAiF,QAAAC,SAAAC,MAAA,KAkBLP,EAjK6BI,EAAAI,QAAA,SAAA,EAiKTJ,EAAUA,EAAUK,OAAS,GANrCL,EAAKL,EAALU,OAApB,GAEIR,EAAAS,IAAIT,EAASU,QAAIX,EAEjBC,EAAAW,KAAIZ,GACJa,QAAIT,SAAUI,GACVR,OAAAA,MAAAA,OADJc,EAAApB,QAEOmB,QAAA,mBACHb,EAAAA,KAAAA,KAAAA,WACHvC,OAAAsD,UAAAC,eAAAC,WAAAC,IAAAjB,IAUGkB,MAAO,SAASC,EAAOC,GAP3BpB,OAAAtD,MAAY2E,YACkB,IAAjBD,EAAAE,aACL9D,EAAAA,QAAOd,MAAP0E,EAAAE,aAAAC,SAEAvB,EAAAA,QAAWkB,MAAEM,8BAKbX,EAAApB,QAAAyB,MAAI,6BAEH,OAAA,GAGJpB,mBAAA,WAdsB,OAgB9B2B,KA3BDtD,EA2BO,sBAAAuD,MACH/E,YAAAwB,EAAA,6BAAiBuD,QAYzBC,kBAAmB,SAASN,GAP5BvB,MAAoB,KAApBA,EAAoB2B,MAGZ9E,qBAAAA,SAAeiF,GAAA,IAAAC,EAAA9E,KAFZ6E,EAAAE,iBAIV,IAlMwCC,EAAAhF,KAAAiF,kBA2MjC5C,EAAWrC,KAAKkF,iCAPL,IAAnBN,EAAmBnB,OACfK,EAAApB,QAAO4B,KAAAA,wCAUWtE,KAAKmF,qBAPOC,KAAA,WAUlBN,EAAKnF,MAAQc,OAAOd,MAT9BoF,EAAAA,MAAFjD,MACIkD,gBAAsBC,EACtB5C,OAAW,EAAAI,EAAAC,SAAKwC,uBAChBF,KAAAA,GACAzF,UAAgBuF,EAAAvF,UAAA8F,SAEZC,SACJC,OACU,WACFT,EAAarE,wBAEToC,MAAAA,WACOpC,OAAAd,MAAAqC,aAKHuD,KAAAA,SAAAA,EAAAA,QACSC,IAALnB,EAAKmB,aACR1B,EAAApB,QAHIyB,MAAAE,EAAAE,aAAAC,SAKD/D,EAAAA,QAAAA,MAAOd,yBAOfwF,mBAAA,WAGH,OAFAnF,KAAAT,UAFD,IAEO2D,EAAAR,QAAA+C,gBACHzF,KAAAT,UAAAmG,SAInBF,qBA3OwC,WAAA,IAAAG,EAAA3F,KAoPrCA,KAAKL,MAAMiG,cAAc,UAP7BT,IAAAA,EAAoBnF,KAAAL,MAAAyB,EAAA,4BAAWuD,MAC3B,GAAqB,KAArBkB,EACA7F,KAAIsF,iBAAe/F,GACnB6F,KAAOE,SAAAA,GAhP8BK,EAAAG,uBAAAC,EAAArG,GAAAqG,EAAArB,QAmPzCc,KAAAA,SAAAA,EAAAA,EAAsBrB,GAAWL,EAAApB,QAAAyB,MAAA,wBACxBxE,OAAMiG,WACPC,EAAAA,MAAAA,aAAwBlG,gBAExB,CAEQ,IAAAqG,EAAKF,EAAAA,kDAAmDpB,MAC3DuB,EACK7E,EAAA,kDAAwBhB,OAC1BJ,KAAA8F,uBAAW3B,EAAM8B,GACpBjG,KANLL,MAOKuG,aAAO,YAIZC,iBAAIH,SAAAA,GAEJ,OADIC,EAAAA,KAAAA,OAAiBG,KAAjBH,iBAAiBvB,KAAAmB,KAI5BC,uBAvQwC,SAAAE,EAAAC,GA2QrC,IAAA,IAIII,EAAgBrG,KAAKsG,mBAN7BH,KAEII,EAAOjB,EAAPkB,YAAA/C,OAAA,EAAA8C,GAAA,EAAAA,IAAA,CA3QqC,IAAAE,EAAAJ,EAAAG,YAAAD,IAoR7BG,EAAc,IAAIxD,EAAAR,QAAkBiE,aANhDb,IAAwBY,EAAA/C,QAAAqC,EAAxBF,YACIY,EAAIL,QAAgBI,EACpBC,EAAIE,OAAAA,UACJA,EAAAC,KAAAH,GAGI,IAAA,IAAAH,EAAIG,EAAcI,WAAIrD,OAAA,EAAA8C,GAAkBI,EAAAA,IAAAA,CACxCD,IAAAA,EAAqBA,EAAY/C,WAAUqC,GAC3CU,EAAYK,IAAAA,EAAAA,QAAUN,YACtBC,EAAAA,IAAYM,EAASrD,QAArBqC,EAAAU,YACAE,EAAAA,QAAgBC,EACnBH,EAAAM,OAAA,iBACDJ,EAAAC,KAAAH,GAEI1G,KAAAiH,sBACAxD,OAAIiD,EAAcjD,OAClBiD,OAAAA,aACAA,aAAAA,IAIJQ,OAAAC,QAAKF,OAAAA,KAAL,6BAA0BjB,GACtBvC,KAAAA,8BAAwBA,EADFwC,IAO1BiB,eAAOC,WACPnH,KAAAoH,UAAKC,KAAAA,aACRjG,EA5SwC,wBAAAkG,MAAAC,KAAAC,MAAAxH,KAAAoH,UA4SxC,KAQG,IAAIK,EAAwBF,KAAKC,MAAMxH,KAAKoH,UAAxC,aANRhG,EAAA,oBAAAhB,KAAAqH,IAOIrG,SAAE,SAAAsG,GACL,IAtTwCrB,EAAArG,KAAAsG,mBA8TjC5C,EAASjD,OAAO2F,KAAhB,mCAAuDsB,EAN/DC,GAAAC,OAAAvB,EAAAG,YAAAM,WAAAT,EAAAS,YAQI9G,KAAK6H,gBAAgBnE,EAAKiE,EAAM,QAGpCE,gBAAA,SAAAnE,EAAAiE,EAAAG,GAQI,GAAIpE,GAAOiE,EAAM,CAEbA,EAAuB,iBAATA,EAAoBA,EAAOvG,EAAE2G,MAAMJ,GAEjD,IAAIK,EAAS,GACb5G,EAAE6G,KAAKN,EAAKpE,MAAM,KAAM,WANhCsE,IAAAA,EAAiB7H,KAAAuD,MAAA,KACTG,GAAAA,8BAAawE,EAAA,GAAbxE,YAAawE,EAAA,GAAbxE,SAGAtC,EAAAA,iBAAAsC,EAAA,cAAAoE,GAAA,QAAA,KAAAE,EAAA,WACAG,SAAIH,QACJ5G,SACIgH,SACAJ,EAAAA,QAAAA,KAAAA,uCAEJlE,EAAApB,QAAAyB,MAAA,uBAOAkE,yBAAA,WAAiB,IAAAC,EAAAtI,KACpBA,KAAAT,UAAA,IAAA2D,EAAAR,QAAA+C,gBACJzF,KA7VwCT,UAkWhCmG,QAHT2C,KAAAA,WAAqCC,EAAA3I,MAAAc,OAAAd,MAMzB,IAAI4I,EAAiBD,EAAKE,8BALlCF,EAAK/I,MAALuC,MACKvC,gBAEA6F,EACG5C,OAAK7C,EAAAA,EAAAA,SAAL,qCACI4I,KAAAA,GACC5I,UAAW2I,EAAA/I,UAAA8F,SAEZ7C,SACAG,IAAM4F,WACFhJ,EAAAA,6BAEJkJ,MAAS,WACLC,OAAK/I,MAAAqC,SAGLY,iBAAO,WACHnC,OAAAA,UAAauB,eAAb2G,SAAAlI,WAAA6H,EAAA5I,IAAAkJ,SAAA,OAGRC,EAAAA,+BAAkBP,EAAA/I,UAAM8F,OAAA,GAAA3F,IACpBe,EAAAA,qBAAOsD,OAAU+E,SAAAA,GACpBR,EAAAS,+BAAA7G,EAAA8G,OAAAC,WAGL7H,KAAE,SAAAgD,EAAAC,QACO0E,IAAAA,EAAAA,aADTjF,EAAApB,QAAAyB,MAAAE,EAAAE,aAAAC,SAKIV,EAAApB,QAAO2B,MAASE,yBAQhC2E,yBAAA,WAAA,IAAAC,EAAAnJ,KAIIA,KAAKL,MAAQc,OAAOd,MACpB,IAAI4I,EAAiBvI,KAAKoJ,0BAF9BF,KAAAA,MAAAA,MAAqCrG,gBAAA,EAK7BL,OAAO,EAAAC,EAAAC,SAAG,gCAJdC,KAAKhD,MACL8I,SACAlD,OAAWzD,WACPe,EAAAA,uBAAAA,IAEAF,MAAM4F,WACNE,OAAS9I,MAAAqC,SAGJ6G,iBAHI,WAKDpI,OAAAA,UAAOd,eAAPgJ,SAAAlI,WAAA0I,EAAAzJ,IACHkJ,SAAA,OAIDnI,KAAAA,qBAYZC,mBAAoB,WAAW,IAAA2I,EAAArJ,KAJ/BsJ,EAAA5G,QAAAf,KAMQ+B,IAAQjD,OAAO2F,KAAf,qCACAvC,QAAS,SAAA0F,GACLF,EAAKnJ,mBAJjBQ,IAAAA,IAAAA,KAAoB6I,EAAWF,EAAAnJ,gBAAA2G,MAOXnH,GAAI6J,EAAUC,GAAKC,UANnCrJ,KAAUuB,EAAI6H,GAAAC,UACFhJ,YAAR8I,EAAAC,GAAA5J,YACAiE,gBAAS0F,EAAAC,GAAaE,kBAGdL,EAAAnJ,gBAAKA,KAAAA,SAAAA,EAALyJ,GAAKzJ,OAAqB0J,EAAAlK,GAAAiK,EAAAjK,GAAA,EAAAkK,EAAAlK,GAAAiK,EAAAjK,IAAA,EAAA,IACtBA,EAAAA,gBAAI6J,QAAAF,EAAeI,OAEnB7J,OAAAA,IAHsB0J,EAAA5G,QAAAf,KAM7B+B,IAAAjD,OAAA2F,KAAA,cACDvC,QAAA,SAAAgG,GAA0BR,EAAAxJ,gBAAA,IAA1B,IAAA2J,KAAAK,EACAR,EAAAxJ,aAAKK,MAbCR,GAAAmK,EAAAL,GAAA,GAeHpJ,KAAAyJ,EAAAL,GAAA,KAGP9F,EAAQjD,aAARqJ,KAAA,SAAAF,EAAAD,GAAA,OADUC,EAAAlK,GAAAiK,EAAAjK,GAAA,EAAAkK,EAAAlK,GAAAiK,EAAAjK,IAAA,EAAA,KAGNqK,OAAA,KAIQ3J,kBAAAA,WAGRJ,KAAAR,cAAKK,IAAAA,EAAAA,QAALxB,MAAuB2L,IAAA,wBAAArC,KAAA3H,KAAvBH,aACHoK,UAXSxJ,OAAAd,MAAAuK,IAAA7I,KAAA,0BAYV0I,MAAAA,MAEP/J,KAtcwCmK,iBAAA,IAAAC,EAAA1H,QAAArE,MAkdjC2L,IAAK,2BAVbK,KAAAA,KAAAA,gBACIJ,UAAAxJ,OAAAd,MAAAuK,IAAA7I,KAAA,6BACA4H,MAAA,UAQIe,iCAAK,SADmCjK,GAAA,IAAAuK,EAAAtK,KAExC2H,EAAWzH,KAAAA,uBACX+J,KAAAA,MAAAA,OAAWxJ,MACXwI,KAAAA,MAAAA,MAJwCpG,gBAA5C,EAjdqCL,OAAA,EAAAC,EAAAC,SAAA,kCAmejCC,KAAM4F,MAVdE,SAYYlD,OAAQ,WACJ+E,EAAKC,qBAALD,EAAgCvK,IAThDyK,MAAAA,WAAoD/J,OAAAd,MAAAqC,SAEhD6G,iBAAapI,WAEToC,OAAAA,UAAgBiG,eADJH,SACZ9F,WADYyH,EAAA5K,IAEZ8C,SAAO,OAKFpB,EAAA,yBAHIqJ,KAAA,QAAA,WAIL7H,EAAAA,mBAAOtD,OAAA,eAEN8B,EAAA,0BAAAqJ,KAAA,QAAA,WANIrJ,EAAA,mBAJG9B,OAAA,iBAcRmB,KAAAA,oBACImI,EAAAA,wBAAS,UADkD5I,KAAA0K,aAA/D3K,GAdQqB,EAAA,qBAAhBuJ,OAAA,SAAAzI,GAgC+B,2BAAvBA,EAAM8G,OAAOC,OAZnBlJ,EAAA6K,wBAA8B,UAC5BxJ,EAAEsJ,aAAA3K,GADNqB,EAAA,2BAAAY,OAGEZ,EAAA,8BAA+BY,OAC7BZ,EAAE,yBAAFU,QADJ,yBAAAI,EAAA8G,OAAAC,QAgBQ7H,EAAE,yBAAyBY,OAZnCZ,EAAKiJ,2BAALvI,OACA/B,EAAAA,8BAAkC+B,OAClC/B,EAAK2K,wBAAL,QAcQJ,EAAKI,aAAa3K,OAFlBqB,aAAAA,SAAErB,GACFA,KAAAA,QAAAA,EAAAA,OAAQ6K,KAAAA,QAAAA,GACR,IAAA5B,EAAAjJ,EAAK2K,QAAL,UACHE,EAAA5K,KAAAD,QAAA6K,wBACJ5K,KAdDV,OAAA,IAAA4D,EAAAR,QAAAmI,OAeH7K,KA9gBwCV,OAAAoE,IAAA1D,KAAAV,OAAAqE,QA8gBxC,WA9gBwCqF,EA8gBxC,0BA9gBwC4B,EA4hBrC5K,KAAKV,OAAOoG,OAZhB7B,QAAA,SAAAO,EAAAC,GAcYjD,EAAE,mBAAmB9B,OAAO,WAC5B8B,EAAE,mBAAmB9B,QACjBwL,MACInD,KAAMvD,GAX1BsG,SAAc,QAAA,YACL3K,OACDiJ,QACA4B,KAAAA,iBAEQlH,MACAgC,KAAM,gBAGVtE,UACI0J,aAAM,MAINC,MAAAA,SAAAA,EAAAA,QACY,IAAR9H,EAAQsB,aACE,SAANyG,EAAAA,aAAMC,SADFnH,EAAApB,QADLwI,QAAA7G,EAAAE,aAAAC,SAKCwG,EAAAA,QAAAA,MAAM3G,EAAAE,aAAAC,SAGd2G,EAAAA,QAAAA,MAAU,0BAWTC,uBAAA,WACJ,IAAAC,EAAMrL,KAAAL,MAAAuK,IAAA7I,KAAA,sBAAAiK,GAAA,YACHC,EAAAvL,KAAAL,MAAAuK,IAAA7I,KAAW8C,kBAAMmH,GAAA,YACpBE,EAAAxL,KAAAL,MAAAuK,IAAA7I,KAAA,sBAAAiK,GAAA,YACJG,EAAAzL,KAAAL,MAAAuK,IAAA7I,KAAA,mBAAAiK,GAAA,YA/BaI,EAAlB1L,KAAAL,MAAAuK,IAAA7I,KAAA,cAAAiK,GAAA,YA5hBqCK,EAAA3L,KAAAmK,iBAAAlB,QA2kBjC2C,EAAQ5L,KAAKR,cAAcyJ,QAZnC4C,EAAAzK,EAAA,yBAAAuD,MAcQmH,KACJ,GAAKD,EAEE,CAZXT,KAAAA,MAAAA,cAAwB,UAEpB,IAAIG,IAAAA,GADJM,EAAIR,EAAAA,MAAgB,OACJ5H,OAAWyG,EAAI7I,GAAK,EAAAkF,IAAA,CAChCiF,IAAAA,EAAAA,EAAoB7L,GAAAA,OACEA,IAAtB8L,EAAAA,QACAC,EAAAA,KAAAA,GAGJ1L,KAAI6L,sBACAC,OAAAA,EAAJrI,OACIsI,OAAQ,oBAEX/L,KAFDgM,2BAGIH,MAAKlM,EACLkM,cAActI,EACdgI,UAAShF,EACLiF,aAAIS,EACJR,eAAYhI,EACRqI,OAAAA,aACHH,UAAAA,EACJD,oBAAAA,EACDE,MAAK3E,SAVLnD,EAAApB,QAAWwJ,KAAK,iDAoBZlF,qBAAAA,SAAQjH,GACR4L,IAAAA,EACAD,OAAAA,EAAAA,QACAE,IAAAA,kBAT2BvJ,EAA/BrC,KAAAmM,oCAWHnM,KAAAL,MAAAuK,IAAA7I,KAAA,eAAAC,KAxmBoCe,GAunBrB+J,YAAapM,KAAKD,QAAQqM,eAGlC,MACJ,IAAK,oBACD/J,EAAWrC,KAAKqM,mCAZ5BpF,KAAAA,MAAAA,IAAsB5F,KAAA,eAAAC,KAAAe,KACdA,MACJ,IAAA,aACIA,EAAKrC,KAAAsM,uCACDjK,KAAAA,MAAAA,IAAWhB,KAAK8K,eAAAA,KAAAA,GAAAA,aAAhBpM,EAAAkG,gBACA,MAEQmG,QADK3L,OADb8L,KAAApI,MAAA,0BAAA,YAUJnE,KAAAoH,SAAK,EACD/E,KAAAA,aAAAA,IAAWtC,EAAKuM,OAChBtM,KAAAD,QAAAZ,mBAAoBC,aAAekC,EAAKe,OACxCrC,KAAAD,QAAAZ,mBAAAE,cAAA,GAWRkL,qBAAapL,SAAAA,EAAAA,GAChB,IA9oBwCqN,EAAApL,EAAA,mBA0pBhC9B,SAVTmN,cAAA,GAaQC,EAAiBzM,EAAE0M,OAAOH,EAAW,SAAAI,GAAA,OAA+B,GAAvBA,EAAKC,MAAMC,WACxDzB,EAAgBrL,KAAKL,MAAMuK,IAAI7I,KAAK,sBAAsBiK,GAAG,YAC7DC,EAAYvL,KAAKL,MAAMuK,IAAI7I,KAAK,kBAAkBiK,GAAG,YACrDE,EAAexL,KAAKL,MAAMuK,IAAI7I,KAAK,sBAAsBiK,GAAG,YAC5DG,EAAiBzL,KAAKL,MAAMuK,IAAI7I,KAAK,mBAAmBiK,GAAG,YAC3DK,EAAY3L,KAAKmK,iBAAiBlB,QAV1CsB,EAAAA,KAAAA,cAAsBtB,QAClByC,EAAkB1L,KAAAL,MAAAuK,IACb5K,KAAAA,cACAmN,GAAa,YAClBM,EAAAL,EAAA,GAAAjI,KACAoH,KAAyC,GAAAa,EAAQE,OAAWE,EAAnBhJ,EAAApB,QAAzCwJ,KAAA,uCACA,CACAlM,KAAIuL,MAAAA,cAAiB5L,UACrB,IAAI6L,IAAAA,EAAAA,EAAoB7L,OAAU0B,EAAKkF,GAAA,EAAAA,SACEyG,IAArCvB,EAAiBlF,GAAK5G,QAAMuK,WAC5ByB,EAAAA,KAAYe,EAAKvC,GAAL8C,QAAhBC,WAOC,GAJDlN,KAAI+M,sBACAlB,OAAQA,EAAZpI,OACIiJ,OAAAA,oBAEG,WAFPK,EAEO,CACHI,EAAWvH,EAAcoB,OAAzB,UACAhH,KAAKgM,2BACDH,MAAIa,EACAb,cAAWa,EACdnB,UAAAA,EACJC,aAAAA,EACDC,eAAKxE,EACDxD,OAAQoI,EACRE,UAAQJ,EAFZC,MAAAA,EAIImB,oBAAmBrB,SAEnB,GAAKM,SAALe,EAAA,CACIlB,IAAAA,EAD2B9L,EAAAiH,OAC3B6E,QACAR,KAAAA,gCACAE,MAAAA,EACAC,UAAAA,EACAC,MAAAA,EACAzE,UAAAA,EACA2E,aAAAA,EACAC,eAR2BH,EAS3BC,OAAAA,EAT2BA,oBAA/BA,OAgBIE,+BAHgC,SAAA5F,GAAA,IAAAoH,EAAApN,KAIhCuL,IAAWA,EAAAA,QAJqB8B,iBAKhC7B,GAAAA,IAEAxE,OACA0E,QAAAA,SAAAA,GARgC,IAAA4B,EAApCF,EAAAG,0BAUHH,EAAA7N,UAAAoC,IAAAqE,GAAAwH,KAAAC,SAAAC,IACJN,EAAAzN,MAAAuK,IAAA7I,KAAA,qCAAAC,KA9sBoCgM,GA2tBrBI,iBAAkBA,EAAiBrI,OAAOsI,aAGlDP,EAAKzN,MAAMuK,IAAI7I,KAAK,8BAA8BoJ,KAAK,QAAS,WAZpEiD,EAAAA,qDAAyCL,KAAgB,WAAA,KAA7DD,EAAAzN,MAAAuK,IAAA7I,KAAA,gCAAAoJ,KAAA,QAAA,WAGAiD,EAAAA,qDAAuBE,KAAA,WAAA,MAGfzJ,MAAA,SAAAC,EAAK7E,QACe,IAAfI,EAAL4E,aAEQmJ,EAAAA,QAAAA,MAAAA,EAAkBA,aAAiBrI,SAG3CvB,EAAApB,QAAK/C,MAAU0B,0BASXwM,0BAAA,WACH,IAAAC,EAAM9N,KAAAL,MAAAuK,IAAA7I,KAAA,qCAAAA,KAAA,YACH0M,KACHC,KACJC,KAtBkB,GAAAH,EAAvBrK,OAAA,EArtBqCK,EAAApB,QAAAwJ,KAAA,4CAyvB9B,CAVXlM,KAAAL,MAAAiG,cAAA,OAYQkI,EAAa7F,KAAK,WACd,IAAIiG,EAAM9M,EAAEpB,MAVxB6N,QAAAA,MACQC,KAAAA,MACAC,GAAAA,EAAAA,CACAC,IAAAA,EAAAA,EAAqBhO,MACrBiO,QAAJ,MACIH,KAAarK,QACbsK,EAAAlH,KAAgBqH,GACbF,EAAAnH,KAAAsH,MAGC,IAAA,IAAA5H,EAAI2H,EACCE,OADK,EAELzG,GAAK,EAFVpB,IAAA,CAGA,IAAA8H,EAASN,EAAAxH,GACL+H,EAAIH,IAAAA,EAAAA,QACSI,KAEbR,EAAAA,IAAAA,OAAiBlH,KAAjBkH,eAAA/N,KAAAD,QAAAL,GAAAqO,YACmBlH,eAAnBmH,EAAAA,GACHM,EAAAd,KAAAgB,aAAAH,IAELC,EAAaP,KAAAA,YAAiBtK,IAE1BwK,EAAIK,KAAAA,GAEJtO,KAAAiH,sBACIqH,OAAAA,EAAYd,OACfzB,OAFD,oBAIC/L,KAAAyO,oBAAAR,KAiBb5G,8BAA+B,SAASqH,EAAkBzI,GAAc,IAAA0I,EAAA3O,KANxE4O,EAAAF,EAAAG,MAQI,QAA0B,IAAfD,EAeSE,OAdsC,IAAlD9O,KAAKD,QAAQZ,mBAAmBE,cAChCyE,EAAApB,QAAWmB,QAAQ,6EAA8E,IAC7FkL,QAAS,WACLD,OAAOE,SAAWvO,OAAO2F,QAG1BpG,KAAKD,QAAQZ,mBAAmBE,gBAAkBW,KAAKD,QAAQZ,mBAAmBC,aAR7FwP,EAAAA,QAAAA,MAAcF,kEACPE,KAAAA,QAAPzP,mBAAmCE,cAAAW,KAAAD,QAAAZ,mBAAAC,cACnC0E,EAAApB,QAAS3C,QACL,gGACIgP,IAECA,QAAA,WAHLD,OAAAE,SAAAvO,OAAA2F,QAYQ2I,OAAAA,MAAAA,QACID,EALZ1N,EAAA6N,KASHL,EAAAhL,MACDnD,QAAOd,EAAPoH,QACAC,OAAO4H,EAAP5H,UAGA5B,KADJ,WASQuJ,EAAKO,iBAFb5J,EACKF,8BAAWsJ,EAAAzI,KAERkJ,KAAA,WAEHA,EAAKpP,QAAAZ,mBAAME,eAAA,EACRsP,EAAAO,iBACAP,EAAAtH,8BAAAqH,EAAAzI,MAWZmJ,+BAAgC,SAASrP,GAAS,IAAAsP,EAAArP,KAAlDoP,EAAAA,EAAAA,MAAgCP,MAAkB,QAAA,IAAAD,EAMzC,OAHqD,IAAlD5O,KAAKD,QAAQZ,mBAAmBE,eAFpCuP,EAAAA,QAAAA,QAAc7O,mDACdU,OAAOmO,MAAAA,QAEH9K,EAAApB,QAAAyB,MAAA,sBADJ,EAKC/C,EAAA6N,KACD7N,EAAAkO,KACH7O,OAAA2F,KADG,4CACHpG,KAAAN,GADG,WAEA4F,EAAY2J,OAFZ,SAcML,EAdN,cAckB7O,EAAA4L,UAdlB,cAckB5L,EAAAwL,UAdlB,iBAeIxL,EAAKmP,aAfT,mBAgBSE,EAAAA,eAhBT,UAgBIrP,EAAA6L,MAhBJ,wBAkBM7L,EAAA2L,sBA72B2BtG,KAAA,SAAAf,GA02B7BgL,EAAKH,iBAUjBG,EAAAD,+BAAArP,KAPSoP,KAAK,WACFE,EAAKtP,QAAQZ,mBAAmBE,eAAiB,EACjDgQ,EAAKH,iBACLG,EAAKD,+BAA+BrP,MAuBvCiM,0BAAM,SAAAjM,GAAA,IAAAwP,EAAAvP,KAEH4O,EAAA7O,EAAA8L,MAAW1H,MACd,QAAA,IAAAyK,EAoBG,OAnBJ,IAAA5O,KAAAD,QAAAZ,mBAAAE,eACHyE,EAAApB,QAAAmB,QAAA,yEACGyB,OAAAA,MAAY2J,QAcRnL,EAAApB,QAAKsJ,MAAAA,sBAGL,EAEA5K,EAAK4K,KACR5K,EATLkO,KAx5BqC7O,OAAA2F,KAi6BhC,4CAj6BgCpG,KAAAN,GAi6BhC,WAjBOK,EAAQiH,OAiBf,SAGT4H,EAHS,kBAGT7O,EAAAsL,cAHS,cAfOtL,EAAQwL,UAef,mBAdsBxL,EAAQ0L,eAc9B,iBAd6D1L,EAAQyL,aAcrE,cAbOzL,EAAQ4L,UAaf,UAZa5L,EAAQ6L,MAYrB,wBAZkD7L,EAAQ2L,sBAqB/DtG,KAAKoK,SAAAA,GACDZ,EAAAA,iBACAW,EAAAvD,0BAAsBjM,KAElBoP,KAAA,WACHI,EAFDxP,QAEWZ,mBAAaA,eAAmBE,EACvCkQ,EAAAL,iBACHK,EAFMvD,0BAEiB7M,MARhCsP,oBAAqB,SAASgB,GAAU,IAAAC,EAAA1P,KAoBpCsF,KAAAA,WACU,IAAApC,EAAAR,QAASiN,OACXlP,IAAAA,EAAOsD,EAAUC,MACjB,QAAKkL,IAALN,EAUZ,OATY,IAAA5O,KAAAD,QAAK0O,mBAAoBgB,cAE5BN,EAAAA,QAAKtL,QAAM,sDACR7D,KAAKD,QAAQZ,mBAAmBE,gBAAhCW,KAAAD,QAAAZ,mBAAAC,aACA0E,EAAApB,QAAKwM,MAAAA,gEACLlP,KAAKyO,QAAAA,mBAALpP,cAAAW,KAAAD,QAAAZ,mBAAAC,cATR0E,EAAApB,QAAAwI,QAAA,yDATIzK,OAAOd,MAAMqC,OAsBrBhC,KAAAwP,WAnBkBpO,EAAE6N,KACZL,EAAYhL,MACRgM,YAAahB,EAAYjN,IAAI,kBAwBrCyD,KAAIyK,SAAAA,GACApP,OAAOoP,UAAAA,eAAmB5L,WAAaC,IAAAE,GACvCsL,EAAIR,iBACAQ,EAAAjB,oBAAW5K,KAEXsL,KAAA,WAGHO,EAJM3P,QAIIZ,mBAAaA,eAAmBE,EACvCqQ,EAAAR,iBAGHQ,EAAAjB,oBAAAgB,MAWOK,uBAAIC,SAAAA,GAAJ,IAAAC,EAAAhQ,KACAA,KAAAiQ,cAASxL,IAALvB,EAAAR,QAA0BwN,OAC1BH,IAAAA,EAAAA,EAAmBlB,MACtB,QAAepK,IAAfoL,EAcR,OAbgDtB,IAArCwB,KAAAA,QAAAA,mBAAmB1Q,cACtByE,EAAApB,QAAMmB,QAAA,gCACHpD,KAAAA,QAAY0D,mBAAM9E,gBAAAW,KAAoCD,QAAAZ,mBAAtDC,aACAqB,EAAAA,QAAAA,MACH,mGAEJT,KAAAD,QAAAZ,mBAAAE,cAAAW,KAAAD,QAAAZ,mBAAAC,cACD0E,EAAApB,QAAKoN,QAEH,6FAGFrP,OAAAd,MAAKmQ,OAvBb9P,KAAAiQ,cAAAJ,EA2BJM,UAzBS/K,KAAK,SAAA8K,GA8BNzP,GA7BIA,OAAOsD,UAAUC,eAAeC,WAAWmE,OAAOyH,EAAenQ,IA2B7E0Q,EAAAA,iBAEQ3P,OAAOsD,UAAUC,eAAeqM,QAAYC,gBAAA,CACxCA,IAAAA,EAAiB,KADrB,WAAAJ,EAAAzL,MAAA,kBAAAyL,EAAAK,YAGGR,EAAA,IAAA7M,EAAAR,QAAAS,cAAA+M,GACclM,SAAVD,EAAUC,MAA2B,mBAAZqM,EAAYE,YACxCD,EAAiB,IAAApN,EAAAR,QAAA6L,KAAA2B,IAExBzP,OAAA8L,KAAApI,MAAA,mCAAA,YAxgCoC1D,OAAA8L,KAAApI,MAAA+L,EAAAzL,MAAAyL,EAAAK,YAAA,aA2gCzC9P,OAAAsD,UAAAC,eAAAC,WAAAC,IAAA6L,GAxBYC,EAAKF,uBAAuBU,KA4BpCrB,KAAI3I,WACAM,EAAAA,QAAa3H,mBAAjBE,eAAA,EACI2F,EAAAA,iBACAA,EAAAA,uBAAJwL,MAOQhO,oBAAAA,SAAON,GACPS,EAAAA,OAAAA,QACA8F,OAAAA,UAASzE,eAAAqM,aACLzN,iBAAO,IADFnC,OAAAsD,UAAAC,eAAAqM,aAJGC,iBAAhB,KAmBYxJ,oBAAAA,WACH,IAAAN,KACGA,KACHxB,EAAAhF,KAAAiF,kBACJ,GAAA,IAAAD,EAAAvB,OACJK,EAAApB,QAXDwJ,KAAA,uDAYA,CACA,IAAA7J,EAAIoO,KAAAA,mCACJzQ,KAAAL,MAAK+Q,OAAAA,MACL1Q,KAAAL,MAAKyH,MA3BDvE,gBAAgB,EA6BpBL,OAAA,EAAAC,EAAAC,SAAA,2BACAC,KAAI6N,MACJ/H,SACI7F,MAAI+N,WACAjR,OAAI8G,MAAAA,WAKRxG,KAAAD,QAAIkD,mBAAa7D,aAAA,EACbM,KAAAA,QAAAA,mBAAIL,cAAA,EADyC2F,EAAjDiD,KAAA,WAGAuI,IAAAA,EAAAA,EAAAA,MACHpC,QAAA,MA3BQzG,KAAK,WA6BDxI,IAAbyR,IACA,KAAAA,EAAAC,UAAA,EAAA,GACKf,EAAAA,KAAAA,GAtkC4BtJ,EAAAK,KAAA+J,MA2kCrC,IAAIE,EAAJtK,EAAA/C,OAAAqD,EAAArD,OACAzD,KAAIS,aAAA,IAAiBsQ,EACjBD,KAAAA,SAAUrQ,EAINf,IAAAA,IADJoR,KACIpR,EAAI8G,EAAawK,OAAAA,EAAAA,GAAAA,EAAAA,IAAAA,CADmB,IAAxCL,EAAA,IAAAzN,EAAAR,QAAA6L,MAGAuC,GAAQpL,EAAMa,KAENiK,EAAKS,KAAAA,GAET9M,IAAAA,IAAAA,EAAAA,EAAOV,OAASW,EAATmC,GAAgBlC,EAAAA,IAAU,CAC7B,IAAApB,EAAI,IAAAC,EAAAR,QAAgB6B,eAChB7E,GAAAoH,EAAAP,KAEAiK,EAAA3J,KAAA5D,GAREjD,KAAdD,QAAAZ,mBAAAC,aAAAqR,EAnlCiCzQ,KAAA8P,uBAAAU,KAomCrCU,YAAKvR,WAAQc,IAAAA,EAAAA,KACbqQ,EAAA,KAAgB,OACZjO,OAAAA,UAAAA,iBACAL,EAAAA,OAAOuB,UAAAgN,gBAAG9M,WAAAtC,IAFE3B,KAAAD,QAAAiR,mBAGZrO,KAAAA,iBAAiBmO,KAEblO,EAAAA,IAAAA,EAAAA,QAAauO,SACT1Q,GAAAA,KAAAA,QAAOd,qBAFN+F,OAJb7B,QAAA,WArmCqCuN,EAAAH,iBAAAH,IAinCzCO,MAAAA,SAAiBjN,EAAAC,QACb,IAAgB2C,EAAhBzC,aACST,EAAApB,QAALyB,MAAAE,EAAAE,aAAAC,SAEIV,EAAApB,QAAAyB,MAAA,0BAOA8M,iBAAA,SAAK/H,GACL,IAAA7G,EAAArC,KAAAsR,yBACJtR,KAAAL,MAAKc,OAAAd,MACDK,KAAAL,MAAAmC,MACIkF,gBAAAA,EADkCxE,OAAA,EAAAC,EAAAC,SAAtC,oBAGAC,KAAAN,GAAAyO,QAAAA,EAAA/Q,QAAAC,KAAAD,UACJ0I,SACIhI,MAAAA,WACAA,OAAAd,MAAAqC,YApBZqP,gBAAiB,SAAStR,GACtB,OAAQA,EAAQiH,QA2BpBuK,IAAAA,UACMxM,KAAAA,2BACEyM,MAIJ,IAAIA,YACA/Q,KAAAA,kCACI+Q,OAAAA,cAEJ/Q,MACIf,IAAAA,OACA6B,KAAAA,2BAFmC,MAI1C,IAAA,UA3pCoCvB,KAAAwK,kCAgoCzBxD,OAAQ,YA+BpB,MA/pCqC,QAooC7BvG,OAAOsD,UAAU+E,eAAe2I,OA8B5CnL,EAAAA,QAAkBnC,MAAA,4BAUNqC,mBAAAA,SAAYK,GACfhC,EAAAE,iBACJ,IAAAyM,EATDE,OAUA,8CA/qCqCjR,OAAAsD,UAAA4N,YAAAhQ,IAAA,qBAkrCnB,MAAtBiQ,GAAsBJ,GAAS3M,SAAG2M,KAAA/Q,OAAAsD,UAAA4N,YAAAnE,KA7BtBgE,iBAAkBhQ,SAASgQ,KA+BnC/Q,OAAI4F,UAAAA,eAAqBC,QACrBjE,GAAAA,KAAAA,QAAgBwP,GACpBtQ,UAAad,MAKTgI,gBAAAA,WACIqJ,OAAAA,EAAAA,qBAAUzQ,KAAA,aAGVuB,iBAAAA,WACInC,IAAAA,KACH+F,KAST,OAfaxG,KAAAiF,kBAAAgD,KAAA,WAJG,IAAhB2I,EAAAxP,EAAApB,MAaK+R,QAAAA,MACAC,KAAAA,MArsCgC,KAAApB,EAAAC,UAAA,EAAA,GA0qC7B/J,EAAWD,KAAK+J,GA8BYpK,EAAAK,KAAA+J,MAE/BqB,WAAAA,EAALzL,YAAkCA,IAG9BmB,qBACMjI,SAAFmF,GAAczE,IAAAA,EAAAA,KAIlB6I,EAAAA,iBACAiJ,IAAAA,EAAUlS,KAAAsG,mBACNjE,EAAArC,KAAKmS,gCACRnS,KAAAL,MAAAc,OAAAd,MAX6CK,KAApBL,MAA9BmC,MA1sCqCe,gBAAA,EAyrCjCL,MAAO,0CAgCfwP,KAAAA,GAAAA,kBAA0B3L,EAAAG,YAAW/C,SAAAgF,SA7BzBqJ,SAAU,WA8BdxM,EAAAA,qBAAeH,EAAnBqB,cAEI5D,MAAIwP,WACJ3R,OAAS8F,MAAIvE,WACehC,KAAA+R,8BAI3B/R,KAAAgS,4BAGG/H,4BAAW,WAAA,IAAAoI,EAAArS,KACX2H,KAAAA,eAAMyK,OACNnJ,KAAAA,uBAAOmJ,IAAAA,EAAAA,QAAmB1S,MAJuBsK,IAApB,iCAMpCC,UAdDjK,KAAAL,MAAAuK,IAAA7I,KAAA,mCA3tCqCsG,OA8sC3BjI,GAAI,OAAQU,KAAM,SA8BhCV,GAAA,SAAAU,KAAA,WACA+R,GAAAA,cAAsB/R,KAAA,kBA7uCmB6I,MAAA,OAmtCjCiJ,SAAU,SAAAI,GA8BlBC,EAAAA,qBAAsBD,OAGlBN,yBAAIQ,WAAoB,IAAAC,EAAAzS,KACfA,KAAIuG,qBACLnB,KAAA,WAEAsN,IAAAA,IADAN,KACAM,EAAAA,EAAAA,UAAAjP,OAAqB4C,EAAAA,GAArB,EAAAE,IACAmM,EAAAA,SACAA,GAAAA,EAAAA,UAAgBC,OAAUhC,GAAAA,GAC1B+B,KAAAA,EAAAA,UAAArN,OAAwBsL,GAAAA,IAAA,UAG/B8B,EAVDG,0BAU+B,IAAAxI,EAAA1H,QAAUrE,MACrCwU,IAAAA,oCAGH5I,UAAAwI,EAAA9S,MAAAuK,IAAA7I,KAAA,sCACGwE,KAAAA,EACAA,MAAAA,EAAJ,GAA6BnG,QAQpByS,qBAPL,SAAAG,GAQHtS,KATDsS,eASOA,GAGHC,qBAAKO,SAAAA,GAAiBD,IAAAA,EAAAA,KACzBA,KAjxCoCL,EAAAxS,KAAAL,MAAAyB,EAAA,+BAAAuD,MAovCrC,GAAwB,cAApB6N,EAgCRM,IAAAA,IAAAA,EAAAA,EAAkBrP,OAAA,EAAA8C,GAASsM,EAAAA,IAAAA,CAA+C,IAAAH,KA7B1D/B,EAAUlQ,OAAOsD,UAAUC,eAAe+O,iBAAiBpR,IAAI,UAAUA,IAAI0E,EAAcE,IA8BnGyM,EAAAA,GAAAA,EAAAA,GACAC,EAAAA,KAAJtC,EAAAhP,IAAA,QACIuR,EAAAA,QAAJvC,EAAAhP,IAAA,WACI+Q,EAAKJ,MAAmB3B,EAAQhP,IAAA,SAChCsR,EAAgBpM,KAAA6L,OAEDS,WAAXA,IAAwBN,EAAY,IAAAzU,SAAAgV,WAChC1T,OAAAA,UAAI2T,eAD4BN,iBAAApR,IAAA,UAAA2R,OAAA7O,KAAA,UAEhCC,UAFgC,IAAAmB,EAAZ7F,KAAAL,MAAAyB,EAAA,4BAAAuD,MAAA,GAAxB,KAAwBkB,EAKxB7F,KAAAmG,iBAAON,GANXT,KAAA,SAAAW,GAQAjC,EAAApB,QAAAmB,QAAA,mBAKG0P,EAAIT,iBAAAD,EAAkC9M,EAAArG,GAAAqG,EAAArB,QAEzCwO,KAAAA,SAAAA,EAAAA,EAAa/O,GACTgP,EAAAA,QAAWhP,MACLO,4BAIT,CACD,IAAA8O,EAAAxT,KAAA4S,0BAAaa,QATVC,EAcSpB,KAALM,0BAAuCxS,OAC9CJ,KAAA8S,iBAAeD,EAAwBW,EAAAE,KAGnCC,iBAAAA,SAAKd,EAAA7M,EAAAC,GAAA,IAAA2N,EAAA5T,KAH0CgT,EAAAA,0BAAZ/M,EAAAgN,OAAAA,EAKvCC,OAAAA,EACIW,GAAW7N,SAAX6N,KAAAA,eACArR,EAAOwQ,EAAAA,QAF2Cc,sBAGlDC,EAAAA,SAAAA,EAAAA,EAAAA,GAMJC,OATsDb,EAAtDA,EAAAc,IAAA,SAAAZ,GAAA,OAKH3T,GAAA2T,EAAA3T,GAh0CoCgF,KAAA2O,EAAA3O,KA8xCzBiP,IAAK,UAsCNC,EAAIM,WAAAf,EAAWgB,EAAAA,eAAAA,EAAyBC,EAAApO,IAE/CqO,EAAAA,QAAAA,uBACArO,GACAtB,WAJ+CwO,EAAA1Q,MAAAwQ,EAAAe,wBAAA,GAK/CO,QALJ,GAAA,WAAAtU,KAAAsS,eAQAW,EAAOsB,EAAA7R,QAAP8R,sBA50CqCtB,EAAA,SAAAC,EAAAzO,EAAA0P,GAm1C7B,OAzCAjB,IAqCZ9S,KAAiB,UAAAsT,IAAA,OAAWjU,GAAAyT,EAAA,GAAAzT,KACf2C,KAAAA,UACLsR,IAAA,OAAAjU,GAAAyT,EAAA,GAAAzT,KAEIkU,EAAAM,WAAAf,EAAAS,EAFJtB,eAAA5N,EAAA0P,EAAApO,IAIIyO,EAAA/R,QAAA+Q,uBAGAZ,GACAK,WAAAA,EAAA1Q,MAAAwQ,EAAAe,wBARJ,GASId,QAMA,GAAA,gBAAAjT,KAAAsS,eAAA,CACA,IAAAa,EAAAN,EAAAoB,IAAA,SAAAZ,GAAA,OAGA3T,GAAA2T,EAAA3T,GACAgF,KAAA2O,EAAA3O,KA2BAiP,IAAA,UAUAe,EAAAhS,QAAAiS,6BAAAxB,GACAU,UAAA7N,EAUAxD,MAAAwQ,EACAe,wBAAA,MAmBAG,WAAA,SAAAU,EAAAtC,EAAA5N,EAAA0P,EAAApO,EAAAjG,GA7FR,OA8FQ,IACA8U,EAAAnS,QA1FJyR,0BA2FIW,qBAAA,qBACAT,gBAAA/B,EACAtM,WAAAA,EACAtB,KAAAA,EACA4P,kBAAAF,IAAA,EACAW,oBAjGRH,IAJYhR,KAAK7D,IAyKpBM,gBAr/CwC,WAg1CrC,OAAOJ,EAAEoC,UAh1C4B,wCAogDzC6C,6BACI,yCArgDqC,+CAyhDzCoH,2DAzhDyC,sGA41C7B,UA4MZH,sFACI,WAziDqC,SAujDzCE,yOACI,oFAxjDqC,YAqkDzC2I,0CACI,0GAsCQ,oIACA,4GA7mD6B,YA02C7B,yCAuRZ5L,yEACI,6DAloDqC,gFA82C7B,UA6TZZ,qDACI,4BAOQ,+CAnrD6B,wDAm3C7B,mFA4UZ+E,UACI,qDAhsDqC,kEAu3C7B,UA0XZpM,UACI,QAKQ,SAOA,iBA9vD6B,oNA63C7B,mEAyZZ0Q,OACI,UAIQ,uCAcA,gIACA,0EAgBA,YACA,yCASX,0FAp0DL,sGAw4CgB,QACA,SAEA,mFACA,yHACA,wEACA,YACA,yCACA,kEACA,kEACA,+DACA,QACA,SAEA,yMACA,2CACA,YAEA,0GACA,8FACA,gDACA,8CACA,aACA,YACA,OACA,UAEA,sGACA,sGACA,0CACA,gBACA,YACA,UAEA,SACA,UAEA,oCAEA,oDAEA,UACFoD,KAAK,MAIf3D,uBAAwB,WACpB,OAAOrR,EAAEoC,UAED,QACA,6CACA,UACA,uCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,6CACA,OACA,oBACA,0CACA,QACA,UACA,uDACA,OACA,mBACA,2GACA,QACA,UACA,OACA,cACA,oCACA,QACA,WACA,WACA,6CACA,UACA,sCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,OACA,cACA,6BACA,QACA,WACA,WACA,UACF4S,KAAK,MAIf3S,yBAA0B,WACtB,OAAOrC,EAAEoC,UAED,8BACA,SACA,wEACA,4EACA,UACA,UACF4S,KAAK,MAIf/P,+BAAgC,WAC5B,OAAOjF,EAAEoC,UAED,QACA,mCACA,mBACA,sFACA,8CACA,mGACA,YACA,YACA,SACA,mCACA,kBACA,8GACA,SACA,UACF4S,KAAK,MAIf3I,qCAAsC,WAClC,OAAOrM,EAAEoC,UAED,4BACA,2EACA,SACA,yBACA,gJACA,mDACA,SACA,UACF4S,KAAK,MAIf9I,kCAAmC,WAC/B,OAAOlM,EAAEoC,UAED,4BACA,iFACA,SACA,yBACA,gJACA,mDACA,SACA,UACF4S,KAAK,MAIf5I,iCAAkC,WAC9B,OAAOpM,EAAEoC,UAED,4BACA,SACA,yBACA,gJACA,mDACA,SACA,UACF4S,KAAK,MAIfD,qBAAsB,WAClB,OAAO/U,EAAEoC,UAED,gCACA,0JACA,wLACA,mCACA,oFACA,yGACA,WACA,sFACA,uFACA,WACA,SACA,mCACA,kFACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,qGACA,aACA,YACA,qGACA,eACA,YACA,SAEA,4BACA,SACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,OACA,QACA,4CACA,mCACA,wEACA,WACA,SACA,UACF4S,KAAK,MAIf7L,wBAAyB,WACrB,OAAOnJ,EAAEoC,UAED,gCACA,+JACA,sCACA,kCACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,OACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,uKACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,QACA,4CACA,mCACA,wEACA,WACA,SACA,UACF4S,KAAK,MAIfzM,4BAA6B,WACzB,OAAOvI,EAAEoC,UAED,6BACA,QACA,gCACA,8EACA,8CACA,mGACA,YACA,YACA,SACA,QACA,iDACA,SACA,UACF4S,KAAK,MAIf1H,wBAAyB,WACrB,OAAOtN,EAAEoC,UAED,gDACA,QACA,6GACA,aACA,YACA,+GACA,eACA,YACA,SACA,OACA,OACA,0DACA,oDACA,iDACA,yDACA,kEACA,0CACA,+GACA,UACA,6CACA,wFACA,0HACA,WACA,QACA,iBACA,6FACA,2GACA,6CACA,kLACA,UACA,QACA,UACA,iGACA,+GACA,6CACA,wFACA,qGACA,WACA,QACA,UACA,UACA,YACA,SACF4S,KAAK,MAIf9T,kBAAmB,WACf,OAAOlB,EAAEoC,UAED,wCACA,uCACA,gDACA,iGACA,wHACA,iBACA,iGACA,2GACA,UACA,iBACA,kHACA,wHACA,UACA,sBACA,0FACA,QACA,4CACA,2GACA,0HACA,iBACA,yHACA,2IACA,UACA,QACA,SACA,iLACA,UACA,SACA,kCACA,WACF4S,KAAK,MAIfpD,8BAA+B,WAC3B,OAAO5R,EAAEoC,UAED,QAEA,mCACA,2BACA,6BACA,+BACA,+KACA,iCACA,8BACA,UACA,WACA,+BACA,8JACA,WACA,UACA,SAEA,mCACA,2BACA,iDACA,iCACA,OACA,OACA,0GACA,QACA,OACA,yGACA,QACA,OACA,wIACA,QACA,QACA,SAEA,mCACA,0BACA,oDACA,mBACA,2FACA,SACA,UACF4S,KAAK,mBAMf9W,kBAAmBA","file":"../../../scripts/mvc/library/library-foldertoolbar-view.js","sourcesContent":["import _l from \"utils/localization\";\nimport mod_utils from \"utils/utils\";\nimport mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_select from \"mvc/ui/ui-select\";\nimport LIST_CREATOR from \"mvc/collection/list-collection-creator\";\nimport PAIR_CREATOR from \"mvc/collection/pair-collection-creator\";\nimport PAIRED_CREATOR from \"mvc/collection/list-of-pairs-collection-creator\";\nimport HDCA_MODEL from \"mvc/history/hdca-model\";\nimport \"libs/jquery/jstree\";\n\nvar FolderToolbarView = Backbone.View.extend({\n    el: \"#center\",\n\n    events: {\n        \"click .toolbtn-create-folder\": \"createFolderFromModal\",\n        \"click .toolbtn-bulk-import\": \"importToHistoryModal\",\n        \"click .include-deleted-datasets-chk\": \"checkIncludeDeleted\",\n        \"click .toolbtn-bulk-delete\": \"deleteSelectedItems\",\n        \"click .toolbtn-show-locinfo\": \"showLocInfo\",\n        \"click .page-size-prompt\": \"showPageSizePrompt\",\n        \"click .toolbtn-collection-import\": \"showCollectionSelect\"\n    },\n\n    defaults: {\n        can_add_library_item: false,\n        contains_file_or_folder: false,\n        chain_call_control: {\n            total_number: 0,\n            failed_number: 0\n        },\n        disabled_jstree_element: \"folders\"\n    },\n\n    modal: null,\n\n    // directory browsing object\n    jstree: null,\n\n    // user's histories\n    histories: null,\n\n    // genome select\n    select_genome: null,\n\n    // extension select\n    select_extension: null,\n\n    // extension types\n    list_extensions: [],\n\n    // datatype placeholder for extension auto-detection\n    auto: {\n        id: \"auto\",\n        text: \"Auto-detect\",\n        description:\n            \"This system will try to detect the file type automatically.\" +\n            \" If your file is not detected properly as one of the known formats,\" +\n            \" it most likely means that it has some format problems (e.g., different\" +\n            \" number of columns on different rows). You can still coerce the system\" +\n            \" to set your data to the format you think it should be.\" +\n            \" You can also upload compressed files, which will automatically be decompressed.\"\n    },\n\n    // genomes\n    list_genomes: [],\n\n    initialize: function(options) {\n        this.options = _.defaults(options || {}, this.defaults);\n        this.fetchExtAndGenomes();\n        this.render();\n    },\n\n    render: function(options) {\n        this.options = _.extend(this.options, options);\n        var toolbar_template = this.templateToolBar();\n        var template_defaults = {\n            id: this.options.id,\n            is_admin: false,\n            is_anonym: true,\n            mutiple_add_dataset_options: false\n        };\n        if (Galaxy.user) {\n            template_defaults.is_admin = Galaxy.user.isAdmin();\n            template_defaults.is_anonym = Galaxy.user.isAnonymous();\n            if (\n                Galaxy.config.user_library_import_dir !== null ||\n                Galaxy.config.allow_library_path_paste !== false ||\n                Galaxy.config.library_import_dir !== null\n            ) {\n                template_defaults.mutiple_add_dataset_options = true;\n            }\n        }\n        this.$el.html(toolbar_template(template_defaults));\n    },\n\n    /**\n     * Called from FolderListView when needed.\n     * @param  {object} options common options\n     */\n    renderPaginator: function(options) {\n        this.options = _.extend(this.options, options);\n        var paginator_template = this.templatePaginator();\n        $(\"body\")\n            .find(\".folder-paginator\")\n            .html(\n                paginator_template({\n                    id: this.options.id,\n                    show_page: parseInt(this.options.show_page),\n                    page_count: parseInt(this.options.page_count),\n                    total_items_count: this.options.total_items_count,\n                    items_shown: this.options.items_shown,\n                    folder_page_size: Galaxy.libraries.preferences.get(\"folder_page_size\")\n                })\n            );\n    },\n\n    configureElements: function(options) {\n        this.options = _.extend(this.options, options);\n\n        if (this.options.can_add_library_item === true) {\n            $(\".add-library-items\").show();\n        } else {\n            $(\".add-library-items\").hide();\n        }\n        if (this.options.contains_file_or_folder === true) {\n            if (Galaxy.user) {\n                if (!Galaxy.user.isAnonymous()) {\n                    $(\".logged-dataset-manipulation\").show();\n                    $(\".dataset-manipulation\").show();\n                } else {\n                    $(\".dataset-manipulation\").show();\n                    $(\".logged-dataset-manipulation\").hide();\n                }\n            } else {\n                $(\".logged-dataset-manipulation\").hide();\n                $(\".dataset-manipulation\").hide();\n            }\n        } else {\n            $(\".logged-dataset-manipulation\").hide();\n            $(\".dataset-manipulation\").hide();\n        }\n        this.$el.find(\"[data-toggle]\").tooltip();\n    },\n\n    createFolderFromModal: function(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        var template = this.templateNewFolderInModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: _l(\"Create New Folder\"),\n            body: template(),\n            buttons: {\n                Create: () => {\n                    this.createNewFolderEvent();\n                },\n                Close: () => {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n    },\n\n    createNewFolderEvent: function() {\n        var folderDetails = this.serializeNewFolder();\n        if (this.validateNewFolder(folderDetails)) {\n            var folder = new mod_library_model.FolderAsModel();\n            var url_items = Backbone.history.fragment.split(\"/\");\n            var current_folder_id;\n            if (url_items.indexOf(\"page\") > -1) {\n                current_folder_id = url_items[url_items.length - 3];\n            } else {\n                current_folder_id = url_items[url_items.length - 1];\n            }\n            folder.url = folder.urlRoot + current_folder_id;\n\n            folder.save(folderDetails, {\n                success: function(folder) {\n                    Galaxy.modal.hide();\n                    mod_toastr.success(\"Folder created.\");\n                    folder.set({ type: \"folder\" });\n                    Galaxy.libraries.folderListView.collection.add(folder);\n                },\n                error: function(model, response) {\n                    Galaxy.modal.hide();\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                }\n            });\n        } else {\n            mod_toastr.error(\"Folder's name is missing.\");\n        }\n        return false;\n    },\n\n    serializeNewFolder: function() {\n        return {\n            name: $(\"input[name='Name']\").val(),\n            description: $(\"input[name='Description']\").val()\n        };\n    },\n\n    validateNewFolder: function(folderDetails) {\n        return folderDetails.name !== \"\";\n    },\n\n    importToHistoryModal: function(e) {\n        e.preventDefault();\n        var $checkedValues = this.findCheckedRows();\n        var template = this.templateImportIntoHistoryModal();\n        if ($checkedValues.length === 0) {\n            mod_toastr.info(\"You must select some datasets first.\");\n        } else {\n            var promise = this.fetchUserHistories();\n            promise\n                .done(() => {\n                    this.modal = Galaxy.modal;\n                    this.modal.show({\n                        closing_events: true,\n                        title: _l(\"Import into History\"),\n                        body: template({\n                            histories: this.histories.models\n                        }),\n                        buttons: {\n                            Import: () => {\n                                this.importAllIntoHistory();\n                            },\n                            Close: () => {\n                                Galaxy.modal.hide();\n                            }\n                        }\n                    });\n                })\n                .fail((model, response) => {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                });\n        }\n    },\n\n    fetchUserHistories: function() {\n        this.histories = new mod_library_model.GalaxyHistories();\n        var promise = this.histories.fetch();\n        return promise;\n    },\n\n    importAllIntoHistory: function() {\n        this.modal.disableButton(\"Import\");\n        var new_history_name = this.modal.$(\"input[name=history_name]\").val();\n        if (new_history_name !== \"\") {\n            this.createNewHistory(new_history_name)\n                .done(new_history => {\n                    this.processImportToHistory(new_history.id, new_history.name);\n                })\n                .fail((xhr, status, error) => {\n                    mod_toastr.error(\"An error occurred.\");\n                })\n                .always(() => {\n                    this.modal.enableButton(\"Import\");\n                });\n        } else {\n            var history_id = $(\"select[name=import_to_history] option:selected\").val();\n            var history_name = $(\"select[name=import_to_history] option:selected\").text();\n            this.processImportToHistory(history_id, history_name);\n            this.modal.enableButton(\"Import\");\n        }\n    },\n\n    createNewHistory: function(new_history_name) {\n        var promise = $.post(`${Galaxy.root}api/histories`, { name: new_history_name });\n        return promise;\n    },\n\n    processImportToHistory: function(history_id, history_name) {\n        var checked_items = this.findCheckedItems();\n        var items_to_import = [];\n        // prepare the dataset objects to be imported\n        for (let i = checked_items.dataset_ids.length - 1; i >= 0; i--) {\n            var library_dataset_id = checked_items.dataset_ids[i];\n            var historyItem = new mod_library_model.HistoryItem();\n            historyItem.url = `${historyItem.urlRoot + history_id}/contents`;\n            historyItem.content = library_dataset_id;\n            historyItem.source = \"library\";\n            items_to_import.push(historyItem);\n        }\n        // prepare the folder objects to be imported\n        for (let i = checked_items.folder_ids.length - 1; i >= 0; i--) {\n            var library_folder_id = checked_items.folder_ids[i];\n            var historyItem = new mod_library_model.HistoryItem();\n            historyItem.url = `${historyItem.urlRoot + history_id}/contents`;\n            historyItem.content = library_folder_id;\n            historyItem.source = \"library_folder\";\n            items_to_import.push(historyItem);\n        }\n        this.initChainCallControl({\n            length: items_to_import.length,\n            action: \"to_history\",\n            history_name: history_name\n        });\n        // set the used history as current so user will see the last one\n        // that he imported into in the history panel on the 'analysis' page\n        jQuery.getJSON(`${Galaxy.root}history/set_as_current?id=${history_id}`);\n        this.chainCallImportingIntoHistory(items_to_import, history_name);\n    },\n\n    /**\n     * Update progress bar in modal.\n     */\n    updateProgress: function() {\n        this.progress += this.progressStep;\n        $(\".progress-bar-import\").width(`${Math.round(this.progress)}%`);\n        var txt_representation = `${Math.round(this.progress)}% Complete`;\n        $(\".completion_span\").text(txt_representation);\n    },\n\n    /**\n     * Download selected datasets. Called from the router.\n     * @param  {str} format    requested archive format\n     */\n    download: function(format) {\n        var checked_items = this.findCheckedItems();\n        var url = `${Galaxy.root}api/libraries/datasets/download/${format}`;\n        var data = { ld_ids: checked_items.dataset_ids, folder_ids: checked_items.folder_ids };\n        this.processDownload(url, data, \"get\");\n    },\n\n    /**\n     * Create hidden form and submit it through POST\n     * to initialize the download.\n     * @param  {str} url    url to call\n     * @param  {obj} data   data to include in the request\n     * @param  {str} method method of the request\n     */\n    processDownload: function(url, data, method) {\n        if (url && data) {\n            // data can be string of parameters or array/object\n            data = typeof data === \"string\" ? data : $.param(data);\n            // split params into form inputs\n            var inputs = \"\";\n            $.each(data.split(\"&\"), function() {\n                var pair = this.split(\"=\");\n                inputs += `<input type=\"hidden\" name=\"${pair[0]}\" value=\"${pair[1]}\" />`;\n            });\n            // send request\n            $(`<form action=\"${url}\" method=\"${method || \"post\"}\">${inputs}</form>`)\n                .appendTo(\"body\")\n                .submit()\n                .remove();\n            mod_toastr.info(\"Your download will begin soon.\");\n        } else {\n            mod_toastr.error(\"An error occurred.\");\n        }\n    },\n\n    addFilesFromHistoryModal: function() {\n        this.histories = new mod_library_model.GalaxyHistories();\n        this.histories\n            .fetch()\n            .done(() => {\n                this.modal = Galaxy.modal;\n                var template_modal = this.templateAddFilesFromHistory();\n                this.modal.show({\n                    closing_events: true,\n                    title: _l(\"Adding datasets from your history\"),\n                    body: template_modal({\n                        histories: this.histories.models\n                    }),\n                    buttons: {\n                        Add: () => {\n                            this.addAllDatasetsFromHistory();\n                        },\n                        Close: () => {\n                            Galaxy.modal.hide();\n                        }\n                    },\n                    closing_callback: () => {\n                        Galaxy.libraries.library_router.navigate(`folders/${this.id}`, { trigger: true });\n                    }\n                });\n                this.fetchAndDisplayHistoryContents(this.histories.models[0].id);\n                $(\"#dataset_add_bulk\").change(event => {\n                    this.fetchAndDisplayHistoryContents(event.target.value);\n                });\n            })\n            .fail((model, response) => {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(response.responseJSON.err_msg);\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            });\n    },\n\n    /**\n     * Create modal for importing from Galaxy path.\n     */\n    importFilesFromPathModal: function() {\n        this.modal = Galaxy.modal;\n        var template_modal = this.templateImportPathModal();\n        this.modal.show({\n            closing_events: true,\n            title: _l(\"Please enter paths to import\"),\n            body: template_modal({}),\n            buttons: {\n                Import: () => {\n                    this.importFromPathsClicked(this);\n                },\n                Close: () => {\n                    Galaxy.modal.hide();\n                }\n            },\n            closing_callback: () => {\n                //  TODO: should not trigger routes outside of the router\n                Galaxy.libraries.library_router.navigate(`folders/${this.id}`, {\n                    trigger: true\n                });\n            }\n        });\n        this.renderSelectBoxes();\n    },\n\n    /**\n     * Request all extensions and genomes from Galaxy\n     * and save them in sorted arrays.\n     */\n    fetchExtAndGenomes: function() {\n        mod_utils.get({\n            url: `${Galaxy.root}api/datatypes?extension_only=False`,\n            success: datatypes => {\n                this.list_extensions = [];\n                for (let key in datatypes) {\n                    this.list_extensions.push({\n                        id: datatypes[key].extension,\n                        text: datatypes[key].extension,\n                        description: datatypes[key].description,\n                        description_url: datatypes[key].description_url\n                    });\n                }\n                this.list_extensions.sort((a, b) => (a.id > b.id ? 1 : a.id < b.id ? -1 : 0));\n                this.list_extensions.unshift(this.auto);\n            },\n            cache: true\n        });\n        mod_utils.get({\n            url: `${Galaxy.root}api/genomes`,\n            success: genomes => {\n                this.list_genomes = [];\n                for (let key in genomes) {\n                    this.list_genomes.push({\n                        id: genomes[key][1],\n                        text: genomes[key][0]\n                    });\n                }\n                this.list_genomes.sort((a, b) => (a.id > b.id ? 1 : a.id < b.id ? -1 : 0));\n            },\n            cache: true\n        });\n    },\n\n    renderSelectBoxes: function() {\n        // This won't work properly unlesss we already have the data fetched.\n        // See this.fetchExtAndGenomes()\n        this.select_genome = new mod_select.View({\n            css: \"library-genome-select\",\n            data: this.list_genomes,\n            container: Galaxy.modal.$el.find(\"#library_genome_select\"),\n            value: \"?\"\n        });\n        this.select_extension = new mod_select.View({\n            css: \"library-extension-select\",\n            data: this.list_extensions,\n            container: Galaxy.modal.$el.find(\"#library_extension_select\"),\n            value: \"auto\"\n        });\n    },\n\n    /**\n     * Create modal for importing from given directory\n     * on Galaxy. Bind jQuery events.\n     */\n    importFilesFromGalaxyFolderModal: function(options) {\n        var template_modal = this.templateBrowserModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: _l(\"Please select folders or files\"),\n            body: template_modal({}),\n            buttons: {\n                Import: () => {\n                    this.importFromJstreePath(this, options);\n                },\n                Close: () => {\n                    Galaxy.modal.hide();\n                }\n            },\n            closing_callback: () => {\n                //  TODO: should not trigger routes outside of the router\n                Galaxy.libraries.library_router.navigate(`folders/${this.id}`, {\n                    trigger: true\n                });\n            }\n        });\n\n        $(\".libimport-select-all\").bind(\"click\", () => {\n            $(\"#jstree_browser\").jstree(\"check_all\");\n        });\n        $(\".libimport-select-none\").bind(\"click\", () => {\n            $(\"#jstree_browser\").jstree(\"uncheck_all\");\n        });\n\n        this.renderSelectBoxes();\n        options.disabled_jstree_element = \"folders\";\n        this.renderJstree(options);\n\n        $(\"input[type=radio]\").change(event => {\n            if (event.target.value === \"jstree-disable-folders\") {\n                options.disabled_jstree_element = \"folders\";\n                this.renderJstree(options);\n                $(\".jstree-folders-message\").hide();\n                $(\".jstree-preserve-structure\").hide();\n                $(\".jstree-files-message\").show();\n            } else if (event.target.value === \"jstree-disable-files\") {\n                $(\".jstree-files-message\").hide();\n                $(\".jstree-folders-message\").show();\n                $(\".jstree-preserve-structure\").show();\n                options.disabled_jstree_element = \"files\";\n                this.renderJstree(options);\n            }\n        });\n    },\n\n    /**\n     * Fetch the contents of user directory on Galaxy\n     * and render jstree component based on received\n     * data.\n     * @param  {[type]} options [description]\n     */\n    renderJstree: function(options) {\n        this.options = _.extend(this.options, options);\n        var target = options.source || \"userdir\";\n        var disabled_jstree_element = this.options.disabled_jstree_element;\n        this.jstree = new mod_library_model.Jstree();\n        this.jstree.url = `${this.jstree.urlRoot}?target=${target}&format=jstree&disable=${disabled_jstree_element}`;\n        this.jstree.fetch({\n            success: (model, response) => {\n                $(\"#jstree_browser\").jstree(\"destroy\");\n                $(\"#jstree_browser\").jstree({\n                    core: {\n                        data: model\n                    },\n                    plugins: [\"types\", \"checkbox\"],\n                    types: {\n                        folder: {\n                            icon: \"jstree-folder\"\n                        },\n                        file: {\n                            icon: \"jstree-file\"\n                        }\n                    },\n                    checkbox: {\n                        three_state: false\n                    }\n                });\n            },\n            error: (model, response) => {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    if (response.responseJSON.err_code === 404001) {\n                        mod_toastr.warning(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    }\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n     * Take the paths from the textarea, split it, create\n     * a request queue and call a function that starts sending\n     * one by one to be imported on the server.\n     */\n    importFromPathsClicked: function() {\n        var preserve_dirs = this.modal.$el.find(\".preserve-checkbox\").is(\":checked\");\n        var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n        var space_to_tab = this.modal.$el.find(\".spacetab-checkbox\").is(\":checked\");\n        var to_posix_lines = this.modal.$el.find(\".posix-checkbox\").is(\":checked\");\n        var tag_using_filenames = this.modal.$el.find(\".tag-files\").is(\":checked\");\n        var file_type = this.select_extension.value();\n        var dbkey = this.select_genome.value();\n        var paths = $(\"textarea#import_paths\").val();\n        var valid_paths = [];\n        if (!paths) {\n            mod_toastr.info(\"Please enter a path relative to Galaxy root.\");\n        } else {\n            this.modal.disableButton(\"Import\");\n            paths = paths.split(\"\\n\");\n            for (let i = paths.length - 1; i >= 0; i--) {\n                var trimmed = paths[i].trim();\n                if (trimmed.length !== 0) {\n                    valid_paths.push(trimmed);\n                }\n            }\n            this.initChainCallControl({\n                length: valid_paths.length,\n                action: \"adding_datasets\"\n            });\n            this.chainCallImportingFolders({\n                paths: valid_paths,\n                preserve_dirs: preserve_dirs,\n                link_data: link_data,\n                space_to_tab: space_to_tab,\n                to_posix_lines: to_posix_lines,\n                source: \"admin_path\",\n                file_type: file_type,\n                tag_using_filenames: tag_using_filenames,\n                dbkey: dbkey\n            });\n        }\n    },\n\n    /**\n     * Initialize the control of chaining requests\n     * in the current modal.\n     * @param {int} length The number of items in the chain call.\n     */\n    initChainCallControl: function(options) {\n        var template;\n        switch (options.action) {\n            case \"adding_datasets\":\n                template = this.templateAddingDatasetsProgressBar();\n                this.modal.$el.find(\".modal-body\").html(\n                    template({\n                        folder_name: this.options.folder_name\n                    })\n                );\n                break;\n            case \"deleting_datasets\":\n                template = this.templateDeletingItemsProgressBar();\n                this.modal.$el.find(\".modal-body\").html(template());\n                break;\n            case \"to_history\":\n                template = this.templateImportIntoHistoryProgressBar();\n                this.modal.$el.find(\".modal-body\").html(template({ history_name: options.history_name }));\n                break;\n            default:\n                Galaxy.emit.error(\"Wrong action specified.\", \"datalibs\");\n                break;\n        }\n\n        // var progress_bar_tmpl = this.templateAddingDatasetsProgressBar();\n        // this.modal.$el.find( '.modal-body' ).html( progress_bar_tmpl( { folder_name : this.options.folder_name } ) );\n        this.progress = 0;\n        this.progressStep = 100 / options.length;\n        this.options.chain_call_control.total_number = options.length;\n        this.options.chain_call_control.failed_number = 0;\n    },\n\n    /**\n     * Take the selected items from the jstree, create a request queue\n     * and send them one by one to the server for importing into\n     * the current folder.\n     *\n     * jstree.js has to be loaded before\n     * @see renderJstree\n     */\n    importFromJstreePath: function(that, options) {\n        var all_nodes = $(\"#jstree_browser\")\n            .jstree()\n            .get_selected(true);\n        // remove the disabled elements that could have been trigerred with the 'select all'\n        var selected_nodes = _.filter(all_nodes, node => node.state.disabled == false);\n        var preserve_dirs = this.modal.$el.find(\".preserve-checkbox\").is(\":checked\");\n        var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n        var space_to_tab = this.modal.$el.find(\".spacetab-checkbox\").is(\":checked\");\n        var to_posix_lines = this.modal.$el.find(\".posix-checkbox\").is(\":checked\");\n        var file_type = this.select_extension.value();\n        var dbkey = this.select_genome.value();\n        var tag_using_filenames = this.modal.$el.find(\".tag-files\").is(\":checked\");\n        var selection_type = selected_nodes[0].type;\n        var paths = [];\n        if (selected_nodes.length < 1) {\n            mod_toastr.info(\"Please select some items first.\");\n        } else {\n            this.modal.disableButton(\"Import\");\n            for (let i = selected_nodes.length - 1; i >= 0; i--) {\n                if (selected_nodes[i].li_attr.full_path !== undefined) {\n                    paths.push(selected_nodes[i].li_attr.full_path);\n                }\n            }\n            this.initChainCallControl({\n                length: paths.length,\n                action: \"adding_datasets\"\n            });\n            if (selection_type === \"folder\") {\n                var full_source = `${options.source}_folder`;\n                this.chainCallImportingFolders({\n                    paths: paths,\n                    preserve_dirs: preserve_dirs,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: full_source,\n                    file_type: file_type,\n                    dbkey: dbkey,\n                    tag_using_filenames: tag_using_filenames\n                });\n            } else if (selection_type === \"file\") {\n                var full_source = `${options.source}_file`;\n                this.chainCallImportingUserdirFiles({\n                    paths: paths,\n                    file_type: file_type,\n                    dbkey: dbkey,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: full_source,\n                    tag_using_filenames: tag_using_filenames\n                });\n            }\n        }\n    },\n\n    fetchAndDisplayHistoryContents: function(history_id) {\n        var history_contents = new mod_library_model.HistoryContents({\n            id: history_id\n        });\n        history_contents.fetch({\n            success: history_contents => {\n                var history_contents_template = this.templateHistoryContents();\n                this.histories.get(history_id).set({ contents: history_contents });\n                this.modal.$el.find(\".library_selected_history_content\").html(\n                    history_contents_template({\n                        history_contents: history_contents.models.reverse()\n                    })\n                );\n                this.modal.$el.find(\".history-import-select-all\").bind(\"click\", () => {\n                    $(\".library_selected_history_content [type=checkbox]\").prop(\"checked\", true);\n                });\n                this.modal.$el.find(\".history-import-unselect-all\").bind(\"click\", () => {\n                    $(\".library_selected_history_content [type=checkbox]\").prop(\"checked\", false);\n                });\n            },\n            error: (model, response) => {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(response.responseJSON.err_msg);\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n     * Import all selected datasets from history into the current folder.\n     */\n    addAllDatasetsFromHistory: function() {\n        var checked_hdas = this.modal.$el.find(\".library_selected_history_content\").find(\":checked\");\n        var history_item_ids = []; // can be hda or hdca\n        var history_item_types = [];\n        var items_to_add = [];\n        if (checked_hdas.length < 1) {\n            mod_toastr.info(\"You must select some datasets first.\");\n        } else {\n            this.modal.disableButton(\"Add\");\n            checked_hdas.each(function() {\n                var hid = $(this)\n                    .closest(\"li\")\n                    .data(\"id\");\n                if (hid) {\n                    var item_type = $(this)\n                        .closest(\"li\")\n                        .data(\"name\");\n                    history_item_ids.push(hid);\n                    history_item_types.push(item_type);\n                }\n            });\n            for (let i = history_item_ids.length - 1; i >= 0; i--) {\n                var history_item_id = history_item_ids[i];\n                var folder_item = new mod_library_model.Item();\n                folder_item.url = `${Galaxy.root}api/folders/${this.options.id}/contents`;\n                if (history_item_types[i] === \"collection\") {\n                    folder_item.set({ from_hdca_id: history_item_id });\n                } else {\n                    folder_item.set({ from_hda_id: history_item_id });\n                }\n                items_to_add.push(folder_item);\n            }\n            this.initChainCallControl({\n                length: items_to_add.length,\n                action: \"adding_datasets\"\n            });\n            this.chainCallAddingHdas(items_to_add);\n        }\n    },\n\n    /**\n     * Take array of empty history items and make request for each of them\n     * to create it on server. Update progress in between calls.\n     * @param  {array} history_item_set array of empty history items\n     * @param  {str} history_name     name of the history to import to\n     */\n    chainCallImportingIntoHistory: function(history_item_set, history_name) {\n        var popped_item = history_item_set.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected datasets imported into history. Click this to start analyzing it.\", \"\", {\n                    onclick: () => {\n                        window.location = Galaxy.root;\n                    }\n                });\n            } else if (this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number) {\n                mod_toastr.error(\"There was an error and no datasets were imported into history.\");\n            } else if (this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number) {\n                mod_toastr.warning(\n                    \"Some of the datasets could not be imported into history. Click this to see what was imported.\",\n                    \"\",\n                    {\n                        onclick: () => {\n                            window.location = Galaxy.root;\n                        }\n                    }\n                );\n            }\n            Galaxy.modal.hide();\n            return true;\n        }\n        var promise = $.when(\n            popped_item.save({\n                content: popped_item.content,\n                source: popped_item.source\n            })\n        );\n\n        promise\n            .done(() => {\n                this.updateProgress();\n                this.chainCallImportingIntoHistory(history_item_set, history_name);\n            })\n            .fail(() => {\n                this.options.chain_call_control.failed_number += 1;\n                this.updateProgress();\n                this.chainCallImportingIntoHistory(history_item_set, history_name);\n            });\n    },\n\n    /**\n     * Take the array of paths and create a request for each of them\n     * calling them in chain. Update the progress bar in between each.\n     * @param  {array} paths                    paths relative to user folder on Galaxy\n     * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n     */\n    chainCallImportingUserdirFiles: function(options) {\n        var popped_item = options.paths.pop();\n        if (typeof popped_item === \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected files imported into the current folder\");\n                Galaxy.modal.hide();\n            } else {\n                mod_toastr.error(\"An error occured.\");\n            }\n            return true;\n        }\n        var promise = $.when(\n            $.post(\n                `${Galaxy.root}api/libraries/datasets?encoded_folder_id=${this.id}&source=${\n                    options.source\n                }&path=${popped_item}&file_type=${options.file_type}&link_data=${options.link_data}&space_to_tab=${\n                    options.space_to_tab\n                }&to_posix_lines=${options.to_posix_lines}&dbkey=${options.dbkey}&tag_using_filenames=${\n                    options.tag_using_filenames\n                }`\n            )\n        );\n        promise\n            .done(response => {\n                this.updateProgress();\n                this.chainCallImportingUserdirFiles(options);\n            })\n            .fail(() => {\n                this.options.chain_call_control.failed_number += 1;\n                this.updateProgress();\n                this.chainCallImportingUserdirFiles(options);\n            });\n    },\n\n    /**\n     * Take the array of paths and create a request for each of them\n     * calling them in series. Update the progress bar in between each.\n     * @param  {array} paths                    paths relative to Galaxy root folder\n     * @param  {boolean} preserve_dirs          indicates whether to preserve folder structure\n     * @param  {boolean} link_data              copy files to Galaxy or link instead\n     * @param  {boolean} to_posix_lines         convert line endings to POSIX standard\n     * @param  {boolean} space_to_tab           convert spaces to tabs\n     * @param  {str} source                     string representing what type of folder\n     *                                          is the source of import\n     * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n     */\n    chainCallImportingFolders: function(options) {\n        // TODO need to check which paths to call\n        var popped_item = options.paths.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected folders and their contents imported into the current folder.\");\n                Galaxy.modal.hide();\n            } else {\n                // TODO better error report\n                mod_toastr.error(\"An error occured.\");\n            }\n            return true;\n        }\n        var promise = $.when(\n            $.post(\n                `${Galaxy.root}api/libraries/datasets?encoded_folder_id=${this.id}&source=${\n                    options.source\n                }&path=${popped_item}&preserve_dirs=${options.preserve_dirs}&link_data=${\n                    options.link_data\n                }&to_posix_lines=${options.to_posix_lines}&space_to_tab=${options.space_to_tab}&file_type=${\n                    options.file_type\n                }&dbkey=${options.dbkey}&tag_using_filenames=${options.tag_using_filenames}`\n            )\n        );\n        promise\n            .done(response => {\n                this.updateProgress();\n                this.chainCallImportingFolders(options);\n            })\n            .fail(() => {\n                this.options.chain_call_control.failed_number += 1;\n                this.updateProgress();\n                this.chainCallImportingFolders(options);\n            });\n    },\n\n    /**\n     * Take the array of hdas and create a request for each.\n     * Call them in chain and update progress bar in between each.\n     * @param  {array} hdas_set array of empty hda objects\n     */\n    chainCallAddingHdas: function(hdas_set) {\n        this.added_hdas = new mod_library_model.Folder();\n        var popped_item = hdas_set.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected datasets from history added to the folder\");\n            } else if (this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number) {\n                mod_toastr.error(\"There was an error and no datasets were added to the folder.\");\n            } else if (this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number) {\n                mod_toastr.warning(\"Some of the datasets could not be added to the folder\");\n            }\n            Galaxy.modal.hide();\n            return this.added_hdas;\n        }\n        var promise = $.when(\n            popped_item.save({\n                from_hda_id: popped_item.get(\"from_hda_id\")\n            })\n        );\n\n        promise\n            .done(model => {\n                Galaxy.libraries.folderListView.collection.add(model);\n                this.updateProgress();\n                this.chainCallAddingHdas(hdas_set);\n            })\n            .fail(() => {\n                this.options.chain_call_control.failed_number += 1;\n                this.updateProgress();\n                this.chainCallAddingHdas(hdas_set);\n            });\n    },\n\n    /**\n     * Take the array of lddas, create request for each and\n     * call them in chain. Update progress bar in between each.\n     * @param  {array} lddas_set array of lddas to delete\n     */\n    chainCallDeletingItems: function(items_to_delete) {\n        this.deleted_items = new mod_library_model.Folder();\n        var item_to_delete = items_to_delete.pop();\n        if (typeof item_to_delete === \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected items were deleted.\");\n            } else if (this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number) {\n                mod_toastr.error(\n                    \"There was an error and no items were deleted. Please make sure you have sufficient permissions.\"\n                );\n            } else if (this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number) {\n                mod_toastr.warning(\n                    \"Some of the items could not be deleted. Please make sure you have sufficient permissions.\"\n                );\n            }\n            Galaxy.modal.hide();\n            return this.deleted_items;\n        }\n        item_to_delete\n            .destroy()\n            .done(item => {\n                Galaxy.libraries.folderListView.collection.remove(item_to_delete.id);\n                this.updateProgress();\n                // add the deleted item to collection, triggers rendering\n                if (Galaxy.libraries.folderListView.options.include_deleted) {\n                    var updated_item = null;\n                    if (item.type === \"folder\" || item.model_class === \"LibraryFolder\") {\n                        updated_item = new mod_library_model.FolderAsModel(item);\n                    } else if (item.type === \"file\" || item.model_class === \"LibraryDataset\") {\n                        updated_item = new mod_library_model.Item(item);\n                    } else {\n                        Galaxy.emit.error(\"Unknown library item type found.\", \"datalibs\");\n                        Galaxy.emit.error(item.type || item.model_class, \"datalibs\");\n                    }\n                    Galaxy.libraries.folderListView.collection.add(updated_item);\n                }\n                this.chainCallDeletingItems(items_to_delete);\n            })\n            .fail(() => {\n                this.options.chain_call_control.failed_number += 1;\n                this.updateProgress();\n                this.chainCallDeletingItems(items_to_delete);\n            });\n    },\n\n    /**\n     * Handles the click on 'show deleted' checkbox\n     */\n    checkIncludeDeleted: function(event) {\n        if (event.target.checked) {\n            Galaxy.libraries.folderListView.fetchFolder({\n                include_deleted: true\n            });\n        } else {\n            Galaxy.libraries.folderListView.fetchFolder({\n                include_deleted: false\n            });\n        }\n    },\n\n    /**\n     * Delete the selected items. Atomic. One by one.\n     */\n    deleteSelectedItems: function() {\n        var dataset_ids = [];\n        var folder_ids = [];\n        var $checkedValues = this.findCheckedRows();\n        if ($checkedValues.length === 0) {\n            mod_toastr.info(\"You must select at least one item for deletion.\");\n        } else {\n            var template = this.templateDeletingItemsProgressBar();\n            this.modal = Galaxy.modal;\n            this.modal.show({\n                closing_events: true,\n                title: _l(\"Deleting selected items\"),\n                body: template({}),\n                buttons: {\n                    Close: () => {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n            // init the control counters\n            this.options.chain_call_control.total_number = 0;\n            this.options.chain_call_control.failed_number = 0;\n            $checkedValues.each(function() {\n                var row_id = $(this)\n                    .closest(\"tr\")\n                    .data(\"id\");\n                if (row_id !== undefined) {\n                    if (row_id.substring(0, 1) == \"F\") {\n                        folder_ids.push(row_id);\n                    } else {\n                        dataset_ids.push(row_id);\n                    }\n                }\n            });\n            // init the progress bar\n            var items_total = dataset_ids.length + folder_ids.length;\n            this.progressStep = 100 / items_total;\n            this.progress = 0;\n\n            // prepare the dataset items to be added\n            var items_to_delete = [];\n            for (let i = dataset_ids.length - 1; i >= 0; i--) {\n                var dataset = new mod_library_model.Item({\n                    id: dataset_ids[i]\n                });\n                items_to_delete.push(dataset);\n            }\n            for (let i = folder_ids.length - 1; i >= 0; i--) {\n                var folder = new mod_library_model.FolderAsModel({\n                    id: folder_ids[i]\n                });\n                items_to_delete.push(folder);\n            }\n\n            this.options.chain_call_control.total_number = items_total;\n            // call the recursive function to call ajax one after each other (request FIFO queue)\n            this.chainCallDeletingItems(items_to_delete);\n        }\n    },\n\n    showLocInfo: function() {\n        var library = null;\n        if (Galaxy.libraries.libraryListView !== null) {\n            library = Galaxy.libraries.libraryListView.collection.get(this.options.parent_library_id);\n            this.showLocInfoModal(library);\n        } else {\n            library = new mod_library_model.Library({\n                id: this.options.parent_library_id\n            });\n            library.fetch({\n                success: () => {\n                    this.showLocInfoModal(library);\n                },\n                error: function(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                }\n            });\n        }\n    },\n\n    showLocInfoModal: function(library) {\n        var template = this.templateLocInfoInModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: _l(\"Location Details\"),\n            body: template({ library: library, options: this.options }),\n            buttons: {\n                Close: () => {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n    },\n\n    showImportModal: function(options) {\n        switch (options.source) {\n            case \"history\":\n                this.addFilesFromHistoryModal();\n                break;\n            case \"importdir\":\n                this.importFilesFromGalaxyFolderModal({\n                    source: \"importdir\"\n                });\n                break;\n            case \"path\":\n                this.importFilesFromPathModal();\n                break;\n            case \"userdir\":\n                this.importFilesFromGalaxyFolderModal({\n                    source: \"userdir\"\n                });\n                break;\n            default:\n                Galaxy.libraries.library_router.back();\n                mod_toastr.error(\"Invalid import source.\");\n                break;\n        }\n    },\n\n    /**\n     * Show user the prompt to change the number of items shown on page.\n     */\n    showPageSizePrompt: function(e) {\n        e.preventDefault();\n        var folder_page_size = prompt(\n            \"How many items per page do you want to see?\",\n            Galaxy.libraries.preferences.get(\"folder_page_size\")\n        );\n        if (folder_page_size != null && folder_page_size == parseInt(folder_page_size)) {\n            Galaxy.libraries.preferences.set({\n                folder_page_size: parseInt(folder_page_size)\n            });\n            Galaxy.libraries.folderListView.render({\n                id: this.options.id,\n                show_page: 1\n            });\n        }\n    },\n\n    findCheckedRows: function() {\n        return $(\"#folder_list_body\").find(\":checked\");\n    },\n\n    findCheckedItems: function() {\n        var folder_ids = [];\n        var dataset_ids = [];\n        this.findCheckedRows().each(function() {\n            var row_id = $(this)\n                .closest(\"tr\")\n                .data(\"id\");\n            if (row_id.substring(0, 1) == \"F\") {\n                folder_ids.push(row_id);\n            } else {\n                dataset_ids.push(row_id);\n            }\n        });\n        return { folder_ids: folder_ids, dataset_ids: dataset_ids };\n    },\n\n    showCollectionSelect: function(e) {\n        e.preventDefault();\n        var checked_items = this.findCheckedItems();\n        var template = this.templateCollectionSelectModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Create History Collection from Datasets\",\n            body: template({ selected_datasets: checked_items.dataset_ids.length }),\n            buttons: {\n                Continue: () => {\n                    this.showColectionBuilder(checked_items.dataset_ids);\n                },\n                Close: () => {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n        this.prepareCollectionTypeSelect();\n        this.prepareHistoryTypeSelect();\n    },\n\n    prepareCollectionTypeSelect: function() {\n        this.collectionType = \"list\";\n        this.select_collection_type = new mod_select.View({\n            css: \"library-collection-type-select\",\n            container: this.modal.$el.find(\".library-collection-type-select\"),\n            data: [\n                { id: \"list\", text: \"List\" },\n                { id: \"paired\", text: \"Paired\" },\n                { id: \"list:paired\", text: \"List of Pairs\" }\n            ],\n            value: \"list\",\n            onchange: collectionType => {\n                this.updateCollectionType(collectionType);\n            }\n        });\n    },\n\n    prepareHistoryTypeSelect: function() {\n        var promise = this.fetchUserHistories();\n        promise.done(() => {\n            var history_options = [];\n            for (let i = this.histories.length - 1; i >= 0; i--) {\n                history_options.unshift({\n                    id: this.histories.models[i].id,\n                    text: this.histories.models[i].get(\"name\")\n                });\n            }\n            this.select_collection_history = new mod_select.View({\n                css: \"library-collection-history-select\",\n                container: this.modal.$el.find(\".library-collection-history-select\"),\n                data: history_options,\n                value: history_options[0].id\n            });\n        });\n    },\n\n    /** Update collection type */\n    updateCollectionType: function(collectionType) {\n        this.collectionType = collectionType;\n    },\n\n    showColectionBuilder: function(checked_items) {\n        let collection_elements = [];\n        let elements_source = this.modal.$('input[type=\"radio\"]:checked').val();\n        if (elements_source === \"selection\") {\n            for (let i = checked_items.length - 1; i >= 0; i--) {\n                let collection_item = {};\n                let dataset = Galaxy.libraries.folderListView.folder_container.get(\"folder\").get(checked_items[i]);\n                collection_item.id = checked_items[i];\n                collection_item.name = dataset.get(\"name\");\n                collection_item.deleted = dataset.get(\"deleted\");\n                collection_item.state = dataset.get(\"state\");\n                collection_elements.push(collection_item);\n            }\n        } else if (elements_source === \"folder\") {\n            collection_elements = new Backbone.Collection(\n                Galaxy.libraries.folderListView.folder_container.get(\"folder\").where({ type: \"file\" })\n            ).toJSON();\n        }\n        let new_history_name = this.modal.$(\"input[name=history_name]\").val();\n        if (new_history_name !== \"\") {\n            this.createNewHistory(new_history_name)\n                .done(new_history => {\n                    mod_toastr.success(\"History created\");\n                    this.collectionImport(collection_elements, new_history.id, new_history.name);\n                })\n                .fail((xhr, status, error) => {\n                    mod_toastr.error(\"An error occurred.\");\n                });\n        } else {\n            let selected_history_id = this.select_collection_history.value();\n            let selected_history_name = this.select_collection_history.text();\n            this.collectionImport(collection_elements, selected_history_id, selected_history_name);\n        }\n    },\n\n    collectionImport: function(collection_elements, history_id, history_name) {\n        let modal_title = `Creating Collection in ${history_name}`;\n        let creator_class;\n        let creationFn;\n        if (this.collectionType === \"list\") {\n            creator_class = LIST_CREATOR.ListCollectionCreator;\n            creationFn = (elements, name, hideSourceItems) => {\n                elements = elements.map(element => ({\n                    id: element.id,\n                    name: element.name,\n                    src: \"ldda\"\n                }));\n                return this.createHDCA(elements, this.collectionType, name, hideSourceItems, history_id);\n            };\n            LIST_CREATOR.collectionCreatorModal(\n                collection_elements,\n                { creationFn: creationFn, title: modal_title, defaultHideSourceItems: true },\n                creator_class\n            );\n        } else if (this.collectionType === \"paired\") {\n            creator_class = PAIR_CREATOR.PairCollectionCreator;\n            creationFn = (elements, name, hideSourceItems) => {\n                elements = [\n                    { name: \"forward\", src: \"ldda\", id: elements[0].id },\n                    { name: \"reverse\", src: \"ldda\", id: elements[1].id }\n                ];\n                return this.createHDCA(elements, this.collectionType, name, hideSourceItems, history_id);\n            };\n            LIST_CREATOR.collectionCreatorModal(\n                collection_elements,\n                { creationFn: creationFn, title: modal_title, defaultHideSourceItems: true },\n                creator_class\n            );\n        } else if (this.collectionType === \"list:paired\") {\n            let elements = collection_elements.map(element => ({\n                id: element.id,\n                name: element.name,\n                src: \"ldda\"\n            }));\n            PAIRED_CREATOR.pairedCollectionCreatorModal(elements, {\n                historyId: history_id,\n                title: modal_title,\n                defaultHideSourceItems: true\n            });\n        }\n    },\n\n    createHDCA: function(elementIdentifiers, collectionType, name, hideSourceItems, history_id, options) {\n        let hdca = new HDCA_MODEL.HistoryDatasetCollection({\n            history_content_type: \"dataset_collection\",\n            collection_type: collectionType,\n            history_id: history_id,\n            name: name,\n            hide_source_items: hideSourceItems || false,\n            element_identifiers: elementIdentifiers\n        });\n        return hdca.save(options);\n    },\n\n    templateToolBar: function() {\n        return _.template(\n            [\n                // container start\n                '<div class=\"library_style_container\">',\n                // toolbar start\n                '<div id=\"library_toolbar\">',\n                '<form class=\"form-inline\" role=\"form\">',\n                \"<span><strong>DATA LIBRARIES</strong></span>\",\n                // paginator will append here\n                '<span class=\"library-paginator folder-paginator\"></span>',\n                // include deleted checkbox\n                '<div class=\"checkbox toolbar-item logged-dataset-manipulation\" style=\"height: 20px; display:none;\">',\n                \"<label>\",\n                '<input type=\"checkbox\" class=\"include-deleted-datasets-chk\">include deleted</input>',\n                \"</label>\",\n                \"</div>\",\n                // create new folder button\n                '<button style=\"display:none;\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Folder\" class=\"btn btn-default primary-button toolbtn-create-folder add-library-items add-library-items-folder toolbar-item\" type=\"button\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-folder\"></span> Create Folder ',\n                \"</button>\",\n                // add datasets button\n                \"<% if(mutiple_add_dataset_options) { %>\",\n                '<div class=\"btn-group add-library-items add-library-items-datasets toolbar-item\" style=\"display:none;\">',\n                '<button title=\"Add Datasets to Current Folder\" id=\"\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span> Add Datasets <span class=\"caret\"></span>',\n                \"</button>\",\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                '<li><a href=\"#folders/<%= id %>/import/history\"> from History</a></li>',\n                \"<% if(Galaxy.config.user_library_import_dir !== null) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/userdir\"> from User Directory</a></li>',\n                \"<% } %>\",\n                \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                '<li class=\"divider\"></li>',\n                '<li class=\"dropdown-header\">Admins only</li>',\n                \"<% if(Galaxy.config.library_import_dir !== null) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/importdir\">from Import Directory</a></li>',\n                \"<% } %>\",\n                \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/path\">from Path</a></li>',\n                \"<% } %>\",\n                \"<% } %>\",\n                \"</ul>\",\n                \"</div>\",\n                \"<% } else { %>\",\n                '<a data-placement=\"top\" title=\"Add Datasets to Current Folder\" style=\"display:none;\" class=\"btn btn-default add-library-items add-library-items-datasets\" href=\"#folders/<%= id %>/import/history\" role=\"button\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span>',\n                \"</a>\",\n                \"<% } %>\",\n                // import to history button\n                '<div class=\"btn-group toolbar-item\">',\n                '<button title=\"Import to history\" type=\"button\" class=\"primary-button dropdown-toggle add-to-history\" data-toggle=\"dropdown\">',\n                '<span class=\"fa fa-book\"></span> To History <span class=\"caret\"></span>',\n                \"</button>\",\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                '<li><a href=\"\" class=\"toolbtn-bulk-import add-to-history-datasets\">as Datasets</a></li>',\n                '<li><a href=\"\" class=\"toolbtn-collection-import add-to-history-collection\">as a Collection</a></li>',\n                \"</ul>\",\n                \"</div>\",\n                // download button\n                '<div class=\"btn-group dataset-manipulation toolbar-item\" style=\"display:none; \">',\n                '<button title=\"Download items as archive\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                '<span class=\"fa fa-save\"></span> Download <span class=\"caret\"></span>',\n                \"</button>\",\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                '<li><a href=\"#/folders/<%= id %>/download/tgz\">.tar.gz</a></li>',\n                '<li><a href=\"#/folders/<%= id %>/download/tbz\">.tar.bz</a></li>',\n                '<li><a href=\"#/folders/<%= id %>/download/zip\">.zip</a></li>',\n                \"</ul>\",\n                \"</div>\",\n                // delete button\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Mark items deleted\" class=\"primary-button toolbtn-bulk-delete logged-dataset-manipulation toolbar-item\" style=\"display:none;\" type=\"button\">',\n                '<span class=\"fa fa-trash\"></span> Delete',\n                \"</button>\",\n                // help button\n                '<span class=\"right-float\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"See this screen annotated\">',\n                '<a href=\"https://galaxyproject.org/data-libraries/screen/folder-contents/\" target=\"_blank\">',\n                '<button class=\"primary-button\" type=\"button\">',\n                '<span class=\"fa fa-question-circle\"></span>',\n                \"&nbsp;Help\",\n                \"</button>\",\n                \"</a>\",\n                \"</span>\",\n                // location button\n                '<span class=\"right-float\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Show location details\">',\n                '<button data-id=\"<%- id %>\" class=\"primary-button toolbtn-show-locinfo toolbar-item\" type=\"button\">',\n                '<span class=\"fa fa-info-circle\"></span>',\n                \"&nbsp;Details\",\n                \"</button>\",\n                \"</span>\",\n                // toolbar end\n                \"</div>\",\n                \"</form>\",\n                // folder contents will append here\n                '<div id=\"folder_items_element\" />',\n                // paginator will append here\n                '<div class=\"folder-paginator paginator-bottom\" />',\n                // container end\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateLocInfoInModal: function() {\n        return _.template(\n            [\n                \"<div>\",\n                '<table class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th style=\"width: 25%;\">library</th>',\n                \"<th></th>\",\n                \"</thead>\",\n                \"<tbody>\",\n                \"<tr>\",\n                \"<td>name</td>\",\n                '<td><%- library.get(\"name\") %></td>',\n                \"</tr>\",\n                '<% if(library.get(\"description\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>description</td>\",\n                '<td><%- library.get(\"description\") %></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                '<% if(library.get(\"synopsis\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>synopsis</td>\",\n                '<td><%- library.get(\"synopsis\") %></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                '<% if(library.get(\"create_time_pretty\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>created</td>\",\n                '<td><span title=\"<%- library.get(\"create_time\") %>\"><%- library.get(\"create_time_pretty\") %></span></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                \"<tr>\",\n                \"<td>id</td>\",\n                '<td><%- library.get(\"id\") %></td>',\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                '<table class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th style=\"width: 25%;\">folder</th>',\n                \"<th></th>\",\n                \"</thead>\",\n                \"<tbody>\",\n                \"<tr>\",\n                \"<td>name</td>\",\n                \"<td><%- options.folder_name %></td>\",\n                \"</tr>\",\n                '<% if(options.folder_description !== \"\") { %>',\n                \"<tr>\",\n                \"<td>description</td>\",\n                \"<td><%- options.folder_description %></td>\",\n                \"</tr>\",\n                \"<% } %>\",\n                \"<tr>\",\n                \"<td>id</td>\",\n                \"<td><%- options.id %></td>\",\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateNewFolderInModal: function() {\n        return _.template(\n            [\n                '<div id=\"new_folder_modal\">',\n                \"<form>\",\n                '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>',\n                '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">',\n                \"</form>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateImportIntoHistoryModal: function() {\n        return _.template(\n            [\n                \"<div>\",\n                '<div class=\"library-modal-item\">',\n                \"Select history: \",\n                '<select name=\"import_to_history\" style=\"width:50%; margin-bottom: 1em; \" autofocus>',\n                \"<% _.each(histories, function(history) { %>\",\n                '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                \"<% }); %>\",\n                \"</select>\",\n                \"</div>\",\n                '<div class=\"library-modal-item\">',\n                \"or create new: \",\n                '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\" />',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateImportIntoHistoryProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"Importing selected items to history <b><%= _.escape(history_name) %></b>\",\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateAddingDatasetsProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"Adding selected datasets to library folder <b><%= _.escape(folder_name) %></b>\",\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateDeletingItemsProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateBrowserModal: function() {\n        return _.template(\n            [\n                '<div id=\"file_browser_modal\">',\n                '<div class=\"alert alert-info jstree-files-message\">All files you select will be imported into the current folder ignoring their folder structure.</div>',\n                '<div class=\"alert alert-info jstree-folders-message\" style=\"display:none;\">All files within the selected folders and their subfolders will be imported into the current folder.</div>',\n                '<div style=\"margin-bottom:1em;\">',\n                '<label title=\"Switch to selecting files\" class=\"radio-inline import-type-switch\">',\n                '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-folders\" checked=\"checked\"> Choose Files',\n                \"</label>\",\n                '<label title=\"Switch to selecting folders\" class=\"radio-inline import-type-switch\">',\n                '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-files\"> Choose Folders',\n                \"</label>\",\n                \"</div>\",\n                '<div style=\"margin-bottom:1em;\">',\n                '<label class=\"checkbox-inline jstree-preserve-structure\" style=\"display:none;\">',\n                '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                \"Preserve directory structure\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                \"Link files instead of copying\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                \"Convert line endings to POSIX\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                \"Convert spaces to tabs\",\n                \"</label>\",\n                \"</div>\",\n                '<button title=\"Select all files\" type=\"button\" class=\"button primary-button libimport-select-all\">',\n                \"Select all\",\n                \"</button>\",\n                '<button title=\"Select no files\" type=\"button\" class=\"button primary-button libimport-select-none\">',\n                \"Unselect all\",\n                \"</button>\",\n                \"<hr />\",\n                // append jstree object here\n                '<div id=\"jstree_browser\">',\n                \"</div>\",\n                \"<hr />\",\n                \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                \"<div>\",\n                'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                \"</div>\",\n                \"<br>\",\n                \"<div>\",\n                '<label class=\"checkbox-inline tag-files\">',\n                \"Tag datasets based on file names\",\n                '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\">',\n                \"</label>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateImportPathModal: function() {\n        return _.template(\n            [\n                '<div id=\"file_browser_modal\">',\n                '<div class=\"alert alert-info jstree-folders-message\">All files within the given folders and their subfolders will be imported into the current folder.</div>',\n                '<div style=\"margin-bottom: 0.5em;\">',\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                \"Preserve directory structure\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                \"Link files instead of copying\",\n                \"</label>\",\n                \"<br>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                \"Convert line endings to POSIX\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                \"Convert spaces to tabs\",\n                \"</label>\",\n                \"</div>\",\n                '<textarea id=\"import_paths\" class=\"form-control\" rows=\"5\" placeholder=\"Absolute paths (or paths relative to Galaxy root) separated by newline\" autofocus></textarea>',\n                \"<hr />\",\n                \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                \"<div>\",\n                'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                \"</div>\",\n                \"<div>\",\n                '<label class=\"checkbox-inline tag-files\">',\n                \"Tag datasets based on file names\",\n                '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\">',\n                \"</label>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateAddFilesFromHistory: function() {\n        return _.template(\n            [\n                '<div id=\"add_files_modal\">',\n                \"<div>\",\n                \"1.&nbsp;Select history:&nbsp;\",\n                '<select id=\"dataset_add_bulk\" name=\"dataset_add_bulk\" style=\"width:66%; \"> ',\n                \"<% _.each(histories, function(history) { %>\", //history select box\n                '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                \"<% }); %>\",\n                \"</select>\",\n                \"</div>\",\n                \"<br/>\",\n                '<div class=\"library_selected_history_content\">',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateHistoryContents: function() {\n        return _.template(\n            [\n                \"<p>2.&nbsp;Choose the datasets to import:</p>\",\n                \"<div>\",\n                '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-select-all\">',\n                \"Select all\",\n                \"</button>\",\n                '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-unselect-all\">',\n                \"Unselect all\",\n                \"</button>\",\n                \"</div>\",\n                \"<br>\",\n                \"<ul>\",\n                \"<% _.each(history_contents, function(history_item) { %>\",\n                '<% if (history_item.get(\"deleted\") != true ) { %>',\n                '<% var item_name = history_item.get(\"name\") %>',\n                '<% if (history_item.get(\"type\") === \"collection\") { %>',\n                '<% var collection_type = history_item.get(\"collection_type\") %>',\n                '<% if (collection_type === \"list\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                \"<label>\",\n                '<label title=\"<%= _.escape(item_name) %>\">',\n                '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection)',\n                \"</label>\",\n                \"</li>\",\n                \"<% } else { %>\",\n                '<li><input style=\"margin: 0;\" type=\"checkbox\" onclick=\"return false;\" disabled=\"disabled\">',\n                '<span title=\"You can convert this collection into a collection of type list using the Collection Tools\">',\n                '<%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection of type <%= _.escape(collection_type) %> not supported.)',\n                \"</span>\",\n                \"</li>\",\n                \"<% } %>\",\n                '<% } else if (history_item.get(\"visible\") === true && history_item.get(\"state\") === \"ok\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                '<label title=\"<%= _.escape(item_name) %>\">',\n                '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %>',\n                \"</label>\",\n                \"</li>\",\n                \"<% } %>\",\n                \"<% } %>\",\n                \"<% }); %>\",\n                \"</ul>\"\n            ].join(\"\")\n        );\n    },\n\n    templatePaginator: function() {\n        return _.template(\n            [\n                '<ul class=\"pagination pagination-sm\">',\n                \"<% if ( ( show_page - 1 ) > 0 ) { %>\",\n                \"<% if ( ( show_page - 1 ) > page_count ) { %>\", // we are on higher page than total page count\n                '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } else { %>\",\n                '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li><a href=\"#folders/<%= id %>/page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } %>\",\n                \"<% } else { %>\", // we are on the first page\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } %>\",\n                '<li class=\"active\">',\n                '<a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page ) %></a>',\n                \"</li>\",\n                \"<% if ( ( show_page ) < page_count ) { %>\",\n                '<li><a href=\"#folders/<%= id %>/page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>',\n                '<li><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                \"<% } else { %>\",\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                \"<% } %>\",\n                \"</ul>\",\n                \"<span>\",\n                ' <%- items_shown %> items shown <a href=\"\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"currently <%- folder_page_size %> per page\" class=\"page-size-prompt\">(change)</a>',\n                \"</span>\",\n                \"<span>\",\n                \" <%- total_items_count %> total\",\n                \"</span>\"\n            ].join(\"\")\n        );\n    },\n\n    templateCollectionSelectModal: function() {\n        return _.template(\n            [\n                \"<div>\",\n                // elements selection\n                '<div class=\"library-modal-item\">',\n                \"<h4>Which datasets?</h4>\",\n                '<form class=\"form-inline\">',\n                '<label class=\"radio-inline\">',\n                '<input type=\"radio\" name=\"radio_elements\" id=\"selection_radio\" value=\"selection\" <% if (!selected_datasets) { %> disabled <% } else { %> checked <% } %> > current selection',\n                \"<% if (selected_datasets) { %>\",\n                \" (<%- selected_datasets %>)\",\n                \"<% } %>\",\n                \"</label>\",\n                '<label class=\"radio-inline\">',\n                '<input type=\"radio\" name=\"radio_elements\" id=\"folder_radio\" value=\"folder\" <% if (!selected_datasets) { %> checked <% } %> > all datasets in current folder',\n                \"</label>\",\n                \"</form>\",\n                \"</div>\",\n                // type selection\n                '<div class=\"library-modal-item\">',\n                \"<h4>Collection type</h4>\",\n                '<span class=\"library-collection-type-select\"/>',\n                \"<h5>Which type to choose?</h5>\",\n                \"<ul>\",\n                \"<li>\",\n                \"List: Generic collection which groups any number of datasets into a set; similar to file system folder.\",\n                \"</li>\",\n                \"<li>\",\n                \"Paired: Simple collection containing exactly two sequence datasets; one reverse and the other forward.\",\n                \"</li>\",\n                \"<li>\",\n                \"List of Pairs: Advanced collection containing any number of Pairs; imagine as Pair-type collections inside of a List-type collection.\",\n                \"</li>\",\n                \"</ul>\",\n                \"</div>\",\n                // history selection/creation\n                '<div class=\"library-modal-item\">',\n                \"<h4>Select history</h4>\",\n                '<span class=\"library-collection-history-select\"/>',\n                \" or create new: \",\n                '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" />',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    FolderToolbarView: FolderToolbarView\n};\n"]}