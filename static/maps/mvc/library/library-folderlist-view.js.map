{"version":3,"sources":["mvc/library/library-folderlist-view.js"],"names":["FolderListView","Backbone","View","extend","el","progress","progressStep","folderContainer","current_sort_order","current_sort_key","events","click #select-all-checkboxes","click .sort-folder-name","click .sort-folder-description","collection","defaults","page_count","initialize","options","this","_","modal","rowViews","_libraryModel2","default","Folder","listenTo","renderOne","removeOne","rePaint","fetchFolder","include_deleted","self","FolderContainer","id","url","urlRoot","fetch","success","folder_container","error","model","response","responseJSON","onclick","Galaxy","libraries","library_router","back","_toastr2","template","templateFolder","$","hide","attributes","metadata","full_path","upper_folder_id","path","length","render","html","parent_library_id","dataset_id","row","show_page","paginate","css","total_items_count","get","models","Math","ceil","preferences","items_to_render","page_start","items_shown","reset","renderAll","checkEmptiness","addAll","each","folderListView","add","postRender","fetched_metadata","contains_file_or_folder","findWhere","type","folderToolbarView","configureElements","reverse","set","rowView","_libraryFolderrowView2","FolderRowView","$el","find","after","filter","data","remove","removeAllRows","sortColumnClicked","event","currentTarget","replace","className","renderSortIcon","selectAll","target","checked","selected","$row","makeWhiteRow","selectClickedRow","source","closest","checkbox","localName","makeDarkRow","addClass","removeClass","join"],"mappings":"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","file":"../../../scripts/mvc/library/library-folderlist-view.js","sourcesContent":["import mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_library_folderrow_view from \"mvc/library/library-folderrow-view\";\n\nvar FolderListView = Backbone.View.extend({\n    el: \"#folder_items_element\",\n    // progress percentage\n    progress: 0,\n    // progress rate per one item\n    progressStep: 1,\n\n    folderContainer: null,\n\n    current_sort_order: \"asc\",\n\n    current_sort_key: \"name\",\n\n    events: {\n        \"click #select-all-checkboxes\": \"selectAll\",\n        \"click .dataset_row\": \"selectClickedRow\",\n        \"click .folder_row\": \"selectClickedRow\",\n        \"click .sort-folder-name\": \"sortColumnClicked\",\n        \"click .sort-folder-file_ext\": \"sortColumnClicked\",\n        \"click .sort-folder-description\": \"sortColumnClicked\",\n        \"click .sort-folder-state\": \"sortColumnClicked\"\n    },\n\n    collection: null,\n\n    defaults: {\n        include_deleted: false,\n        page_count: null,\n        show_page: null\n    },\n\n    /**\n     * Initialize and fetch the folder from the server.\n     * @param  {object} options an object with options\n     */\n    initialize: function(options) {\n        this.options = _.defaults(this.options || {}, this.defaults, options);\n        this.modal = null;\n        // map of folder item ids to item views = cache\n        this.rowViews = {};\n\n        // create a collection of folder items for this view\n        this.collection = new mod_library_model.Folder();\n\n        // start to listen if someone modifies the collection\n        this.listenTo(this.collection, \"add\", this.renderOne);\n        this.listenTo(this.collection, \"remove\", this.removeOne);\n        this.listenTo(this.collection, \"sort\", this.rePaint);\n        this.listenTo(this.collection, \"reset\", this.rePaint);\n\n        this.fetchFolder();\n    },\n\n    fetchFolder: function(options) {\n        var options = options || {};\n        this.options.include_deleted = options.include_deleted;\n        var self = this;\n\n        this.folderContainer = new mod_library_model.FolderContainer({\n            id: this.options.id\n        });\n        this.folderContainer.url = `${this.folderContainer.attributes.urlRoot + this.options.id}/contents`;\n\n        if (this.options.include_deleted) {\n            this.folderContainer.url = `${this.folderContainer.url}?include_deleted=true`;\n        }\n        this.folderContainer.fetch({\n            success: function(folder_container) {\n                self.folder_container = folder_container;\n                self.render();\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(`${response.responseJSON.err_msg} Click this to go back.`, \"\", {\n                        onclick: function() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                } else {\n                    mod_toastr.error(\"An error occurred. Click this to go back.\", \"\", {\n                        onclick: function() {\n                            Galaxy.libraries.library_router.back();\n                        }\n                    });\n                }\n            }\n        });\n    },\n\n    render: function(options) {\n        this.options = _.extend(this.options, options);\n        var template = this.templateFolder();\n        $(\".tooltip\").hide();\n\n        // find the upper id in the full path\n        var path = this.folderContainer.attributes.metadata.full_path;\n        var upper_folder_id;\n        if (path.length === 1) {\n            // the library is above us\n            upper_folder_id = 0;\n        } else {\n            upper_folder_id = path[path.length - 2][0];\n        }\n\n        this.$el.html(\n            template({\n                path: this.folderContainer.attributes.metadata.full_path,\n                parent_library_id: this.folderContainer.attributes.metadata.parent_library_id,\n                id: this.options.id,\n                upper_folder_id: upper_folder_id,\n                order: this.current_sort_order\n            })\n        );\n\n        // when dataset_id is present render its details too\n        if (this.options.dataset_id) {\n            var row = _.findWhere(self.rowViews, {\n                id: this.options.dataset_id\n            });\n            if (row) {\n                row.showDatasetDetails();\n            } else {\n                mod_toastr.error(\"Requested dataset not found. Showing folder instead.\");\n            }\n        } else {\n            if (this.options.show_page === null || this.options.show_page < 1) {\n                this.options.show_page = 1;\n            }\n            this.paginate();\n        }\n        $(\"#center [data-toggle]\").tooltip();\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    paginate: function(options) {\n        this.options = _.extend(this.options, options);\n\n        if (this.options.show_page === null || this.options.show_page < 1) {\n            this.options.show_page = 1;\n        }\n        this.options.total_items_count = this.folder_container.get(\"folder\").models.length;\n        this.options.page_count = Math.ceil(\n            this.options.total_items_count / Galaxy.libraries.preferences.get(\"folder_page_size\")\n        );\n        var page_start = Galaxy.libraries.preferences.get(\"folder_page_size\") * (this.options.show_page - 1);\n        var items_to_render = null;\n        items_to_render = this.folder_container\n            .get(\"folder\")\n            .models.slice(page_start, page_start + Galaxy.libraries.preferences.get(\"folder_page_size\"));\n        this.options.items_shown = items_to_render.length;\n        // User requests page with no items\n        if (\n            Galaxy.libraries.preferences.get(\"folder_page_size\") * this.options.show_page >\n            this.options.total_items_count + Galaxy.libraries.preferences.get(\"folder_page_size\")\n        ) {\n            items_to_render = [];\n        }\n        Galaxy.libraries.folderToolbarView.renderPaginator(this.options);\n        this.collection.reset(items_to_render);\n    },\n\n    rePaint: function(options) {\n        this.options = _.extend(this.options, options);\n        this.removeAllRows();\n        this.renderAll();\n        this.checkEmptiness();\n    },\n\n    /**\n     * Adds all given models to the collection.\n     * @param {array of Item or FolderAsModel} array of models that should\n     *  be added to the view's collection.\n     */\n    addAll: function(models) {\n        _.each(models, model => {\n            Galaxy.libraries.folderListView.collection.add(model, {\n                current_sort_order: false\n            });\n        });\n        $(\"#center [data-toggle]\").tooltip();\n        this.checkEmptiness();\n        this.postRender();\n    },\n\n    /**\n     * Call this after all models are added to the collection\n     * to ensure that the folder toolbar will show proper options\n     * and that event will be bound on all subviews.\n     */\n    postRender: function() {\n        var fetched_metadata = this.folderContainer.attributes.metadata;\n        fetched_metadata.contains_file_or_folder =\n            typeof this.collection.findWhere({ type: \"file\" }) !== \"undefined\" ||\n            typeof this.collection.findWhere({ type: \"folder\" }) !== \"undefined\";\n        Galaxy.libraries.folderToolbarView.configureElements(fetched_metadata);\n    },\n\n    /**\n     * Iterates this view's collection and calls the render\n     * function for each. Also binds the hover behavior.\n     */\n    renderAll: function() {\n        var self = this;\n        _.each(this.collection.models.reverse(), model => {\n            self.renderOne(model);\n        });\n        this.postRender();\n    },\n\n    /**\n     * Creates a view for the given model and adds it to the folder view.\n     * @param {Item or FolderAsModel} model of the view that will be rendered\n     */\n    renderOne: function(model) {\n        this.options.contains_file_or_folder = true;\n        //if (model.get('type') !== 'folder'){\n        // model.set('readable_size', this.size_to_string(model.get('file_size')));\n        //}\n        model.set(\"folder_id\", this.id);\n        var rowView = new mod_library_folderrow_view.FolderRowView({\n            model: model\n        });\n\n        // save new rowView to cache\n        this.rowViews[model.get(\"id\")] = rowView;\n\n        this.$el.find(\"#first_folder_item\").after(rowView.el);\n    },\n\n    /**\n     * Remove the view of the given model from the DOM.\n     * @param {Item or FolderAsModel} model of the view that will be removed\n     */\n    removeOne: function(model) {\n        this.$el\n            .find(\"tr\")\n            .filter(function() {\n                return $(this).data(\"id\") && $(this).data(\"id\") === model.id;\n            })\n            .remove();\n    },\n\n    /**\n     * Remove all dataset and folder row elements from the DOM.\n     */\n    removeAllRows: function() {\n        $(\".library-row\").remove();\n    },\n\n    /** Checks whether the list is empty and adds/removes the message */\n    checkEmptiness: function() {\n        if (this.$el.find(\".dataset_row\").length === 0 && this.$el.find(\".folder_row\").length === 0) {\n            this.$el.find(\".empty-folder-message\").show();\n        } else {\n            this.$el.find(\".empty-folder-message\").hide();\n        }\n    },\n\n    sortColumnClicked: function(event) {\n        event.preventDefault();\n        this.current_sort_order = this.current_sort_order === \"asc\" ? \"desc\" : \"asc\";\n        this.current_sort_key = event.currentTarget.className.replace(\"sort-folder-\", \"\");\n        this.collection.sortFolder(this.current_sort_key, this.current_sort_order);\n        this.renderSortIcon();\n    },\n\n    /**\n     * User clicked the checkbox in the table heading\n     * @param  {context} event\n     */\n    selectAll: function(event) {\n        var selected = event.target.checked;\n        var self = this;\n        // Iterate each checkbox\n        $(\":checkbox\", \"#folder_list_body\").each(function() {\n            this.checked = selected;\n            var $row = $(this).closest(\"tr\");\n            // Change color of selected/unselected\n            if (selected) {\n                self.makeDarkRow($row);\n            } else {\n                self.makeWhiteRow($row);\n            }\n        });\n    },\n\n    /**\n     * Check checkbox if user clicks on the whole row or\n     *  on the checkbox itself\n     */\n    selectClickedRow: function(event) {\n        var checkbox = \"\";\n        var $row;\n        var source;\n        $row = $(event.target).closest(\"tr\");\n        if (event.target.localName === \"input\") {\n            checkbox = event.target;\n            source = \"input\";\n        } else if (event.target.localName === \"td\") {\n            checkbox = $row.find(\":checkbox\")[0];\n            source = \"td\";\n        }\n        if (checkbox.checked) {\n            if (source === \"td\") {\n                checkbox.checked = \"\";\n                this.makeWhiteRow($row);\n            } else if (source === \"input\") {\n                this.makeDarkRow($row);\n            }\n        } else {\n            if (source === \"td\") {\n                checkbox.checked = \"selected\";\n                this.makeDarkRow($row);\n            } else if (source === \"input\") {\n                this.makeWhiteRow($row);\n            }\n        }\n    },\n\n    makeDarkRow: function($row) {\n        $row.removeClass(\"light\").addClass(\"dark\");\n        $row\n            .find(\"a\")\n            .removeClass(\"light\")\n            .addClass(\"dark\");\n        $row\n            .find(\".fa-file-o\")\n            .removeClass(\"fa-file-o\")\n            .addClass(\"fa-file\");\n        $row\n            .find(\".fa-folder-o\")\n            .removeClass(\"fa-folder-o\")\n            .addClass(\"fa-folder\");\n    },\n\n    makeWhiteRow: function($row) {\n        $row.removeClass(\"dark\").addClass(\"light\");\n        $row\n            .find(\"a\")\n            .removeClass(\"dark\")\n            .addClass(\"light\");\n        $row\n            .find(\".fa-file\")\n            .removeClass(\"fa-file\")\n            .addClass(\"fa-file-o\");\n        $row\n            .find(\".fa-folder\")\n            .removeClass(\"fa-folder\")\n            .addClass(\"fa-folder-o\");\n    },\n\n    renderSortIcon: function() {\n        if (this.current_sort_order === \"asc\") {\n            $('[class*=\"sort-icon\"]')\n                .removeClass(\"fa-sort-alpha-desc\")\n                .removeClass(\"fa-sort-alpha-asc\");\n            $(`.sort-icon-${this.current_sort_key}`).addClass(\"fa-sort-alpha-asc\");\n        } else {\n            $(`.sort-icon-${this.current_sort_key}`).addClass(\"fa-sort-alpha-desc\");\n        }\n    },\n\n    templateFolder: function() {\n        return _.template(\n            [\n                // BREADCRUMBS\n                '<ol class=\"breadcrumb\">',\n                '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>',\n                \"<% _.each(path, function(path_item) { %>\",\n                \"<% if (path_item[0] != id) { %>\",\n                '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ',\n                \"<% } else { %>\",\n                '<li class=\"active\"><span title=\"You are in this folder\"><%- path_item[1] %></span></li>',\n                \"<% } %>\",\n                \"<% }); %>\",\n                \"</ol>\",\n\n                // FOLDER CONTENT\n                '<table data-library-id=\"<%- parent_library_id  %>\" class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th class=\"button_heading\"></th>',\n                '<th style=\"text-align: center; width: 20px; \" title=\"Check to select all datasets\"><input id=\"select-all-checkboxes\" style=\"margin: 0;\" type=\"checkbox\"></th>',\n                '<th><a class=\"sort-folder-name\" title=\"Click to reverse order\" href=\"#\">name</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-name fa fa-sort-alpha-<%- order %>\"></span></th>',\n                '<th style=\"width:20%;\"><a class=\"sort-folder-description\" title=\"Click to reverse order\" href=\"#\">description</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-description fa\"></span></th>',\n                '<th style=\"width:5%;\"><a class=\"sort-folder-file_ext\" title=\"Click to reverse order\" href=\"#\">data type</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-file_ext fa\"></span></th>',\n                '<th style=\"width:10%;\">size</th>',\n                '<th style=\"width:160px;\">time updated (UTC)</th>',\n                '<th style=\"width:5%;\"><a class=\"sort-folder-state\" title=\"Click to reverse order\" href=\"#\">state</a> <span title=\"Sorted alphabetically\" class=\"sort-icon-state fa\"></span></th>',\n                '<th style=\"width:150px;\"></th> ',\n                \"</thead>\",\n                '<tbody id=\"folder_list_body\">',\n                '<tr id=\"first_folder_item\">',\n                \"<td>\",\n                '<a href=\"#<% if (upper_folder_id !== 0){ print(\"folders/\" + upper_folder_id)} %>\" title=\"Go to parent folder\" class=\"btn_open_folder btn btn-default btn-xs\">..<a>',\n                \"</td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"<td></td>\",\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                '<div class=\"empty-folder-message\" style=\"display:none;\">',\n                \"This folder is either empty or you do not have proper access permissions to see the contents. If you expected something to show up\",\n                ' please consult the <a href=\"https://galaxyproject.org/data-libraries/#permissions\" target=\"_blank\">library security wikipage</a>',\n                ' or visit the <a href=\"https://biostar.usegalaxy.org/\" target=\"_blank\">Galaxy support site</a>.',\n                \"</div>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    FolderListView: FolderListView\n};\n"]}