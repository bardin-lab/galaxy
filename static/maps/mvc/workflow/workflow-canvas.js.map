{"version":3,"sources":["mvc/workflow/workflow-canvas.js"],"names":["CanvasManager","app","canvas_viewport","overview","this","cv","cc","find","oc","ov","init_drag","init_copy_paste","ScrollPanel","e","panel","y","$","extend","self","move","x","width","Math","max","prototype","height","top","each","scroll_panel","y_adjust","bind","document","blur","x_adjust","offset","position","activeElement","p","left","o","d","offsetY","offsetX","draw_overview","hasClass","click","removeClass","in_h","o_w","in_w","o_h","new_x_offset","pageX","new_y_offset","pageY","workflow","fit_canvas_to_nodes","addClass","op","offsetParent","opo","new_size","css","_this","addEventListener","window","getSelection","toString","active_node","type","clipboardData","nodeId","id","preventDefault","parse","getData","error","nodes","hasOwnProperty","clone","update_viewport_overlay","cc_pos","canvas_el","c","shift_w","size","parent","cv_w","get","cv_h","shift_h","ceil","attr","strokeStyle","lineWidth","node_element","w","node","fillStyle","errors","element","workflow_outputs","fillRect","strokeRect","undefined","length","h","onmove","clearTimeout","timeout","panel_pos","panel_w","viewport_w","panel_h","viewport_h","viewport","viewport_offset","min_x","min_y","max_x","p_min_y","max_y","p_max_x","p_min_x","close_dist","moved","t","nudge","p_max_y","min","stop","setTimeout","_this2","test"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-canvas.js","sourcesContent":["function CanvasManager(app, canvas_viewport, overview) {\n    this.app = app;\n    this.cv = canvas_viewport;\n    this.cc = this.cv.find(\"#canvas-container\");\n    this.overview = overview;\n    this.oc = overview.find(\"#overview-canvas\");\n    this.ov = overview.find(\"#overview-viewport\");\n    // Make overview box draggable\n    this.init_drag();\n    // Initialize Copy & Paste events\n    this.init_copy_paste();\n}\n$.extend(CanvasManager.prototype, {\n    init_drag: function() {\n        var self = this;\n        var move = (x, y) => {\n            x = Math.min(x, self.cv.width() / 2);\n            x = Math.max(x, -self.cc.width() + self.cv.width() / 2);\n            y = Math.min(y, self.cv.height() / 2);\n            y = Math.max(y, -self.cc.height() + self.cv.height() / 2);\n            self.cc.css({\n                left: x,\n                top: y\n            });\n            self.cv.css({\n                \"background-position-x\": x,\n                \"background-position-y\": y\n            });\n            self.update_viewport_overlay();\n        };\n        // Dragging within canvas background\n        this.cc.each(function() {\n            this.scroll_panel = new ScrollPanel(this);\n        });\n        var x_adjust;\n        var y_adjust;\n        this.cv\n            .bind(\"click\", function() {\n                document.activeElement.blur();\n            })\n            .bind(\"dragstart\", function() {\n                var o = $(this).offset();\n                var p = self.cc.position();\n                y_adjust = p.top - o.top;\n                x_adjust = p.left - o.left;\n            })\n            .bind(\"drag\", (e, d) => {\n                move(d.offsetX + x_adjust, d.offsetY + y_adjust);\n            })\n            .bind(\"dragend\", () => {\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            });\n        this.overview.click(e => {\n            if (self.overview.hasClass(\"blockaclick\")) {\n                self.overview.removeClass(\"blockaclick\");\n            } else {\n                var in_w = self.cc.width();\n                var in_h = self.cc.height();\n                var o_w = self.oc.width();\n                var o_h = self.oc.height();\n\n                var new_x_offset = e.pageX - self.oc.offset().left - self.ov.width() / 2;\n\n                var new_y_offset = e.pageY - self.oc.offset().top - self.ov.height() / 2;\n\n                move(-(new_x_offset / o_w * in_w), -(new_y_offset / o_h * in_h));\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            }\n        });\n        // Dragging for overview pane\n        this.ov\n            .bind(\"drag\", (e, d) => {\n                var in_w = self.cc.width();\n                var in_h = self.cc.height();\n                var o_w = self.oc.width();\n                var o_h = self.oc.height();\n                var new_x_offset = d.offsetX - self.overview.offset().left;\n                var new_y_offset = d.offsetY - self.overview.offset().top;\n                move(-(new_x_offset / o_w * in_w), -(new_y_offset / o_h * in_h));\n            })\n            .bind(\"dragend\", () => {\n                self.overview.addClass(\"blockaclick\");\n                self.app.workflow.fit_canvas_to_nodes();\n                self.draw_overview();\n            });\n        // Dragging for overview border (resize)\n        $(\"#overview-border\").bind(\"drag\", function(e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(op.width() - (d.offsetX - opo.left), op.height() - (d.offsetY - opo.top));\n            $(this).css({\n                width: new_size,\n                height: new_size\n            });\n            self.draw_overview();\n        });\n\n        /*  Disable dragging for child element of the panel so that resizing can\n                only be done by dragging the borders */\n        $(\"#overview-border div\").bind(\"drag\", () => {});\n    },\n    init_copy_paste: function() {\n        document.addEventListener(\"copy\", e => {\n            // If it appears that the user is trying to copy/paste text, we\n            // pass that through.\n            if (window.getSelection().toString() === \"\") {\n                if (this.app.workflow.active_node && this.app.workflow.active_node.type !== \"subworkflow\") {\n                    e.clipboardData.setData(\n                        \"application/json\",\n                        JSON.stringify({\n                            nodeId: this.app.workflow.active_node.id\n                        })\n                    );\n                }\n                e.preventDefault();\n            }\n        });\n\n        document.addEventListener(\"paste\", e => {\n            // If it appears that the user is trying to paste into a text box,\n            // pass that through and skip the workflow copy/paste logic.\n            if (\n                document.activeElement &&\n                document.activeElement.type !== \"textarea\" &&\n                document.activeElement.type !== \"text\"\n            ) {\n                var nodeId;\n                try {\n                    nodeId = JSON.parse(e.clipboardData.getData(\"application/json\")).nodeId;\n                } catch (error) {}\n                if (nodeId && this.app.workflow.nodes.hasOwnProperty(nodeId)) {\n                    this.app.workflow.nodes[nodeId].clone();\n                }\n                e.preventDefault();\n            }\n        });\n    },\n    update_viewport_overlay: function() {\n        var cc = this.cc;\n        var cv = this.cv;\n        var oc = this.oc;\n        var ov = this.ov;\n        var in_w = cc.width();\n        var in_h = cc.height();\n        var o_w = oc.width();\n        var o_h = oc.height();\n        var cc_pos = cc.position();\n        ov.css({\n            left: -(cc_pos.left / in_w * o_w),\n            top: -(cc_pos.top / in_h * o_h),\n            // Subtract 2 to account for borders (maybe just change box sizing style instead?)\n            width: cv.width() / in_w * o_w - 2,\n            height: cv.height() / in_h * o_h - 2\n        });\n    },\n    draw_overview: function() {\n        var canvas_el = $(\"#overview-canvas\");\n\n        var size = canvas_el\n            .parent()\n            .parent()\n            .width();\n\n        var c = canvas_el.get(0).getContext(\"2d\");\n        var in_w = $(\"#canvas-container\").width();\n        var in_h = $(\"#canvas-container\").height();\n        var o_h;\n        var shift_h;\n        var o_w;\n        var shift_w;\n        // Fit canvas into overview area\n        var cv_w = this.cv.width();\n        var cv_h = this.cv.height();\n        if (in_w < cv_w && in_h < cv_h) {\n            // Canvas is smaller than viewport\n            o_w = in_w / cv_w * size;\n            shift_w = (size - o_w) / 2;\n            o_h = in_h / cv_h * size;\n            shift_h = (size - o_h) / 2;\n        } else if (in_w < in_h) {\n            // Taller than wide\n            shift_h = 0;\n            o_h = size;\n            o_w = Math.ceil(o_h * in_w / in_h);\n            shift_w = (size - o_w) / 2;\n        } else {\n            // Wider than tall\n            o_w = size;\n            shift_w = 0;\n            o_h = Math.ceil(o_w * in_h / in_w);\n            shift_h = (size - o_h) / 2;\n        }\n        canvas_el.parent().css({\n            left: shift_w,\n            top: shift_h,\n            width: o_w,\n            height: o_h\n        });\n        canvas_el.attr(\"width\", o_w);\n        canvas_el.attr(\"height\", o_h);\n        // Draw overview\n        $.each(this.app.workflow.nodes, (id, node) => {\n            c.fillStyle = \"#D2C099\";\n            c.strokeStyle = \"#D8B365\";\n            c.lineWidth = 1;\n            var node_element = $(node.element);\n            var position = node_element.position();\n            var x = position.left / in_w * o_w;\n            var y = position.top / in_h * o_h;\n            var w = node_element.width() / in_w * o_w;\n            var h = node_element.height() / in_h * o_h;\n            if (node.errors) {\n                c.fillStyle = \"#FFCCCC\";\n                c.strokeStyle = \"#AA6666\";\n            } else if (node.workflow_outputs !== undefined && node.workflow_outputs.length > 0) {\n                c.fillStyle = \"#E8A92D\";\n                c.strokeStyle = \"#E8A92D\";\n            }\n            c.fillRect(x, y, w, h);\n            c.strokeRect(x, y, w, h);\n        });\n        this.update_viewport_overlay();\n    }\n});\n\n// FIXME: merge scroll panel into CanvasManager, clean up hardcoded stuff.\nfunction ScrollPanel(panel) {\n    this.panel = panel;\n}\n$.extend(ScrollPanel.prototype, {\n    test: function(e, onmove) {\n        clearTimeout(this.timeout);\n        var x = e.pageX;\n        var y = e.pageY;\n\n        var // Panel size and position\n        panel = $(this.panel);\n\n        var panel_pos = panel.position();\n        var panel_w = panel.width();\n        var panel_h = panel.height();\n\n        var // Viewport size and offset\n        viewport = panel.parent();\n\n        var viewport_w = viewport.width();\n        var viewport_h = viewport.height();\n        var viewport_offset = viewport.offset();\n\n        var // Edges of viewport (in page coordinates)\n        min_x = viewport_offset.left;\n\n        var min_y = viewport_offset.top;\n        var max_x = min_x + viewport.width();\n        var max_y = min_y + viewport.height();\n\n        var // Legal panel range\n        p_min_x = -(panel_w - viewport_w / 2);\n\n        var p_min_y = -(panel_h - viewport_h / 2);\n        var p_max_x = viewport_w / 2;\n        var p_max_y = viewport_h / 2;\n\n        var // Did the panel move?\n        moved = false;\n\n        var // Constants\n        close_dist = 5;\n\n        var nudge = 23;\n        var t = 0;\n        if (x - close_dist < min_x) {\n            if (panel_pos.left < p_max_x) {\n                t = Math.min(nudge, p_max_x - panel_pos.left);\n                panel.css(\"left\", panel_pos.left + t);\n                moved = true;\n            }\n        } else if (x + close_dist > max_x) {\n            if (panel_pos.left > p_min_x) {\n                t = Math.min(nudge, panel_pos.left - p_min_x);\n                panel.css(\"left\", panel_pos.left - t);\n                moved = true;\n            }\n        } else if (y - close_dist < min_y) {\n            if (panel_pos.top < p_max_y) {\n                t = Math.min(nudge, p_max_y - panel_pos.top);\n                panel.css(\"top\", panel_pos.top + t);\n                moved = true;\n            }\n        } else if (y + close_dist > max_y) {\n            if (panel_pos.top > p_min_y) {\n                t = Math.min(nudge, panel_pos.top - p_min_x);\n                panel.css(\"top\", `${panel_pos.top - t}px`);\n                moved = true;\n            }\n        }\n        if (moved) {\n            // Keep moving even if mouse doesn't move\n            onmove();\n            this.timeout = setTimeout(() => {\n                this.test(e, onmove);\n            }, 50);\n        }\n    },\n    stop: function() {\n        clearTimeout(this.timeout);\n    }\n});\nexport default CanvasManager;\n"]}