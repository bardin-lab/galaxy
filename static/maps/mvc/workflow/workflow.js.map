{"version":3,"sources":["mvc/workflow/workflow.js"],"names":["mod_toastr","WorkflowItemView","Backbone","View","extend","tagName","initialize","_","bindAll","this","options","timeOut","events","click #show-in-tool-panel","click #delete-workflow","click #rename-workflow","click #copy-workflow","render","$","el","html","_rowTemplate","showInToolPanel","model","save","show_in_tool_panel","get","success","root","removeWorkflow","window","confirm","wfName","destroy","remove","renameWorkflow","newName","prompt","oldName","getJSON","urlRoot","id","wfJson","currentOwner","_this","Galaxy","user","attributes","username","wait","error","resp","errorThrown","jqXHR","textStatus","responseJSON","err_msg","show","checkboxHtml","wfId","at","escape","_templateActions","renderTagEditor","TagEditor","_tag2","default","find","workflow_mode","trHtml","TagsEditor","toggle","WorkflowListView","setElement","collection","_workflowModel2","WorkflowCollection","fetch","done","bind","appendItem","on","dragover","ev","preventDefault","addClass","unhighlightDropZone","removeClass","drop","e","f","files","dataTransfer","i","readWorkflowFiles","reader","FileReader","onload","wf_json","JSON","parse","result","name","create","readAsText","_showArgErrors","once","msg_text","msg_status","info","_this3","header","_templateHeader","templateActions","_templateActionButtons","tableTemplate","_templateWorkflowTable","$el","item","confirmDelete","searchWorkflow","minQueryLength","adjustActiondropdown","workflowItemView","append","workflow","$el_shared_wf_link","$el_searchinput","$el_tabletr","min_querylen","val","query","length","regular_expression","RegExp","test","text","css","_templateNoWorkflow","tableHtml","_localization2","_mainTemplate","ImportWorkflowView","_this4","empty","url","myexperiment_target_url"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow.js","sourcesContent":["/** Workflow view */\nimport * as mod_toastr from \"libs/toastr\";\nimport TAGS from \"mvc/tag\";\nimport WORKFLOWS from \"mvc/workflow/workflow-model\";\nimport QueryStringParsing from \"utils/query-string-parsing\";\nimport _l from \"utils/localization\";\n/** View of the individual workflows */\nconst WorkflowItemView = Backbone.View.extend({\n    tagName: \"tr\", // name of (orphan) root tag in this.el\n    initialize: function() {\n        _.bindAll(\n            this,\n            \"render\",\n            \"_rowTemplate\",\n            \"renderTagEditor\",\n            \"_templateActions\",\n            \"removeWorkflow\",\n            \"copyWorkflow\"\n        ); // every function that uses 'this' as the current object should be in here\n        mod_toastr.options.timeOut = 1500;\n    },\n\n    events: {\n        \"click #show-in-tool-panel\": \"showInToolPanel\",\n        \"click #delete-workflow\": \"removeWorkflow\",\n        \"click #rename-workflow\": \"renameWorkflow\",\n        \"click #copy-workflow\": \"copyWorkflow\"\n    },\n\n    render: function() {\n        $(this.el).html(this._rowTemplate());\n        return this;\n    },\n\n    showInToolPanel: function() {\n        // This reloads the whole page, so that the workflow appears in the tool panel.\n        // Ideally we would notify only the tool panel of a change\n        this.model.save(\n            { show_in_tool_panel: !this.model.get(\"show_in_tool_panel\") },\n            {\n                success: function() {\n                    window.location = `${Galaxy.root}workflows/list`;\n                }\n            }\n        );\n    },\n\n    removeWorkflow: function() {\n        const wfName = this.model.get(\"name\");\n        if (window.confirm(`Are you sure you want to delete workflow '${wfName}'?`)) {\n            this.model.destroy({\n                success: function() {\n                    mod_toastr.success(`Successfully deleted workflow '${wfName}'`);\n                }\n            });\n            this.remove();\n        }\n    },\n\n    renameWorkflow: function() {\n        const oldName = this.model.get(\"name\");\n        const newName = window.prompt(`Enter a new Name for workflow '${oldName}'`, oldName);\n        if (newName) {\n            this.model.save(\n                { name: newName },\n                {\n                    success: function() {\n                        mod_toastr.success(`Successfully renamed workflow '${oldName}' to '${newName}'`);\n                    }\n                }\n            );\n            this.render();\n        }\n    },\n\n    copyWorkflow: function() {\n        const oldName = this.model.get(\"name\");\n        $.getJSON(`${this.model.urlRoot}/${this.model.id}/download`, wfJson => {\n            let newName = `Copy of ${oldName}`;\n            const currentOwner = this.model.get(\"owner\");\n            if (currentOwner != Galaxy.user.attributes.username) {\n                newName += ` shared by user ${currentOwner}`;\n            }\n            wfJson.name = newName;\n            this.collection.create(wfJson, {\n                at: 0,\n                wait: true,\n                success: function() {\n                    mod_toastr.success(`Successfully copied workflow '${oldName}' to '${newName}'`);\n                },\n                error: function(model, resp, options) {\n                    // signature seems to have changed over the course of backbone dev\n                    // see https://github.com/jashkenas/backbone/issues/2606#issuecomment-19289483\n                    mod_toastr.error(options.errorThrown);\n                }\n            });\n        }).error((jqXHR, textStatus, errorThrown) => {\n            mod_toastr.error(jqXHR.responseJSON.err_msg);\n        });\n    },\n\n    _rowTemplate: function() {\n        let show = this.model.get(\"show_in_tool_panel\");\n        let wfId = this.model.id;\n        const checkboxHtml = `<input id=\"show-in-tool-panel\" type=\"checkbox\" class=\"show-in-tool-panel\" ${\n            show ? `checked=\"${show}\"` : \"\"\n        } value=\"${wfId}\">`;\n        const trHtml = `<td><div class=\"dropdown\"><button class=\"menubutton\" type=\"button\" data-toggle=\"dropdown\">${_.escape(\n            this.model.get(\"name\")\n        )}<span class=\"caret\"></span></button>${this._templateActions()}</div></td><td><span><div class=\"${wfId} tags-display\"></div></td><td>${\n            this.model.get(\"owner\") === Galaxy.user.attributes.username ? \"You\" : this.model.get(\"owner\")\n        }</span></td><td>${this.model.get(\"number_of_steps\")}</td><td>${\n            this.model.get(\"published\") ? \"Yes\" : \"No\"\n        }</td><td>${checkboxHtml}</td>`;\n        return trHtml;\n    },\n\n    renderTagEditor: function() {\n        const TagEditor = new TAGS.TagsEditor({\n            model: this.model,\n            el: $.find(`.${this.model.id}.tags-display`),\n            workflow_mode: true\n        });\n        TagEditor.toggle(true);\n        TagEditor.render();\n    },\n\n    /** Template for user actions for workflows */\n    _templateActions: function() {\n        if (this.model.get(\"owner\") === Galaxy.user.attributes.username) {\n            return `<ul class=\"dropdown-menu action-dpd\"><li><a href=\"${Galaxy.root}workflow/editor?id=${\n                this.model.id\n            }\">Edit</a></li><li><a href=\"${Galaxy.root}workflows/run?id=${this.model.id}\">Run</a></li><li><a href=\"${\n                Galaxy.root\n            }workflow/sharing?id=${this.model.id}\">Share</a></li><li><a href=\"${Galaxy.root}api/workflows/${\n                this.model.id\n            }/download?format=json-download\">Download</a></li><li><a id=\"copy-workflow\" style=\"cursor: pointer;\">Copy</a></li><li><a id=\"rename-workflow\" style=\"cursor: pointer;\">Rename</a></li><li><a href=\"${\n                Galaxy.root\n            }workflow/display_by_id?id=${\n                this.model.id\n            }\">View</a></li><li><a id=\"delete-workflow\" style=\"cursor: pointer;\">Delete</a></li></ul>`;\n        } else {\n            return `<ul class=\"dropdown-menu action-dpd\"><li><a href=\"${\n                Galaxy.root\n            }workflow/display_by_username_and_slug?username=${this.model.get(\"owner\")}&slug=${this.model.get(\n                \"slug\"\n            )}\">View</a></li><li><a href=\"${Galaxy.root}workflows/run?id=${\n                this.model.id\n            }\">Run</a></li><li><a id=\"copy-workflow\" style=\"cursor: pointer;\">Copy</a></li><li><a class=\"link-confirm-shared-${\n                this.model.id\n            }\" href=\"${Galaxy.root}workflow/sharing?unshare_me=True&id=${this.model.id}\">Remove</a></li></ul>`;\n        }\n    }\n});\n\n/** View of the main workflow list page */\nconst WorkflowListView = Backbone.View.extend({\n    title: _l(\"Workflows\"),\n    initialize: function() {\n        this.setElement(\"<div/>\");\n        _.bindAll(this, \"adjustActiondropdown\");\n        this.collection = new WORKFLOWS.WorkflowCollection();\n        this.collection.fetch().done(this.render());\n        this.collection.bind(\"add\", this.appendItem);\n        this.collection.on(\"sync\", this.render, this);\n    },\n\n    events: {\n        dragleave: \"unhighlightDropZone\",\n        drop: \"drop\",\n        dragover: function(ev) {\n            $(\".hidden_description_layer\").addClass(\"dragover\");\n            $(\".menubutton\").addClass(\"background-none\");\n            ev.preventDefault();\n        }\n    },\n\n    unhighlightDropZone: function() {\n        $(\".hidden_description_layer\").removeClass(\"dragover\");\n        $(\".menubutton\").removeClass(\"background-none\");\n    },\n\n    drop: function(e) {\n        // TODO: check that file is valid galaxy workflow\n        this.unhighlightDropZone();\n        e.preventDefault();\n        const files = e.dataTransfer.files;\n        for (let i = 0, f; (f = files[i]); i++) {\n            this.readWorkflowFiles(f);\n        }\n    },\n\n    readWorkflowFiles: function(f) {\n        const reader = new FileReader();\n        reader.onload = theFile => {\n            let wf_json;\n            try {\n                wf_json = JSON.parse(reader.result);\n            } catch (e) {\n                mod_toastr.error(`Could not read file '${f.name}'. Verify it is a valid Galaxy workflow`);\n                wf_json = null;\n            }\n            if (wf_json) {\n                this.collection.create(wf_json, {\n                    at: 0,\n                    wait: true,\n                    success: function() {\n                        mod_toastr.success(`Successfully imported workflow '${wf_json.name}'`);\n                    },\n                    error: function(model, resp, options) {\n                        mod_toastr.error(options.errorThrown);\n                    }\n                });\n            }\n        };\n        reader.readAsText(f, \"utf-8\");\n    },\n\n    _showArgErrors: _.once(() => {\n        // Parse args out of params, display if there's a message.\n        const msg_text = QueryStringParsing.get(\"message\");\n        const msg_status = QueryStringParsing.get(\"status\");\n        if (msg_status === \"error\") {\n            mod_toastr.error(_.escape(msg_text || \"Unknown Error, please report this to an administrator.\"));\n        } else if (msg_text) {\n            mod_toastr.info(_.escape(msg_text));\n        }\n    }),\n\n    render: function() {\n        // Add workflow header\n        const header = this._templateHeader();\n        // Add the actions buttons\n        const templateActions = this._templateActionButtons();\n        const tableTemplate = this._templateWorkflowTable();\n        this.$el.html(header + templateActions + tableTemplate);\n        _(this.collection.models).each(item => {\n            // in case collection is not empty\n            this.appendItem(item);\n            this.confirmDelete(item);\n        }, this);\n        const minQueryLength = 3;\n        this.searchWorkflow(this.$(\".search-wf\"), this.$(\".workflow-search tr\"), minQueryLength);\n        this.adjustActiondropdown();\n        this._showArgErrors();\n        return this;\n    },\n\n    appendItem: function(item) {\n        const workflowItemView = new WorkflowItemView({\n            model: item,\n            collection: this.collection\n        });\n        $(\".workflow-search\").append(workflowItemView.render().el);\n        workflowItemView.renderTagEditor();\n    },\n\n    /** Add confirm box before removing/unsharing workflow */\n    confirmDelete: function(workflow) {\n        const $el_shared_wf_link = this.$(`.link-confirm-shared-${workflow.id}`);\n        $el_shared_wf_link.click(() =>\n            window.confirm(`Are you sure you want to remove the shared workflow '${workflow.attributes.name}'?`)\n        );\n    },\n\n    /** Implement client side workflow search/filtering */\n    searchWorkflow: function($el_searchinput, $el_tabletr, min_querylen) {\n        $el_searchinput.on(\"keyup\", function() {\n            const query = $(this).val();\n            // Filter when query is at least 3 characters\n            // otherwise show all rows\n            if (query.length >= min_querylen) {\n                // Ignore the query's case using 'i'\n                const regular_expression = new RegExp(query, \"i\");\n                $el_tabletr.hide();\n                $el_tabletr\n                    .filter(function() {\n                        // Apply regular expression on each row's text\n                        // and show when there is a match\n                        return regular_expression.test($(this).text());\n                    })\n                    .show();\n            } else {\n                $el_tabletr.show();\n            }\n        });\n    },\n\n    /** Ajust the position of dropdown with respect to table */\n    adjustActiondropdown: function() {\n        $(this.el).on(\"show.bs.dropdown\", function() {\n            $(this.el).css(\"overflow\", \"inherit\");\n        });\n        $(this.el).on(\"hide.bs.dropdown\", function() {\n            $(this.el).css(\"overflow\", \"auto\");\n        });\n    },\n\n    /** Template for no workflow */\n    _templateNoWorkflow: function() {\n        return '<div class=\"wf-nodata\"> You have no workflows. </div>';\n    },\n\n    /** Template for actions buttons */\n    _templateActionButtons: function() {\n        return `<ul class=\"manage-table-actions\"><li><input class=\"search-wf form-control\" type=\"text\" autocomplete=\"off\" placeholder=\"search for workflow...\"></li><li><a class=\"action-button fa fa-plus wf-action\" id=\"new-workflow\" title=\"Create new workflow\" href=\"${\n            Galaxy.root\n        }workflows/create\"></a></li><li><a class=\"action-button fa fa-upload wf-action\" id=\"import-workflow\" title=\"Upload or import workflow\" href=\"${\n            Galaxy.root\n        }workflows/import_workflow\"></a></li></ul>`;\n    },\n\n    /** Template for workflow table */\n    _templateWorkflowTable: function() {\n        const tableHtml =\n            '<table class=\"table colored\"><thead>' +\n            '<tr class=\"header\">' +\n            \"<th>Name</th>\" +\n            \"<th>Tags</th>\" +\n            \"<th>Owner</th>\" +\n            \"<th># of Steps</th>\" +\n            \"<th>Published</th>\" +\n            \"<th>Show in tools panel</th>\" +\n            \"</tr></thead>\";\n        return `${tableHtml}<tbody class=\"workflow-search \"><div class=\"hidden_description_layer\"><p>Drop workflow files here to import</p></tbody></table></div>`;\n    },\n\n    /** Main template */\n    _templateHeader: function() {\n        return (\n            '<div class=\"page-container\">' +\n            '<div class=\"user-workflows wf\">' +\n            '<div class=\"response-message\"></div>' +\n            \"<h2>\" +\n            _l(\"Your workflows\") +\n            \"</h2>\" +\n            \"</div>\" +\n            \"</div>\"\n        );\n    }\n});\n\nconst ImportWorkflowView = Backbone.View.extend({\n    initialize: function() {\n        this.setElement(\"<div/>\");\n        this.render();\n    },\n\n    /** Open page to import workflow */\n    render: function() {\n        $.getJSON(`${Galaxy.root}workflow/upload_import_workflow`, options => {\n            this.$el.empty().append(this._mainTemplate(options));\n        });\n    },\n\n    /** Template for the import workflow page */\n    _mainTemplate: function(options) {\n        return `<div class='toolForm'><div class='toolFormTitle'>Import Galaxy workflow</div><div class='toolFormBody'><form name='import_workflow' id='import_workflow' action='${\n            Galaxy.root\n        }workflow/upload_import_workflow' enctype='multipart/form-data' method='POST'><div class='form-row'><label>Galaxy workflow URL:</label><input type='text' name='url' class='input-url' value='${\n            options.url\n        }' size='40'><div class='toolParamHelp' style='clear: both;'>If the workflow is accessible via a URL, enter the URL above and click <b>Import</b>.</div><div style='clear: both'></div></div><div class='form-row'><label>Galaxy workflow file:</label><div class='form-row-input'><input type='file' name='file_data' class='input-file'/></div><div class='toolParamHelp' style='clear: both;'>If the workflow is in a file on your computer, choose it and then click <b>Import</b>.</div><div style='clear: both'></div></div><div class='form-row'><input type='submit' class='primary-button wf-import' name='import_button' value='Import'></div></form><hr/><div class='form-row'><label>Import a Galaxy workflow from myExperiment:</label><div class='form-row-input'><a href='${\n            options.myexperiment_target_url\n        }'> Visit myExperiment</a></div><div class='toolParamHelp' style='clear: both;'>Click the link above to visit myExperiment and browse for Galaxy workflows.</div><div style='clear: both'></div></div></div></div>`;\n    }\n});\n\nexport default {\n    View: WorkflowListView,\n    ImportWorkflowView: ImportWorkflowView\n};\n"]}