{"version":3,"sources":["mvc/workflow/workflow-view.js"],"names":["reset_tool_search","initValue","tool_menu_frame","$","contents","length","document","this","removeClass","find","hide","show","each","attr","hasClass","val","add_node_icon","$to_el","nodeType","iconStyle","_workflowIcons2","default","window","workflow_globals","$icon","addClass","before","show_overview","hide_overview","css","jStorage","set","self","workflow","app","options","urls","save_current_workflow","success_callback","check_changes_in_active_form","has_changes","initialize","rectify_workflow_outputs","_utils2","url","Galaxy","id","type","close_editor","do_close","onbeforeunload","location","data","errors","i","v","show_modal","hide_modal","appendTo","errlist","body","append","name","stored","showWorkflowParameters","show_message","error","response","err_msg","Ok","click","select","timer","clearTimeout","setTimeout","q","s","map","n","index","parent","tool_search","this_label","next","no_visible_tools","is","lastValue","value","canvas_manager","_workflowCanvas2","datatypes","JSON","parse","ajax","root","async","responseText","datatypes_mapping","ext_to_type","ext_to_class_name","type_to_type","_workflowLoadAjax","success","reset","from_simple","fit_canvas_to_nodes","scroll_to_nodes","step","_","upgrade_messages","step_id","m","upgrade_message","details","parseInt","Continue","beforeSubmit","make_popupmenu","Save","Save As","rename_annotation","workflow_name","rename_name","workflow_annotation","workflow_data","workflow_save_as","done","undefined","fail","edit_workflow_outputs","clear_active_node","Cancel","Run","Edit Attributes","Auto Re-layout","layout","Close","Save Changes","workflow_index","overview_size","get","bind","width","op","height","opo","e","d","offsetParent","offset","new_size","Math","max","offsetX","left","offsetY","top","slideUp","last_expanded","_buildToolPanelWorkflows","wrap","slideDown","icon","rename_async","onclick","title","buttons","Copy","$section","workflows","copy_into_workflow","_uiMisc2","ButtonIcon","_localization2","vv","step_count","modal","$add","html","on","add_node_for_subworkflow","latest_id","copy","$el","workflowId","k","nodes","dataType","node","init_field_data","update_field_data","add_node_for_tool","remove_all","tool_id","cc","cv","_moduleInitAjax","content_id","add_node_for_module","display_file_list","addlist","load_workflow","out_terminal","output_terminals","cache","request_data","parameter_re","request","wf_parm_container","wf_parm_box","new_parameter_content","matches","activate_node","create_node","workflow_parameters","showAttributes","showForm","content","config_form","inputs","cls","deepeach","$container","match","concat","form_matches","post_job_actions","pja","form_type","action_arguments","action_argument","arg_matches","debug","element","inArray","push","prebuildNode","substring","$f","tmp","clone","destroy","o","p","form","prependTo","scrollTop","node_changed","child","title_text","$title","x","y","scrollLeft","_workflowNode2","position","draw_overview","po","terminal","redraw"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view.js","sourcesContent":["import _l from \"utils/localization\";\nimport Utils from \"utils/utils\";\nimport Workflow from \"mvc/workflow/workflow-manager\";\nimport WorkflowCanvas from \"mvc/workflow/workflow-canvas\";\nimport Node from \"mvc/workflow/workflow-node\";\nimport WorkflowIcons from \"mvc/workflow/workflow-icons\";\nimport FormWrappers from \"mvc/workflow/workflow-forms\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport async_save_text from \"utils/async-save-text\";\nimport * as Toastr from \"libs/toastr\";\nimport \"ui/editable-text\";\n\n// TODO; tie into Galaxy state?\nwindow.workflow_globals = window.workflow_globals || {};\n\n// Reset tool search to start state.\nfunction reset_tool_search(initValue) {\n    // Function may be called in top frame or in tool_menu_frame;\n    // in either case, get the tool menu frame.\n    var tool_menu_frame = $(\"#galaxy_tools\").contents();\n    if (tool_menu_frame.length === 0) {\n        tool_menu_frame = $(document);\n        // Remove classes that indicate searching is active.\n        $(this).removeClass(\"search_active\");\n        tool_menu_frame.find(\".toolTitle\").removeClass(\"search_match\");\n\n        // Reset visibility of tools and labels.\n        tool_menu_frame.find(\".toolSectionBody\").hide();\n        tool_menu_frame.find(\".toolTitle\").show();\n        tool_menu_frame.find(\".toolPanelLabel\").show();\n        tool_menu_frame.find(\".toolSectionWrapper\").each(function() {\n            if ($(this).attr(\"id\") !== \"recently_used_wrapper\") {\n                // Default action.\n                $(this).show();\n            } else if ($(this).hasClass(\"user_pref_visible\")) {\n                $(this).show();\n            }\n        });\n        tool_menu_frame.find(\"#search-no-results\").hide();\n\n        // Reset search input.\n        tool_menu_frame.find(\"#search-spinner\").hide();\n        if (initValue) {\n            var search_input = tool_menu_frame.find(\"#tool-search-query\");\n            search_input.val(\"search tools\");\n        }\n    }\n}\n\nfunction add_node_icon($to_el, nodeType) {\n    var iconStyle = WorkflowIcons[nodeType];\n    if (iconStyle) {\n        var $icon = $('<i class=\"icon fa\">&nbsp;</i>').addClass(iconStyle);\n        $to_el.before($icon);\n    }\n}\n\n// create form view\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        var self = (window.workflow_globals.app = this);\n        this.options = options;\n        this.urls = (options && options.urls) || {};\n        var close_editor = () => {\n            self.workflow.check_changes_in_active_form();\n            if (workflow && self.workflow.has_changes) {\n                var do_close = () => {\n                    window.onbeforeunload = undefined;\n                    window.document.location = self.urls.workflow_index;\n                };\n                window.show_modal(\n                    \"Close workflow editor\",\n                    \"There are unsaved changes to your workflow which will be lost.\",\n                    {\n                        Cancel: hide_modal,\n                        \"Save Changes\": function() {\n                            save_current_workflow(null, do_close);\n                        }\n                    },\n                    {\n                        \"Don't Save\": do_close\n                    }\n                );\n            } else {\n                window.document.location = self.urls.workflow_index;\n            }\n        };\n        var save_current_workflow = (eventObj, success_callback) => {\n            show_message(\"Saving workflow\", \"progress\");\n            self.workflow.check_changes_in_active_form();\n            if (!self.workflow.has_changes) {\n                hide_modal();\n                if (success_callback) {\n                    success_callback();\n                }\n                return;\n            }\n            self.workflow.rectify_workflow_outputs();\n            Utils.request({\n                url: `${Galaxy.root}api/workflows/${self.options.id}`,\n                type: \"PUT\",\n                data: { workflow: self.workflow.to_simple() },\n                success: function(data) {\n                    var body = $(\"<div/>\").text(data.message);\n                    if (data.errors) {\n                        body.addClass(\"warningmark\");\n                        var errlist = $(\"<ul/>\");\n                        $.each(data.errors, (i, v) => {\n                            $(\"<li/>\")\n                                .text(v)\n                                .appendTo(errlist);\n                        });\n                        body.append(errlist);\n                    } else {\n                        body.addClass(\"donemark\");\n                    }\n                    self.workflow.name = data.name;\n                    self.workflow.has_changes = false;\n                    self.workflow.stored = true;\n                    self.showWorkflowParameters();\n                    if (data.errors) {\n                        window.show_modal(\"Saving workflow\", body, {\n                            Ok: hide_modal\n                        });\n                    } else {\n                        success_callback && success_callback();\n                        hide_modal();\n                    }\n                },\n                error: function(response) {\n                    window.show_modal(\"Saving workflow failed.\", response.err_msg, { Ok: hide_modal });\n                }\n            });\n        };\n\n        // Init searching.\n        $(\"#tool-search-query\")\n            .click(function() {\n                $(this).focus();\n                $(this).select();\n            })\n            .keyup(function() {\n                // Remove italics.\n                $(this).css(\"font-style\", \"normal\");\n                // Don't update if same value as last time\n                if (this.value.length < 3) {\n                    reset_tool_search(false);\n                } else if (this.value != this.lastValue) {\n                    // Add class to denote that searching is active.\n                    $(this).addClass(\"search_active\");\n                    // input.addClass(config.loadingClass);\n                    // Add '*' to facilitate partial matching.\n                    var q = this.value;\n                    // Stop previous ajax-request\n                    if (this.timer) {\n                        clearTimeout(this.timer);\n                    }\n                    // Start a new ajax-request in X ms\n                    $(\"#search-spinner\").show();\n                    this.timer = setTimeout(() => {\n                        $.get(\n                            self.urls.tool_search,\n                            { q: q },\n                            data => {\n                                // input.removeClass(config.loadingClass);\n                                // Show live-search if results and search-term aren't empty\n                                $(\"#search-no-results\").hide();\n                                // Hide all tool sections.\n                                $(\".toolSectionWrapper\").hide();\n                                // This hides all tools but not workflows link (which is in a .toolTitle div).\n                                $(\".toolSectionWrapper\")\n                                    .find(\".toolTitle\")\n                                    .hide();\n                                if (data.length != 0) {\n                                    // Map tool ids to element ids and join them.\n                                    var s = $.map(data, (n, i) => `link-${n}`);\n                                    // First pass to show matching tools and their parents.\n                                    $(s).each((index, id) => {\n                                        // Add class to denote match.\n                                        $(`[id='${id}']`)\n                                            .parent()\n                                            .addClass(\"search_match\");\n                                        $(`[id='${id}']`)\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .parent()\n                                            .show()\n                                            .parent()\n                                            .show();\n                                    });\n                                    // Hide labels that have no visible children.\n                                    $(\".toolPanelLabel\").each(function() {\n                                        var this_label = $(this);\n                                        var next = this_label.next();\n                                        var no_visible_tools = true;\n                                        // Look through tools following label and, if none are visible, hide label.\n                                        while (next.length !== 0 && next.hasClass(\"toolTitle\")) {\n                                            if (next.is(\":visible\")) {\n                                                no_visible_tools = false;\n                                                break;\n                                            } else {\n                                                next = next.next();\n                                            }\n                                        }\n                                        if (no_visible_tools) {\n                                            this_label.hide();\n                                        }\n                                    });\n                                } else {\n                                    $(\"#search-no-results\").show();\n                                }\n                                $(\"#search-spinner\").hide();\n                            },\n                            \"json\"\n                        );\n                    }, 400);\n                }\n                this.lastValue = this.value;\n            });\n\n        // Canvas overview management\n        this.canvas_manager = window.workflow_globals.canvas_manager = new WorkflowCanvas(\n            this,\n            $(\"#canvas-viewport\"),\n            $(\"#overview\")\n        );\n\n        // Initialize workflow state\n        this.reset();\n\n        // get available datatypes for post job action options\n        this.datatypes = JSON.parse(\n            $.ajax({\n                url: `${Galaxy.root}api/datatypes`,\n                async: false\n            }).responseText\n        );\n\n        // get datatype mapping options\n        this.datatypes_mapping = JSON.parse(\n            $.ajax({\n                url: `${Galaxy.root}api/datatypes/mapping`,\n                async: false\n            }).responseText\n        );\n\n        // set mapping sub lists\n        this.ext_to_type = this.datatypes_mapping.ext_to_class_name;\n        this.type_to_type = this.datatypes_mapping.class_to_classes;\n\n        // Load workflow definition\n        this._workflowLoadAjax(self.options.id, {\n            success: function(data) {\n                self.reset();\n                self.workflow.from_simple(data, true);\n                self.workflow.has_changes = false;\n                self.workflow.fit_canvas_to_nodes();\n                self.scroll_to_nodes();\n                self.canvas_manager.draw_overview();\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                _.each(data.steps, (step, step_id) => {\n                    var details = \"\";\n                    if (step.errors) {\n                        details += `<li>${step.errors}</li>`;\n                    }\n                    _.each(data.upgrade_messages[step_id], m => {\n                        details += `<li>${m}</li>`;\n                    });\n                    if (details) {\n                        upgrade_message += `<li>Step ${parseInt(step_id, 10) + 1}: ${\n                            self.workflow.nodes[step_id].name\n                        }<ul>${details}</ul></li>`;\n                    }\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Issues loading this workflow\",\n                        `Please review the following issues, possibly resulting from tool upgrades or changes.<p><ul>${upgrade_message}</ul></p>`,\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n                self.showWorkflowParameters();\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Loading workflow\", \"progress\");\n            }\n        });\n\n        window.make_popupmenu &&\n            make_popupmenu($(\"#workflow-options-button\"), {\n                Save: save_current_workflow,\n                \"Save As\": workflow_save_as,\n                Run: function() {\n                    window.location = `${Galaxy.root}workflows/run?id=${self.options.id}`;\n                },\n                \"Edit Attributes\": function() {\n                    self.workflow.clear_active_node();\n                },\n                \"Auto Re-layout\": layout_editor,\n                Close: close_editor\n            });\n\n        /******************************************** Issue 3000*/\n        function workflow_save_as() {\n            var body = $(\n                '<form><label style=\"display:inline-block; width: 100%;\">Save as name: </label><input type=\"text\" id=\"workflow_rename\" style=\"width: 80%;\" autofocus/>' +\n                    '<br><label style=\"display:inline-block; width: 100%;\">Annotation: </label><input type=\"text\" id=\"wf_annotation\" style=\"width: 80%;\" /></form>'\n            );\n            window.show_modal(\"Save As a New Workflow\", body, {\n                OK: function() {\n                    var rename_name =\n                        $(\"#workflow_rename\").val().length > 0\n                            ? $(\"#workflow_rename\").val()\n                            : `SavedAs_${self.workflow.name}`;\n                    var rename_annotation = $(\"#wf_annotation\").val().length > 0 ? $(\"#wf_annotation\").val() : \"\";\n                    $.ajax({\n                        url: self.urls.workflow_save_as,\n                        type: \"POST\",\n                        data: {\n                            workflow_name: rename_name,\n                            workflow_annotation: rename_annotation,\n                            workflow_data: function() {\n                                return JSON.stringify(self.workflow.to_simple());\n                            }\n                        }\n                    })\n                        .done(id => {\n                            window.onbeforeunload = undefined;\n                            window.location = `${Galaxy.root}workflow/editor?id=${id}`;\n                            hide_modal();\n                        })\n                        .fail(() => {\n                            hide_modal();\n                            alert(\"Saving this workflow failed. Please contact this site's administrator.\");\n                        });\n                },\n                Cancel: hide_modal\n            });\n        }\n\n        function edit_workflow_outputs() {\n            self.workflow.clear_active_node();\n            $(\".right-content\").hide();\n            var new_content = \"\";\n            for (var node_key in self.workflow.nodes) {\n                var node = self.workflow.nodes[node_key];\n                if ([\"tool\", \"subworkflow\"].indexOf(node.type) >= 0) {\n                    new_content += `<div class='toolForm' style='margin-bottom:5px;'><div class='toolFormTitle'>Step ${\n                        node.id\n                    } - ${node.name}</div>`;\n                    for (var ot_key in node.output_terminals) {\n                        var output = node.output_terminals[ot_key];\n                        if (node.isWorkflowOutput(output.name)) {\n                            new_content += `<p>${output.name}<input type='checkbox' name='${node.id}|${\n                                output.name\n                            }' checked /></p>`;\n                        } else {\n                            new_content += `<p>${output.name}<input type='checkbox' name='${node.id}|${\n                                output.name\n                            }' /></p>`;\n                        }\n                    }\n                    new_content += \"</div>\";\n                }\n            }\n            $(\"#output-fill-area\").html(new_content);\n            $(\"#output-fill-area input\").bind(\"click\", function() {\n                var node_id = this.name.split(\"|\")[0];\n                var workflowNode = this.workflow.nodes[node_id];\n                var output_name = this.name.split(\"|\")[1];\n                if (this.checked) {\n                    workflowNode.addWorkflowOutput(output_name);\n                } else {\n                    workflowNode.removeWorkflowOutput(output_name);\n                }\n                self.workflow.has_changes = true;\n            });\n            $(\"#workflow-output-area\").show();\n        }\n\n        function layout_editor() {\n            self.workflow.layout();\n            self.workflow.fit_canvas_to_nodes();\n            self.scroll_to_nodes();\n            self.canvas_manager.draw_overview();\n        }\n\n        // On load, set the size to the pref stored in local storage if it exists\n        var overview_size = $.jStorage.get(\"overview-size\");\n        if (overview_size !== undefined) {\n            $(\"#overview-border\").css({\n                width: overview_size,\n                height: overview_size\n            });\n        }\n\n        // Show viewport on load unless pref says it's off\n        if ($.jStorage.get(\"overview-off\")) {\n            hide_overview();\n        } else {\n            show_overview();\n        }\n\n        // Stores the size of the overview into local storage when it's resized\n        $(\"#overview-border\").bind(\"dragend\", function(e, d) {\n            var op = $(this).offsetParent();\n            var opo = op.offset();\n            var new_size = Math.max(op.width() - (d.offsetX - opo.left), op.height() - (d.offsetY - opo.top));\n            $.jStorage.set(\"overview-size\", `${new_size}px`);\n        });\n\n        function show_overview() {\n            $.jStorage.set(\"overview-off\", false);\n            $(\"#overview-border\").css(\"right\", \"0px\");\n            $(\"#close-viewport\").css(\"background-position\", \"0px 0px\");\n        }\n\n        function hide_overview() {\n            $.jStorage.set(\"overview-off\", true);\n            $(\"#overview-border\").css(\"right\", \"20000px\");\n            $(\"#close-viewport\").css(\"background-position\", \"12px 0px\");\n        }\n\n        // Lets the overview be toggled visible and invisible, adjusting the arrows accordingly\n        $(\"#close-viewport\").click(() => {\n            if ($(\"#overview-border\").css(\"right\") === \"0px\") {\n                hide_overview();\n            } else {\n                show_overview();\n            }\n        });\n\n        // Unload handler\n        window.onbeforeunload = () => {\n            if (workflow && self.workflow.has_changes) {\n                return \"There are unsaved changes to your workflow which will be lost.\";\n            }\n        };\n\n        this.options.workflows.length > 0 &&\n            $(\"#left\")\n                .find(\".toolMenu\")\n                .append(this._buildToolPanelWorkflows());\n\n        // Tool menu\n        $(\"div.toolSectionBody\").hide();\n        $(\"div.toolSectionTitle > span\").wrap(\"<a href='#'></a>\");\n        var last_expanded = null;\n        $(\"div.toolSectionTitle\").each(function() {\n            var body = $(this).next(\"div.toolSectionBody\");\n            $(this).click(() => {\n                if (body.is(\":hidden\")) {\n                    if (last_expanded) last_expanded.slideUp(\"fast\");\n                    last_expanded = body;\n                    body.slideDown(\"fast\");\n                } else {\n                    body.slideUp(\"fast\");\n                    last_expanded = null;\n                }\n            });\n        });\n\n        // Rename async.\n        async_save_text(\"workflow-name\", \"workflow-name\", self.urls.rename_async, \"new_name\");\n\n        // Tag async. Simply have the workflow edit element generate a click on the tag element to activate tagging.\n        $(\"#workflow-tag\").click(() => {\n            $(\".tag-area\").click();\n            return false;\n        });\n        // Annotate async.\n        async_save_text(\n            \"workflow-annotation\",\n            \"workflow-annotation\",\n            self.urls.annotate_async,\n            \"new_annotation\",\n            25,\n            true,\n            4\n        );\n    },\n\n    _buildToolPanelWorkflows: function() {\n        var self = this;\n        var $section = $(\n            '<div class=\"toolSectionWrapper\">' +\n                '<div class=\"toolSectionTitle\">' +\n                '<a href=\"#\"><span>Workflows</span></a>' +\n                \"</div>\" +\n                '<div class=\"toolSectionBody\">' +\n                '<div class=\"toolSectionBg\"/>' +\n                \"</div>\" +\n                \"</div>\"\n        );\n        _.each(this.options.workflows, workflow => {\n            if (workflow.id !== self.options.id) {\n                var copy = new Ui.ButtonIcon({\n                    icon: \"fa fa-copy\",\n                    cls: \"ui-button-icon-plain\",\n                    tooltip: _l(\"Copy and insert individual steps\"),\n                    onclick: function() {\n                        if (workflow.step_count < 2) {\n                            self.copy_into_workflow(workflow.id, workflow.name);\n                        } else {\n                            // don't ruin the workflow by adding 50 steps unprompted.\n                            Galaxy.modal.show({\n                                title: _l(\"Warning\"),\n                                body: `This will copy ${workflow.step_count} new steps into your workflow.`,\n                                buttons: {\n                                    Cancel: function() {\n                                        Galaxy.modal.hide();\n                                    },\n                                    Copy: function() {\n                                        Galaxy.modal.hide();\n                                        self.copy_into_workflow(workflow.id, workflow.name);\n                                    }\n                                }\n                            });\n                        }\n                    }\n                });\n                var $add = $(\"<a/>\")\n                    .attr(\"href\", \"#\")\n                    .html(workflow.name)\n                    .on(\"click\", () => {\n                        self.add_node_for_subworkflow(workflow.latest_id, workflow.name);\n                    });\n                $section.find(\".toolSectionBg\").append(\n                    $(\"<div/>\")\n                        .addClass(\"toolTitle\")\n                        .append($add)\n                        .append(copy.$el)\n                );\n            }\n        });\n        return $section;\n    },\n\n    copy_into_workflow: function(workflowId) {\n        // Load workflow definition\n        var self = this;\n        this._workflowLoadAjax(workflowId, {\n            success: function(data) {\n                self.workflow.from_simple(data, false);\n                // Determine if any parameters were 'upgraded' and provide message\n                var upgrade_message = \"\";\n                $.each(data.upgrade_messages, (k, v) => {\n                    upgrade_message += `<li>Step ${parseInt(k, 10) + 1}: ${self.workflow.nodes[k].name}<ul>`;\n                    $.each(v, (i, vv) => {\n                        upgrade_message += `<li>${vv}</li>`;\n                    });\n                    upgrade_message += \"</ul></li>\";\n                });\n                if (upgrade_message) {\n                    window.show_modal(\n                        \"Subworkflow embedded with changes\",\n                        `Problems were encountered loading this workflow (possibly a result of tool upgrades). Please review the following parameters and then save.<ul>${upgrade_message}</ul>`,\n                        { Continue: hide_modal }\n                    );\n                } else {\n                    hide_modal();\n                }\n            },\n            beforeSubmit: function(data) {\n                show_message(\"Importing workflow\", \"progress\");\n            }\n        });\n    },\n\n    // Global state for the whole workflow\n    reset: function() {\n        this.workflow && this.workflow.remove_all();\n        this.workflow = window.workflow_globals.workflow = new Workflow(this, $(\"#canvas-container\"));\n    },\n\n    scroll_to_nodes: function() {\n        var cv = $(\"#canvas-viewport\");\n        var cc = $(\"#canvas-container\");\n        var top;\n        var left;\n        if (cc.width() < cv.width()) {\n            left = (cv.width() - cc.width()) / 2;\n        } else {\n            left = 0;\n        }\n        if (cc.height() < cv.height()) {\n            top = (cv.height() - cc.height()) / 2;\n        } else {\n            top = 0;\n        }\n        cc.css({ left: left, top: top });\n    },\n\n    _workflowLoadAjax: function(workflowId, options) {\n        $.ajax(\n            Utils.merge(options, {\n                url: this.urls.load_workflow,\n                data: { id: workflowId, _: \"true\" },\n                dataType: \"json\",\n                cache: false\n            })\n        );\n    },\n\n    _moduleInitAjax: function(node, request_data) {\n        var self = this;\n        Utils.request({\n            type: \"POST\",\n            url: `${Galaxy.root}api/workflows/build_module`,\n            data: request_data,\n            success: function(data) {\n                node.init_field_data(data);\n                node.update_field_data(data);\n                self.workflow.activate_node(node);\n            }\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_tool: function(id, title) {\n        var node = this.workflow.create_node(\"tool\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"tool\",\n            tool_id: id,\n            _: \"true\"\n        });\n    },\n\n    // Add a new step to the workflow by tool id\n    add_node_for_subworkflow: function(id, title) {\n        var node = this.workflow.create_node(\"subworkflow\", title, id);\n        this._moduleInitAjax(node, {\n            type: \"subworkflow\",\n            content_id: id,\n            _: \"true\"\n        });\n    },\n\n    add_node_for_module: function(type, title) {\n        var node = this.workflow.create_node(type, title);\n        this._moduleInitAjax(node, { type: type, _: \"true\" });\n    },\n\n    display_file_list: function(node) {\n        var addlist = \"<select id='node_data_list' name='node_data_list'>\";\n        for (var out_terminal in node.output_terminals) {\n            addlist += `<option value='${out_terminal}'>${out_terminal}</option>`;\n        }\n        addlist += \"</select>\";\n        return addlist;\n    },\n\n    showWorkflowParameters: function() {\n        var parameter_re = /\\$\\{.+?\\}/g;\n        var workflow_parameters = [];\n        var wf_parm_container = $(\"#workflow-parameters-container\");\n        var wf_parm_box = $(\"#workflow-parameters-box\");\n        var new_parameter_content = \"\";\n        var matches = [];\n        $.each(this.workflow.nodes, (k, node) => {\n            if (node.config_form && node.config_form.inputs) {\n                Utils.deepeach(node.config_form.inputs, d => {\n                    if (typeof d.value == \"string\") {\n                        var form_matches = d.value.match(parameter_re);\n                        if (form_matches) {\n                            matches = matches.concat(form_matches);\n                        }\n                    }\n                });\n            }\n            if (node.post_job_actions) {\n                $.each(node.post_job_actions, (k, pja) => {\n                    if (pja.action_arguments) {\n                        $.each(pja.action_arguments, (k, action_argument) => {\n                            var arg_matches = action_argument.match(parameter_re);\n                            if (arg_matches) {\n                                matches = matches.concat(arg_matches);\n                            }\n                        });\n                    }\n                });\n            }\n            if (matches) {\n                $.each(matches, (k, element) => {\n                    if ($.inArray(element, workflow_parameters) === -1) {\n                        workflow_parameters.push(element);\n                    }\n                });\n            }\n        });\n        if (workflow_parameters && workflow_parameters.length !== 0) {\n            $.each(workflow_parameters, (k, element) => {\n                new_parameter_content += `<div>${element.substring(2, element.length - 1)}</div>`;\n            });\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.show();\n        } else {\n            wf_parm_container.html(new_parameter_content);\n            wf_parm_box.hide();\n        }\n    },\n\n    showAttributes: function() {\n        $(\".right-content\").hide();\n        $(\"#edit-attributes\").show();\n    },\n\n    showForm: function(content, node) {\n        var self = this;\n        var cls = \"right-content\";\n        var id = `${cls}-${node.id}`;\n        var $container = $(`#${cls}`);\n        if (content && $container.find(`#${id}`).length == 0) {\n            var $el = $(`<div id=\"${id}\" class=\"${cls}\"/>`);\n            content.node = node;\n            content.workflow = this.workflow;\n            content.datatypes = this.datatypes;\n            content.icon = WorkflowIcons[node.type];\n            content.cls = \"ui-portlet-narrow\";\n            if (node) {\n                var form_type = node.type == \"tool\" ? \"Tool\" : \"Default\";\n                $el.append(new FormWrappers[form_type](content).form.$el);\n                $container.append($el);\n            } else {\n                Galaxy.emit.debug(\"workflow-view::initialize()\", \"Node not found in workflow.\");\n            }\n        }\n        $(`.${cls}`).hide();\n        $container.find(`#${id}`).show();\n        $container.show();\n        $container.scrollTop();\n    },\n\n    isSubType: function(child, parent) {\n        child = this.ext_to_type[child];\n        parent = this.ext_to_type[parent];\n        return this.type_to_type[child] && parent in this.type_to_type[child];\n    },\n\n    prebuildNode: function(type, title_text, content_id) {\n        var self = this;\n        var $f = $(\"<div class='toolForm toolFormInCanvas'/>\");\n        var $title = $(`<div class='toolFormTitle unselectable'><span class='nodeTitle'>${title_text}</div></div>`);\n        add_node_icon($title.find(\".nodeTitle\"), type);\n        $f.append($title);\n        $f.css(\"left\", $(window).scrollLeft() + 20);\n        $f.css(\"top\", $(window).scrollTop() + 20);\n        $f.append($(\"<div class='toolFormBody'></div>\"));\n        var node = new Node(this, { element: $f });\n        node.type = type;\n        node.content_id = content_id;\n        var tmp = `<div><img height='16' align='middle' src='${\n            Galaxy.root\n        }static/images/loading_small_white_bg.gif'/> loading tool info...</div>`;\n        $f.find(\".toolFormBody\").append(tmp);\n        // Fix width to computed width\n        // Now add floats\n        var buttons = $(\"<div class='buttons' style='float: right;'></div>\");\n        if (type !== \"subworkflow\") {\n            buttons.append(\n                $(\"<div/>\")\n                    .addClass(\"fa-icon-button fa fa-files-o\")\n                    .click(e => {\n                        node.clone();\n                    })\n            );\n        }\n        buttons.append(\n            $(\"<div/>\")\n                .addClass(\"fa-icon-button fa fa-times\")\n                .click(e => {\n                    node.destroy();\n                })\n        );\n        // Place inside container\n        $f.appendTo(\"#canvas-container\");\n        // Position in container\n        var o = $(\"#canvas-container\").position();\n        var p = $(\"#canvas-container\").parent();\n        var width = $f.width();\n        var height = $f.height();\n        $f.css({\n            left: -o.left + p.width() / 2 - width / 2,\n            top: -o.top + p.height() / 2 - height / 2\n        });\n        buttons.prependTo($f.find(\".toolFormTitle\"));\n        width += buttons.width() + 10;\n        $f.css(\"width\", width);\n        $f\n            .bind(\"dragstart\", () => {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"dragend\", function() {\n                self.workflow.node_changed(this);\n                self.workflow.fit_canvas_to_nodes();\n                self.canvas_manager.draw_overview();\n            })\n            .bind(\"dragclickonly\", () => {\n                self.workflow.activate_node(node);\n            })\n            .bind(\"drag\", function(e, d) {\n                // Move\n                var po = $(this)\n                    .offsetParent()\n                    .offset();\n\n                var x = d.offsetX - po.left;\n                var y = d.offsetY - po.top;\n                $(this).css({ left: x, top: y });\n                // Redraw\n                $(this)\n                    .find(\".terminal\")\n                    .each(function() {\n                        this.terminal.redraw();\n                    });\n            });\n        return node;\n    }\n});\n"]}