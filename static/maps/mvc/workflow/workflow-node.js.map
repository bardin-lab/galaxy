{"version":3,"sources":["mvc/workflow/workflow-node.js"],"names":["Node","Backbone","Model","extend","initialize","app","attr","this","element","input_terminals","output_terminals","errors","workflow_outputs","getWorkflowOutput","outputName","_","findWhere","output_name","isWorkflowOutput","undefined","removeWorkflowOutput","splice","addWorkflowOutput","label","push","output","labelWorkflowOutput","changed","oldLabel","workflowOutput","workflow","updateOutputLabel","markChanged","nodeView","redrawWorkflowOutputs","connectedOutputTerminals","$","each","terminals","t","length","connectedTerminals","hasConnectedOutputTerminals","outputTerminals","_connectedTerminals","connectors","_connectedMappedTerminals","hasConnectedMappedInputTerminals","inputName","inputTerminals","inputTerminal","isMappedOver","connectedMappedInputTerminals","mapOver","mapped_outputs","mappedInputTerminals","_mappedTerminals","mappedTerminals","hasMappedOverInputTerminals","found","isCollection","redraw","clone","copiedData","annotation","post_job_actions","create_node","type","name","content_id","Galaxy","tool_id","inputs","tool_state","success","data","Object","assign","newData","node","destroy","k","remove","make_active","init_field_data","make_inactive","get","parentNode","set_tool_version","config_form","tool_version","version","id","p","removeChild","removeClass","tooltip","uuid","_workflowViewNode2","default","i","input","data_outputs","update_field_data","el","output_view","cur_name","data_names","data_name","cur_name_in_data_outputs","unused_outputs","unused_output","outputViews","terminalElement","terminal","x","wf_output","datatypes","extensions","destroyInvalidConnections","pja_in","addDataOutput","renderToolErrors","newTerminalViews","data_inputs","terminalView","addDataInput","new_body","terminalViews","values","unusedView","old_body","newInputsDiv","b","find","tmp","text","html","updateDataOutput","node_changed"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-node.js","sourcesContent":["import Utils from \"utils/utils\";\nimport NodeView from \"mvc/workflow/workflow-view-node\";\nvar Node = Backbone.Model.extend({\n    initialize: function(app, attr) {\n        this.app = app;\n        this.element = attr.element;\n        this.input_terminals = {};\n        this.output_terminals = {};\n        this.errors = {};\n        this.workflow_outputs = [];\n    },\n    getWorkflowOutput: function(outputName) {\n        return _.findWhere(this.workflow_outputs, {\n            output_name: outputName\n        });\n    },\n    isWorkflowOutput: function(outputName) {\n        return this.getWorkflowOutput(outputName) !== undefined;\n    },\n    removeWorkflowOutput: function(outputName) {\n        while (this.isWorkflowOutput(outputName)) {\n            this.workflow_outputs.splice(this.getWorkflowOutput(outputName), 1);\n        }\n    },\n    addWorkflowOutput: function(outputName, label) {\n        if (!this.isWorkflowOutput(outputName)) {\n            var output = { output_name: outputName };\n            if (label) {\n                output.label = label;\n            }\n            this.workflow_outputs.push(output);\n            return true;\n        }\n        return false;\n    },\n    labelWorkflowOutput: function(outputName, label) {\n        var changed = false;\n        var oldLabel = null;\n        if (this.isWorkflowOutput(outputName)) {\n            var workflowOutput = this.getWorkflowOutput(outputName);\n            oldLabel = workflowOutput.label;\n            workflowOutput.label = label;\n            changed = oldLabel != label;\n        } else {\n            changed = this.addWorkflowOutput(outputName, label);\n        }\n        if (changed) {\n            this.app.workflow.updateOutputLabel(oldLabel, label);\n            this.markChanged();\n            this.nodeView.redrawWorkflowOutputs();\n        }\n        return changed;\n    },\n    connectedOutputTerminals: function() {\n        return this._connectedTerminals(this.output_terminals);\n    },\n    _connectedTerminals: function(terminals) {\n        var connectedTerminals = [];\n        $.each(terminals, (_, t) => {\n            if (t.connectors.length > 0) {\n                connectedTerminals.push(t);\n            }\n        });\n        return connectedTerminals;\n    },\n    hasConnectedOutputTerminals: function() {\n        // return this.connectedOutputTerminals().length > 0; <- optimized this\n        var outputTerminals = this.output_terminals;\n        for (var outputName in outputTerminals) {\n            if (outputTerminals[outputName].connectors.length > 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    connectedMappedInputTerminals: function() {\n        return this._connectedMappedTerminals(this.input_terminals);\n    },\n    hasConnectedMappedInputTerminals: function() {\n        // return this.connectedMappedInputTerminals().length > 0; <- optimized this\n        var inputTerminals = this.input_terminals;\n        for (var inputName in inputTerminals) {\n            var inputTerminal = inputTerminals[inputName];\n            if (inputTerminal.connectors.length > 0 && inputTerminal.isMappedOver()) {\n                return true;\n            }\n        }\n        return false;\n    },\n    _connectedMappedTerminals: function(terminals) {\n        var mapped_outputs = [];\n        $.each(terminals, (_, t) => {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                if (t.connectors.length > 0) {\n                    mapped_outputs.push(t);\n                }\n            }\n        });\n        return mapped_outputs;\n    },\n    mappedInputTerminals: function() {\n        return this._mappedTerminals(this.input_terminals);\n    },\n    _mappedTerminals: function(terminals) {\n        var mappedTerminals = [];\n        $.each(terminals, (_, t) => {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                mappedTerminals.push(t);\n            }\n        });\n        return mappedTerminals;\n    },\n    hasMappedOverInputTerminals: function() {\n        var found = false;\n        _.each(this.input_terminals, t => {\n            var mapOver = t.mapOver();\n            if (mapOver.isCollection) {\n                found = true;\n            }\n        });\n        return found;\n    },\n    redraw: function() {\n        $.each(this.input_terminals, (_, t) => {\n            t.redraw();\n        });\n        $.each(this.output_terminals, (_, t) => {\n            t.redraw();\n        });\n    },\n    clone: function() {\n        var copiedData = {\n            name: this.name,\n            label: this.label,\n            annotation: this.annotation,\n            post_job_actions: this.post_job_actions\n        };\n        var node = this.app.workflow.create_node(this.type, this.name, this.content_id);\n\n        Utils.request({\n            type: \"POST\",\n            url: `${Galaxy.root}api/workflows/build_module`,\n            data: {\n                type: this.type,\n                tool_id: this.content_id,\n                inputs: this.tool_state\n            },\n            success: data => {\n                var newData = Object.assign({}, data, copiedData);\n                node.init_field_data(newData);\n                node.update_field_data(newData);\n                this.app.workflow.activate_node(node);\n            }\n        });\n    },\n    destroy: function() {\n        $.each(this.input_terminals, (k, t) => {\n            t.destroy();\n        });\n        $.each(this.output_terminals, (k, t) => {\n            t.destroy();\n        });\n        this.app.workflow.remove_node(this);\n        $(this.element).remove();\n    },\n    make_active: function() {\n        $(this.element).addClass(\"toolForm-active\");\n    },\n    make_inactive: function() {\n        // Keep inactive nodes stacked from most to least recently active\n        // by moving element to the end of parent's node list\n        var element = this.element.get(0);\n        (p => {\n            p.removeChild(element);\n            p.appendChild(element);\n        })(element.parentNode);\n        // Remove active class\n        $(element).removeClass(\"toolForm-active\");\n    },\n    set_tool_version: function() {\n        if (this.type === \"tool\" && this.config_form) {\n            this.tool_version = this.config_form.version;\n            this.content_id = this.config_form.id;\n        }\n    },\n    init_field_data: function(data) {\n        if (data.type) {\n            this.type = data.type;\n        }\n        this.name = data.name;\n        this.config_form = data.config_form;\n        this.set_tool_version();\n        this.tool_state = data.tool_state;\n        this.errors = data.errors;\n        this.tooltip = data.tooltip ? data.tooltip : \"\";\n        this.annotation = data.annotation;\n        this.post_job_actions = data.post_job_actions ? data.post_job_actions : {};\n        this.label = data.label;\n        this.uuid = data.uuid;\n        this.workflow_outputs = data.workflow_outputs ? data.workflow_outputs : [];\n        var node = this;\n        var nodeView = new NodeView({\n            el: this.element[0],\n            node: node\n        });\n        node.nodeView = nodeView;\n        $.each(data.data_inputs, (i, input) => {\n            nodeView.addDataInput(input);\n        });\n        if (data.data_inputs.length > 0 && data.data_outputs.length > 0) {\n            nodeView.addRule();\n        }\n        $.each(data.data_outputs, (i, output) => {\n            nodeView.addDataOutput(output);\n        });\n        nodeView.render();\n        this.app.workflow.node_changed(this, true);\n    },\n    update_field_data: function(data) {\n        var node = this;\n        var nodeView = node.nodeView;\n        // remove unused output views and remove pre-existing output views from data.data_outputs,\n        // so that these are not added twice.\n        var unused_outputs = [];\n        // nodeView.outputViews contains pre-existing outputs,\n        // while data.data_output contains what should be displayed.\n        // Now we gather the unused outputs\n        $.each(nodeView.outputViews, (i, output_view) => {\n            var cur_name = output_view.output.name;\n            var data_names = data.data_outputs;\n            var cur_name_in_data_outputs = false;\n            _.each(data_names, data_name => {\n                if (data_name.name == cur_name) {\n                    cur_name_in_data_outputs = true;\n                }\n            });\n            if (cur_name_in_data_outputs === false) {\n                unused_outputs.push(cur_name);\n            }\n        });\n\n        // Remove the unused outputs\n        _.each(unused_outputs, unused_output => {\n            _.each(nodeView.outputViews[unused_output].terminalElement.terminal.connectors, x => {\n                if (x) {\n                    x.destroy(); // Removes the noodle connectors\n                }\n            });\n            nodeView.outputViews[unused_output].remove(); // removes the rendered output\n            delete nodeView.outputViews[unused_output]; // removes the reference to the output\n            delete node.output_terminals[unused_output]; // removes the output terminal\n        });\n        $.each(node.workflow_outputs, (i, wf_output) => {\n            if (wf_output && !node.output_terminals[wf_output.output_name]) {\n                node.workflow_outputs.splice(i, 1); // removes output from list of workflow outputs\n            }\n        });\n        $.each(data.data_outputs, (i, output) => {\n            if (!nodeView.outputViews[output.name]) {\n                nodeView.addDataOutput(output); // add data output if it does not yet exist\n            } else {\n                // the output already exists, but the output formats may have changed.\n                // Therefore we update the datatypes and destroy invalid connections.\n                node.output_terminals[output.name].datatypes = output.extensions;\n                node.output_terminals[output.name].destroyInvalidConnections();\n            }\n        });\n        this.tool_state = data.tool_state;\n        this.config_form = data.config_form;\n        this.set_tool_version();\n        this.errors = data.errors;\n        this.annotation = data.annotation;\n        this.label = data.label;\n        if (\"post_job_actions\" in data) {\n            // Won't be present in response for data inputs\n            var pja_in = data.post_job_actions;\n            this.post_job_actions = pja_in ? pja_in : {};\n        }\n        node.nodeView.renderToolErrors();\n        // Update input rows\n        var old_body = nodeView.$(\"div.inputs\");\n        var new_body = nodeView.newInputsDiv();\n        var newTerminalViews = {};\n        _.each(data.data_inputs, input => {\n            var terminalView = node.nodeView.addDataInput(input, new_body);\n            newTerminalViews[input.name] = terminalView;\n        });\n        // Cleanup any leftover terminals\n        _.each(_.difference(_.values(nodeView.terminalViews), _.values(newTerminalViews)), unusedView => {\n            unusedView.el.terminal.destroy();\n        });\n        nodeView.terminalViews = newTerminalViews;\n        node.nodeView.render();\n        // In general workflow editor assumes tool outputs don't change in # or\n        // type (not really valid right?) but adding special logic here for\n        // data collection input parameters that can have their collection\n        // change.\n        if (data.data_outputs.length == 1 && \"collection_type\" in data.data_outputs[0]) {\n            nodeView.updateDataOutput(data.data_outputs[0]);\n        }\n        old_body.replaceWith(new_body);\n        if (\"workflow_outputs\" in data) {\n            // Won't be present in response for data inputs\n            this.workflow_outputs = data.workflow_outputs ? data.workflow_outputs : [];\n        }\n        // If active, reactivate with new config_form\n        this.markChanged();\n        this.redraw();\n    },\n    error: function(text) {\n        var b = $(this.element).find(\".toolFormBody\");\n        b.find(\"div\").remove();\n        var tmp = `<div style='color: red; text-style: italic;'>${text}</div>`;\n        this.config_form = tmp;\n        b.html(tmp);\n        this.app.workflow.node_changed(this);\n    },\n    markChanged: function() {\n        this.app.workflow.node_changed(this);\n    }\n});\nexport default Node;\n"]}