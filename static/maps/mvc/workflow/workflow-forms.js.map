{"version":3,"sources":["mvc/workflow/workflow-forms.js"],"names":["_addLabelAnnotation","form","options","model","deepeach","workflow","type","input","inputs","unshift","_addSections","fixed","value","node","annotation","area","help","name","label","new_label","i","nodes","n","id","data","match","element_list","input_id","set","onchange","duplicate","trigger","_visit","head","post_job_actions","input_element","action","head_list","output_id","payload","p_id","d","j","expanded","action_arguments","pja_arg","slice","_makeSection","extensions","input_terminal_names","datatypes","key","push","0","1","input_terminals","a","b","output","input_config","title","flat","getWorkflowOutput","new_value","attemptUpdateOutputLabel","join","ignore","output_terminals","Object","keys","host","window","location","_localization2","default","String","Default","Backbone","View","extend","initialize","self","this","_formView2","_utils2","merge","request","url","Galaxy","root","content_id","create","success","text_enable","text_disable","narrow","cls","initialmodel","process","_customize","resolve","get","attributes","tool_version","version","initial_errors","$","current_state","buildmodel","config_form","tool_id","emit","debug","response","error","textify","__class__","collapsible_value","is_workflow","length","indexOf","info","undefined","Tool"],"mappings":"uNAwGS,SAAAA,EAdDC,GAeA,IAAAC,EAAAD,EAAAE,MAAMC,WACFC,EAAAH,EAAUI,SACNC,EAAAA,EAAAA,KACHL,EAAAM,OAAAC,SACJH,KAJD,OAKAI,KAAAA,eACAV,MAAAA,aACHW,OAAA,EA9ELC,MAAAC,EAAAC,WA4FQC,MAAM,EAXdC,KAAA,kGAEId,EAAIA,OAAAA,SACJI,KAAID,OACJY,KAAIJ,UACJX,MAAAA,QACII,MAAAA,EAAMY,MACND,MAAAA,EAAAA,EAAAA,SAAAA,qBACAC,OAAAA,EACAP,SAAAA,SAJmBQ,GAKnBP,IAAAA,GAAYE,EACZC,IAAAA,IAAMK,KANaf,EAAAgB,MAAA,CAOnBL,IAAMM,EAAAjB,EAAAgB,MAAAD,GAPV,GAAAE,EAAAJ,OAAAI,EAAAJ,OAAAC,GAAAG,EAAAC,IAAAV,EAAAU,GAAA,CASQf,GAAe,EACb,OAGNI,IAAAA,EAAYM,EAJOM,KAAAC,MAAA,WAKbxB,EAAAyB,aAAGC,GALUxB,MAAAyB,IAOnBC,aACIC,GAAIA,gEAEA7B,EAAA8B,QAAIT,aAMR,SAAAU,EAAAC,EAAIN,EAAW1B,EAAUwB,GACzB,IAAAS,EAAIC,EAAAA,KAAgBlC,kBACpBkC,EAAAA,OAIAlC,KAAAA,GACH,IAAA,IAAAmB,KAAAa,EAAAzB,OAAA,CAvBkB,IAAvBD,EAAA0B,EAAAzB,OAAAY,GAmCI,GAVPb,EAAA6B,OAUmB,CAJhBC,GAJJ9B,EAAAU,KAAA,QAAAqB,EAAA,KAAA/B,EAAA6B,OACSJ,EAAOC,UACRC,EAAAA,MAAAA,KAAmBhC,EAAQW,SAE/BwB,EAAAE,QACK,IAAL,IAAcN,KAAd1B,EAA2BgC,QACnBhC,EAAQ0B,QAAA1B,EAAZU,KAAIV,KAAJiC,GAAAjC,EAAAgC,QAAAC,UACajC,EAAM6B,QAAnBI,GAGI,IAAAC,EAAIlC,EAAeA,EAAA6B,OAAAE,GACf/B,GAAAA,EAAAA,CACH,IAAA,IAAAmC,KAAAL,EACG9B,EAAMgC,GAAVI,UAAmB,EAEXpC,EAAAA,QACAA,EAAAK,MAAOL,EAAMgC,kBAAbE,EAAAG,iBAAArC,EAAAsC,UAAAtC,EAAAK,MAEPL,EAAAK,MAAA,QAIOyB,EAAAA,QACHL,EAAAzB,EAAA8B,EAAAS,MAAA,GAAAR,EAAApC,IAMJ,SAAA6C,EAAAT,EAAApC,GACJ,IAAA8C,KACDC,KACIjB,EAAAA,EAAAkB,UACHrC,EAAAX,EAAAW,KACJR,EAAAH,EAAAG,SAWD,IAAK,IAAI8C,KAAOD,EARpBF,EAAAI,MAAAC,EAAAH,EAAAC,GAAAG,EAAAJ,EAAAC,KAEI,IAAAA,KAAIH,EAAAA,gBACJC,EAAIA,KAAAA,EAAJM,gBAAAJ,GAAAlC,MAEA+B,EAAInC,KAAOX,SAAAA,EAAAA,GAAAA,OAAXsD,EAAAtC,MAAAuC,EAAAvC,MAAA,EAAAsC,EAAAtC,MAAAuC,EAAAvC,OAAA,EAAA,IACA8B,EAAI3C,SAUAgD,EAAG,YARPC,EAAA,cAECN,EAAAvC,SACD4C,EAAA,WACIJ,EAAAA,aAEJD,EAAAA,SAAgBK,EAAA,kBAAAC,EAAhB,cAEI,IAAAI,EACAC,GAFeC,MAAAA,sBAAnBtB,EAAmB,IAInBU,KAAAA,UACIa,MAAA,EACArD,SAEJwC,MAAWvC,QACJH,KAAA,OACAM,OAAA8C,EAAA7C,EAAAiD,kBAAAxB,KAAAoB,EAAAxC,OAAA,GAFPF,KAAA,gGAII0C,SAAJ,SAAAK,GACIJ,EAAeK,yBAAAnD,EAAAyB,EAAAyB,MAIfvD,OACI,sBACIU,QAAO,UACPZ,MAAM,iBACNM,KAAAA,OACAI,MAAM,GACNa,OAAAA,GACIxB,KAAAA,qLAAA4C,EAAAgB,KACH,MADG5D,eAMJa,OAAO,uBACPZ,QAAM,UACNM,MAAO,kBACPsD,KAAAA,SACAlD,OAAAA,YAIJJ,MAAA,YACIwB,QAAQY,EACRH,KAAAA,+EAGAqB,OAAQ,mBACRtD,QAAO,OACPV,MAAAA,WACAc,KAAM,OAEVJ,MAAA,GACIwB,OAAQ,GACRS,KAAAA,+CAGAjC,OAAO,yBACPsD,QAAQ,OACRlD,MAAM,cAEVV,KAAA,OACI8B,MAAAA,GACAS,OAAAA,GACA3B,KAAAA,kDAGAgD,OAAAA,EAAAA,EAAAA,SANJ,kBAOIlD,KAAM,UAEV6C,MAAA,EACID,SAEMxB,OAHV,kBAIYS,QACJ,WACIT,MAAQ,eACRS,KAAS,UACT3B,MAAO,GACPZ,OAAM,KAIV8B,OAAA,kBACIA,QAAQ,WACRS,MAAS,eACT3B,KAAO,UACPZ,MAAM,GACNM,OALJ,KASIwB,OAAQ,kBACRS,QAAS,SACT3B,MAAO,aACPZ,KAAM,UACNM,MALJ,GAMIsD,OAAQ,KAIRrB,OAAS,kBACT3B,QAAO,YACPZ,MAAM,gBACNM,KALJ,UAMIsD,MAAQ,GAEZA,OAAA,KAGIhD,OAAO,kBACPZ,QAAM,UACNM,MALJ,cAMIsD,KAAQ,UA3CpBtD,MAAA,GA8CUsD,OAAA,KAIXP,KAAAA,8FAKX,OADA3B,EAAA2B,KAAArB,EAAApC,GACAyD,EAII,SAAAjD,EAAIwB,GACJ,IAAAhC,EAAIoC,EAAAA,MAAiB6B,WAHjB3D,EAASN,EAAQM,OAKrBK,EAAIyB,EAAWzB,KACXL,EAAYK,EAAAqB,iBACRjB,EAAAA,EAAAA,kBAAAmD,OAAAC,KAAAxD,EADQsD,kBAAA,GAGR7D,GAAAA,EAAAA,CACAM,EAAAA,MACAsD,KAAAA,QAAQ5B,EAAR4B,gBACAlD,MAAAA,qBACAuB,KAAAA,UACI+B,MAAAA,OAAMC,QAAOC,EAAAA,cAASF,KADjBJ,OAAA,QAPDlD,MAAZ,EAAAyD,EAAAC,SAAA,kEAWAlE,SACIS,KAAAA,OAAAA,SAAcqB,QAGd1B,EAAAA,MACAsD,KAAAA,QAAQ5B,EAAR4B,8BACAlD,MAAAA,iBANQV,KAAZ,UASAM,MAAK+D,OAAS9D,QAAKsD,EAAAA,4BAAkB7B,KACjC9B,OAAAA,QACHQ,KACJ,qIAHG,IAAK,IAAII,KAAKP,EAAKsD,iBACf3D,EAAO4C,KAKJL,EAAA3B,EAAAlB,sFAtWX0E,EAAUC,SAASC,KAAKC,QACxBC,WAAY,SAAS9E,GACjB,IAAI+E,EAAOC,KACPrE,EAAOX,EAAQW,KACnBqE,KAAKjF,KAAO,IAAAkF,EAAAT,QACRU,EAAAV,QAAMW,MAAMnF,GACR2B,SAAU,WACNuD,EAAAV,QAAMY,SACFhF,KAAM,OACNiF,IAAQC,OAAOC,KAAf,6BACAjE,MACID,GAAIV,EAAKU,GACTjB,KAAMO,EAAKP,KACXoF,WAAY7E,EAAK6E,WACjBlF,OAAQyE,EAAKhF,KAAKuB,KAAKmE,UAfnDC,QAAA,SAAApE,GACuBsD,EAAKC,kBAAOvD,UAOfxB,EAAAkF,KAAAjF,MACIK,KAAAA,KAAAA,YAKIoF,EAAAA,SAAAA,KAAAA,QACAlF,WAAAA,SAAAA,GAJE,IAAAyE,EAAAC,KAMNU,EAAAA,EAAAA,KACI/E,KAAAA,KAAAA,IAAAA,EAAAA,QACHuE,EAAAV,QAAAW,MAAAnF,GAXS2F,YAAd,iBAaHC,aAAA,iBAhBTC,QAAA,EAmBA/F,gBAAoB,EACpBgG,IAAA,oBACHC,aAAA,SAAAC,EAAAjG,GAzBLgF,EAAAkB,WAAAlG,GA0CoBiG,EAAQE,WAbjBvB,WAAA,SAAqBqB,EAAAjG,GAChBA,EAAAE,MAAAkG,IAAA,aAAApG,CAAkBiG,EAAAjG,IAEtBY,WAAOX,SAAXgG,EAAAjG,GACKA,IAAOC,EAAAD,EAAAE,MAAAmG,WAEJT,GACAC,QAAc5F,EAAAqB,GACNgF,aAHSrG,EAAAsG,QAIjBC,KAAAA,OACKjG,OAAAkG,EAAA3B,QALY,KAAA9E,EAAAuB,KAAAmE,WAObV,OAAKkB,KAAAA,MAAWlG,mCAAhB,yBAAA0G,GACAT,EAAAA,QAAAA,SARa5F,KAAA,OAUjBsG,IAAYpB,OAAAC,KAAZmB,6BACI3G,KAAA0G,EAXaf,QAAA,SAAApE,GAaLvB,EAAAE,MAAAyB,IAAAJ,EAAS0E,aACbhG,EAAAA,WAAUD,GACV0G,EAAAA,OAAgBnF,EAAAqF,aAChBC,EAAS5G,OAAAA,EADO2G,aAMbE,EAAKC,kBAAMxF,GAClBgE,OAAAuB,KAAMzB,MAAQ,mCAAA,sBAAA9D,GACVlB,EADU8F,WAGV5E,MAAMmF,SAAAA,GACNf,OAASmB,KAAAC,MAAA,mCAAe,0BAAAC,GACpBhH,EAAKE,iBAQLU,WAAAA,SAAAA,GACA2E,IAAAA,EAAAA,EAAAA,MAAAA,WACAU,EAAAA,QAAAA,SAAAA,EAAAA,OAAQE,SAAAA,GACX7F,EAAAD,QACyB,IAA1B4G,OAAAA,mBAAgBD,QAAU1G,EAAAD,OACtBkF,EAAAA,KAAAA,SACAU,EAAAA,KAAAA,eAAA3F,EAAAU,KAAAiF,MAAAd,EAAAV,QAAAyC,QAAA5G,EAAAyC,YAAAkD,IACH3F,EAAAK,OAAAwG,UAAA,iBApBL7G,EAAAI,QAsBHJ,EAAA8G,mBA7CTD,UAAA,gBA8DY7G,EAAM+G,YAZV/G,EAAAL,SAAe,IAAND,EAAMC,QAAAqH,SAAA,IAAA,UAAA,SAAAC,QAAAjH,EAAAD,UAIf8E,EAAAV,QAAAtE,SAAAF,EAAIM,OAAS,SAAAD,GACHD,gBAANC,EAAAA,OACAA,EAAAA,WAAMkH,uBAANC,KAGAnH,EAAAA,GACI6G,EAAAA,iBA0QpBxC,QAASA,EACT+C,KAAMA","file":"../../../scripts/mvc/workflow/workflow-forms.js","sourcesContent":["import _l from \"utils/localization\";\nimport Utils from \"utils/utils\";\nimport Form from \"mvc/form/form-view\";\nimport ToolFormBase from \"mvc/tool/tool-form-base\";\n/** Default form wrapper for non-tool modules in the workflow editor. */\nvar Default = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        var node = options.node;\n        this.form = new Form(\n            Utils.merge(options, {\n                onchange: function() {\n                    Utils.request({\n                        type: \"POST\",\n                        url: `${Galaxy.root}api/workflows/build_module`,\n                        data: {\n                            id: node.id,\n                            type: node.type,\n                            content_id: node.content_id,\n                            inputs: self.form.data.create()\n                        },\n                        success: function(data) {\n                            node.update_field_data(data);\n                        }\n                    });\n                }\n            })\n        );\n        _addLabelAnnotation(this.form);\n        this.form.render();\n    }\n});\n\n/** Tool form wrapper for the workflow editor. */\nvar Tool = Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        var node = options.node;\n        this.form = new ToolFormBase(\n            Utils.merge(options, {\n                text_enable: \"Set in Advance\",\n                text_disable: \"Set at Runtime\",\n                narrow: true,\n                initial_errors: true,\n                cls: \"ui-portlet-narrow\",\n                initialmodel: function(process, form) {\n                    self._customize(form);\n                    process.resolve();\n                },\n                buildmodel: function(process, form) {\n                    form.model.get(\"postchange\")(process, form);\n                },\n                postchange: function(process, form) {\n                    var options = form.model.attributes;\n                    var current_state = {\n                        tool_id: options.id,\n                        tool_version: options.version,\n                        type: \"tool\",\n                        inputs: $.extend(true, {}, form.data.create())\n                    };\n                    Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Sending current state.\", current_state);\n                    Utils.request({\n                        type: \"POST\",\n                        url: `${Galaxy.root}api/workflows/build_module`,\n                        data: current_state,\n                        success: function(data) {\n                            form.model.set(data.config_form);\n                            self._customize(form);\n                            form.update(data.config_form);\n                            form.errors(data.config_form);\n                            // This hasn't modified the workflow, just returned\n                            // module information for the tool to update the workflow\n                            // state stored on the client with. User needs to save\n                            // for this to take effect.\n                            node.update_field_data(data);\n                            Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Received new model.\", data);\n                            process.resolve();\n                        },\n                        error: function(response) {\n                            Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Refresh request failed.\", response);\n                            process.reject();\n                        }\n                    });\n                }\n            })\n        );\n    },\n\n    _customize: function(form) {\n        var options = form.model.attributes;\n        Utils.deepeach(options.inputs, input => {\n            if (input.type) {\n                if ([\"data\", \"data_collection\"].indexOf(input.type) != -1) {\n                    input.type = \"hidden\";\n                    input.info = `Data input '${input.name}' (${Utils.textify(input.extensions)})`;\n                    input.value = { __class__: \"RuntimeValue\" };\n                } else if (!input.fixed) {\n                    input.collapsible_value = {\n                        __class__: \"RuntimeValue\"\n                    };\n                    input.is_workflow =\n                        (input.options && input.options.length === 0) || [\"integer\", \"float\"].indexOf(input.type) != -1;\n                }\n            }\n        });\n        Utils.deepeach(options.inputs, input => {\n            if (input.type === \"conditional\") {\n                input.test_param.collapsible_value = undefined;\n            }\n        });\n        _addSections(form);\n        _addLabelAnnotation(form);\n    }\n});\n\n/** Augments the module form definition by adding label and annotation fields */\nfunction _addLabelAnnotation(form) {\n    var options = form.model.attributes;\n    var workflow = options.workflow;\n    var node = options.node;\n    options.inputs.unshift({\n        type: \"text\",\n        name: \"__annotation\",\n        label: \"Annotation\",\n        fixed: true,\n        value: node.annotation,\n        area: true,\n        help: \"Add an annotation or notes to this step. Annotations are available when a workflow is viewed.\"\n    });\n    options.inputs.unshift({\n        type: \"text\",\n        name: \"__label\",\n        label: \"Label\",\n        value: node.label,\n        help: _l(\"Add a step label.\"),\n        fixed: true,\n        onchange: function(new_label) {\n            var duplicate = false;\n            for (var i in workflow.nodes) {\n                var n = workflow.nodes[i];\n                if (n.label && n.label == new_label && n.id != node.id) {\n                    duplicate = true;\n                    break;\n                }\n            }\n            var input_id = form.data.match(\"__label\");\n            var input_element = form.element_list[input_id];\n            input_element.model.set(\n                \"error_text\",\n                duplicate && \"Duplicate label. Please fix this before saving the workflow.\"\n            );\n            form.trigger(\"change\");\n        }\n    });\n}\n\n/** Visit input nodes and enrich by name/value pairs from server data */\nfunction _visit(head, head_list, output_id, options) {\n    var post_job_actions = options.node.post_job_actions;\n    head_list = head_list || [];\n    head_list.push(head);\n    for (var i in head.inputs) {\n        var input = head.inputs[i];\n        var action = input.action;\n        if (action) {\n            input.name = `pja__${output_id}__${input.action}`;\n            if (input.pja_arg) {\n                input.name += `__${input.pja_arg}`;\n            }\n            if (input.payload) {\n                for (var p_id in input.payload) {\n                    input.payload[`${input.name}__${p_id}`] = input.payload[p_id];\n                    delete input.payload[p_id];\n                }\n            }\n            var d = post_job_actions[input.action + output_id];\n            if (d) {\n                for (var j in head_list) {\n                    head_list[j].expanded = true;\n                }\n                if (input.pja_arg) {\n                    input.value = (d.action_arguments && d.action_arguments[input.pja_arg]) || input.value;\n                } else {\n                    input.value = \"true\";\n                }\n            }\n        }\n        if (input.inputs) {\n            _visit(input, head_list.slice(0), output_id, options);\n        }\n    }\n}\n\n/** Builds sub section with step actions/annotation */\nfunction _makeSection(output_id, options) {\n    var extensions = [];\n    var input_terminal_names = [];\n    var datatypes = options.datatypes;\n    var node = options.node;\n    var workflow = options.workflow;\n\n    for (var key in datatypes) {\n        extensions.push({ 0: datatypes[key], 1: datatypes[key] });\n    }\n    for (key in node.input_terminals) {\n        input_terminal_names.push(node.input_terminals[key].name);\n    }\n    extensions.sort((a, b) => (a.label > b.label ? 1 : a.label < b.label ? -1 : 0));\n    extensions.unshift({\n        0: \"Sequences\",\n        1: \"Sequences\"\n    });\n    extensions.unshift({\n        0: \"Roadmaps\",\n        1: \"Roadmaps\"\n    });\n    extensions.unshift({\n        0: \"Leave unchanged\",\n        1: \"__empty__\"\n    });\n    var output;\n    var input_config = {\n        title: `Configure Output: '${output_id}'`,\n        type: \"section\",\n        flat: true,\n        inputs: [\n            {\n                label: \"Label\",\n                type: \"text\",\n                value: ((output = node.getWorkflowOutput(output_id)) && output.label) || \"\",\n                help: \"This will provide a short name to describe the output - this must be unique across workflows.\",\n                onchange: function(new_value) {\n                    workflow.attemptUpdateOutputLabel(node, output_id, new_value);\n                }\n            },\n            {\n                action: \"RenameDatasetAction\",\n                pja_arg: \"newname\",\n                label: \"Rename dataset\",\n                type: \"text\",\n                value: \"\",\n                ignore: \"\",\n                help: `This action will rename the output dataset. Click <a href=\"https://galaxyproject.org/learn/advanced-workflow/variables/\">here</a> for more information. Valid inputs are: <strong>${input_terminal_names.join(\n                    \", \"\n                )}</strong>.`\n            },\n            {\n                action: \"ChangeDatatypeAction\",\n                pja_arg: \"newtype\",\n                label: \"Change datatype\",\n                type: \"select\",\n                ignore: \"__empty__\",\n                value: \"__empty__\",\n                options: extensions,\n                help: \"This action will change the datatype of the output to the indicated value.\"\n            },\n            {\n                action: \"TagDatasetAction\",\n                pja_arg: \"tags\",\n                label: \"Add Tags\",\n                type: \"text\",\n                value: \"\",\n                ignore: \"\",\n                help: \"This action will set tags for the dataset.\"\n            },\n            {\n                action: \"RemoveTagDatasetAction\",\n                pja_arg: \"tags\",\n                label: \"Remove Tags\",\n                type: \"text\",\n                value: \"\",\n                ignore: \"\",\n                help: \"This action will remove tags for the dataset.\"\n            },\n            {\n                title: _l(\"Assign columns\"),\n                type: \"section\",\n                flat: true,\n                inputs: [\n                    {\n                        action: \"ColumnSetAction\",\n                        pja_arg: \"chromCol\",\n                        label: \"Chrom column\",\n                        type: \"integer\",\n                        value: \"\",\n                        ignore: \"\"\n                    },\n                    {\n                        action: \"ColumnSetAction\",\n                        pja_arg: \"startCol\",\n                        label: \"Start column\",\n                        type: \"integer\",\n                        value: \"\",\n                        ignore: \"\"\n                    },\n                    {\n                        action: \"ColumnSetAction\",\n                        pja_arg: \"endCol\",\n                        label: \"End column\",\n                        type: \"integer\",\n                        value: \"\",\n                        ignore: \"\"\n                    },\n                    {\n                        action: \"ColumnSetAction\",\n                        pja_arg: \"strandCol\",\n                        label: \"Strand column\",\n                        type: \"integer\",\n                        value: \"\",\n                        ignore: \"\"\n                    },\n                    {\n                        action: \"ColumnSetAction\",\n                        pja_arg: \"nameCol\",\n                        label: \"Name column\",\n                        type: \"integer\",\n                        value: \"\",\n                        ignore: \"\"\n                    }\n                ],\n                help: \"This action will set column assignments in the output dataset. Blank fields are ignored.\"\n            }\n        ]\n    };\n    _visit(input_config, [], output_id, options);\n    return input_config;\n}\n\n/** Builds all sub sections */\nfunction _addSections(form) {\n    var options = form.model.attributes;\n    var inputs = options.inputs;\n    var node = options.node;\n    var post_job_actions = node.post_job_actions;\n    var output_id = node.output_terminals && Object.keys(node.output_terminals)[0];\n\n    if (output_id) {\n        inputs.push({\n            name: `pja__${output_id}__EmailAction`,\n            label: \"Email notification\",\n            type: \"boolean\",\n            value: String(Boolean(post_job_actions[`EmailAction${output_id}`])),\n            ignore: \"false\",\n            help: _l(\"An email notification will be sent when the job has completed.\"),\n            payload: {\n                host: window.location.host\n            }\n        });\n        inputs.push({\n            name: `pja__${output_id}__DeleteIntermediatesAction`,\n            label: \"Output cleanup\",\n            type: \"boolean\",\n            value: String(Boolean(post_job_actions[`DeleteIntermediatesAction${output_id}`])),\n            ignore: \"false\",\n            help:\n                \"Upon completion of this step, delete non-starred outputs from completed workflow steps if they are no longer required as inputs.\"\n        });\n        for (var i in node.output_terminals) {\n            inputs.push(_makeSection(i, options));\n        }\n    }\n}\n\nexport default {\n    Default: Default,\n    Tool: Tool\n};\n"]}