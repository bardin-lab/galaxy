{"version":3,"sources":["mvc/grid/grid-view.js"],"names":["jQuery","ajaxSettings","traditional","Backbone","View","extend","grid","initialize","grid_config","this","_gridModel2","default","title","self","window","add_tag_to_grid_filter","tag_name","tag_value","tag","undefined","$","is","slideToggle","add_filter_condition","url_base","items","url_data","_","each","filters","v","k","ajax","url","advanced_search","param","success","embedded","init_grid","response","padding","handle_refresh","refresh_frames","inArray","top","Galaxy","currHistoryPanel","loadCurrentHistory","set","options","attributes","_utils2","setWindowTitle","get","replace","$el","html","_gridTemplate2","find","header","allow_title_display","body","message","use_hide_message","init_grid_elements","init_grid_controls","init_refresh_on_change","click","submit_operation","off","select","keyup","css","set_sort_condition","attr","submit","column_key","text_input_obj","text_input","val","parent","remove","remove_filter_condition","set_categorical_filter","on","checkboxes","check_count","update_checked","text","filter","length","change","rating","set_page","href","item","index","button","encode_id","popup","_popupMenu2","operations","operation","_add_operation","label","settings","allow_popup","addItem","target","confirmation_text","confirm","func","e","preventDefault","onclick","allowed","add_filter","name","value","t","filter_element","go_page_one","remove_filter","execute","col_key","cur_sort","new_sort","indexOf","sort_arrow","substring","addClass","append","new_value","category_filter","cur_value","filter_value","empty","removeClass","new_page","id","page_num","split","cur_page","parseInt","children","operation_button","operation_name","findWhere","number_of_checked_ids","item_ids","check_all_items","prop","c","state","href_parts","href_parms","toLowerCase","location","get_url_data","go_to","update_grid","method","show","type","data","alert","insert","response_text","json","hide","complete"],"mappings":"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","file":"../../../scripts/mvc/grid/grid-view.js","sourcesContent":["// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\nimport Utils from \"utils/utils\";\nimport GridModel from \"mvc/grid/grid-model\";\nimport Templates from \"mvc/grid/grid-template\";\nimport PopupMenu from \"mvc/ui/popup-menu\";\n// grid view\nexport default Backbone.View.extend({\n    // model\n    grid: null,\n\n    // Initialize\n    initialize: function(grid_config) {\n        this.grid = new GridModel();\n        this.title = grid_config.title;\n        var self = this;\n        window.add_tag_to_grid_filter = (tag_name, tag_value) => {\n            // Put tag name and value together.\n            var tag = tag_name + (tag_value !== undefined && tag_value !== \"\" ? `:${tag_value}` : \"\");\n            var advanced_search = $(\"#advanced-search\").is(\":visible\");\n            if (!advanced_search) {\n                $(\"#standard-search\").slideToggle(\"fast\");\n                $(\"#advanced-search\").slideToggle(\"fast\");\n            }\n            self.add_filter_condition(\"tags\", tag);\n        };\n\n        // set element\n        this.setElement(\"<div/>\");\n        if (grid_config.url_base && !grid_config.items) {\n            var url_data = grid_config.url_data || {};\n            _.each(grid_config.filters, (v, k) => {\n                url_data[`f-${k}`] = v;\n            });\n            $.ajax({\n                url: `${grid_config.url_base}?${$.param(url_data)}`,\n                success: function(response) {\n                    response.embedded = grid_config.embedded;\n                    response.filters = grid_config.filters || {};\n                    self.init_grid(response);\n                }\n            });\n        } else {\n            this.init_grid(grid_config);\n        }\n\n        // fix padding\n        if (grid_config.use_panels) {\n            $(\"#center\").css({\n                padding: \"10px\",\n                overflow: \"auto\"\n            });\n        }\n    },\n\n    // refresh frames\n    handle_refresh: function(refresh_frames) {\n        if (refresh_frames) {\n            if ($.inArray(\"history\", refresh_frames) > -1) {\n                if (window.top.Galaxy && window.top.Galaxy.currHistoryPanel) {\n                    window.top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                }\n            }\n        }\n    },\n\n    // Initialize\n    init_grid: function(grid_config) {\n        this.grid.set(grid_config);\n\n        // get options\n        var options = this.grid.attributes;\n\n        if (this.allow_title_display && options.title) {\n            Utils.setWindowTitle(options.title);\n        }\n        // handle refresh requests\n        this.handle_refresh(options.refresh_frames);\n\n        // strip protocol and domain\n        var url = this.grid.get(\"url_base\");\n        url = url.replace(/^.*\\/\\/[^\\/]+/, \"\");\n        this.grid.set(\"url_base\", url);\n\n        // append main template\n        this.$el.html(Templates.grid(options));\n\n        // update div contents\n        this.$el.find(\"#grid-table-header\").html(Templates.header(options));\n        this.$el.find(\"#grid-table-body\").html(Templates.body(options));\n        this.$el.find(\"#grid-table-footer\").html(Templates.footer(options));\n\n        // update message\n        if (options.message) {\n            this.$el.find(\"#grid-message\").html(Templates.message(options));\n            var self = this;\n            if (options.use_hide_message) {\n                setTimeout(() => {\n                    self.$el.find(\"#grid-message\").html(\"\");\n                }, 5000);\n            }\n        }\n\n        // configure elements\n        this.init_grid_elements();\n        this.init_grid_controls();\n\n        // attach global event handler\n        // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n        if (window.init_refresh_on_change) {\n            window.init_refresh_on_change();\n        }\n    },\n\n    // Initialize grid controls\n    init_grid_controls: function() {\n        // link\n        var self = this;\n\n        // Initialize grid operation button.\n        this.$el.find(\".operation-button\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.submit_operation(this);\n                return false;\n            });\n        });\n\n        // Initialize text filters to select text on click and use normal font when user is typing.\n        this.$el.find(\"input[type=text]\").each(function() {\n            $(this).off();\n            $(this)\n                .click(function() {\n                    $(this).select();\n                })\n                .keyup(function() {\n                    $(this).css(\"font-style\", \"normal\");\n                });\n        });\n\n        // Initialize sort links.\n        this.$el.find(\".sort-link\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.set_sort_condition($(this).attr(\"sort_key\"));\n                return false;\n            });\n        });\n\n        // Initialize text filters.\n        this.$el.find(\".text-filter-form\").each(function() {\n            $(this).off();\n            $(this).submit(function() {\n                var column_key = $(this).attr(\"column_key\");\n                var text_input_obj = $(`#input-${column_key}-filter`);\n                var text_input = text_input_obj.val();\n                text_input_obj.val(\"\");\n                self.add_filter_condition(column_key, text_input);\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find(\".text-filter-val > a\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                // Remove visible element.\n                $(this)\n                    .parent()\n                    .remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition($(this).attr(\"filter_key\"), $(this).attr(\"filter_val\"));\n\n                // Return\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find(\".categorical-filter > a\").each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.set_categorical_filter($(this).attr(\"filter_key\"), $(this).attr(\"filter_val\"));\n                return false;\n            });\n        });\n\n        // Initialize standard, advanced search toggles.\n        this.$el.find(\".advanced-search-toggle\").each(function() {\n            $(this).off();\n            $(this).click(() => {\n                self.$el.find(\"#standard-search\").slideToggle(\"fast\");\n                self.$el.find(\"#advanced-search\").slideToggle(\"fast\");\n                return false;\n            });\n        });\n\n        // Add event to check all box\n        this.$el.find(\"#check_all\").off();\n        this.$el.find(\"#check_all\").on(\"click\", () => {\n            self.check_all_items();\n        });\n    },\n\n    // Initialize grid elements.\n    init_grid_elements: function() {\n        // Initialize grid selection checkboxes.\n        this.$el.find(\".grid\").each(function() {\n            var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n            var check_count = $(this).find(\"span.grid-selected-count\");\n            var update_checked = () => {\n                check_count.text($(checkboxes).filter(\":checked\").length);\n            };\n\n            $(checkboxes).each(function() {\n                $(this).change(update_checked);\n            });\n            update_checked();\n        });\n\n        // Initialize ratings.\n        if (this.$el.find(\".community_rating_star\").length !== 0) this.$el.find(\".community_rating_star\").rating({});\n\n        // get options\n        var options = this.grid.attributes;\n        var self = this;\n\n        //\n        // add page click events\n        //\n        this.$el.find(\".page-link > a\").each(function() {\n            $(this).click(function() {\n                self.set_page($(this).attr(\"page_num\"));\n                return false;\n            });\n        });\n\n        //\n        // add inbound/outbound events\n        //\n        this.$el.find(\".use-target\").each(function() {\n            $(this).click(function() {\n                self.execute({\n                    href: $(this).attr(\"href\"),\n                    target: $(this).attr(\"target\")\n                });\n                return false;\n            });\n        });\n\n        // empty grid?\n        var items_length = options.items.length;\n        if (items_length === 0) {\n            return;\n        }\n\n        // add operation popup menus\n        _.each(options.items, (item, index) => {\n            var button = self.$(`#grid-${item.encode_id}-popup`).off();\n            var popup = new PopupMenu(button);\n            _.each(options.operations, operation => {\n                self._add_operation(popup, operation, item);\n            });\n        });\n    },\n\n    /** Add an operation to the items menu */\n    _add_operation: function(popup, operation, item) {\n        var self = this;\n        var settings = item.operation_config[operation.label];\n        if (settings.allowed && operation.allow_popup) {\n            popup.addItem({\n                html: operation.label,\n                href: settings.url_args,\n                target: settings.target,\n                confirmation_text: operation.confirm,\n                func: function(e) {\n                    e.preventDefault();\n                    var label = $(e.target).html();\n                    if (operation.onclick) {\n                        operation.onclick(item.encode_id);\n                    } else {\n                        self.execute(this.findItemByHtml(label));\n                    }\n                }\n            });\n        }\n    },\n\n    // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n    add_filter_condition: function(name, value) {\n        // Do nothing is value is empty.\n        if (value === \"\") {\n            return false;\n        }\n\n        // Add condition to grid.\n        this.grid.add_filter(name, value, true);\n\n        // Add button that displays filter and provides a button to delete it.\n        var t = $(Templates.filter_element(name, value));\n        var self = this;\n        t.click(function() {\n            // Remove visible element.\n            $(this).remove();\n\n            // Remove filter condition.\n            self.remove_filter_condition(name, value);\n        });\n\n        // append to container\n        var container = this.$el.find(`#${name}-filtering-criteria`);\n        container.append(t);\n\n        // execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n    remove_filter_condition: function(name, value) {\n        // Remove filter condition.\n        this.grid.remove_filter(name, value);\n\n        // Execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set sort condition for grid.\n    set_sort_condition: function(col_key) {\n        // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n        // currently sorted column, sort is reversed.\n        var cur_sort = this.grid.get(\"sort_key\");\n        var new_sort = col_key;\n        if (cur_sort.indexOf(col_key) !== -1) {\n            // Reverse sort.\n            if (cur_sort.substring(0, 1) !== \"-\") {\n                new_sort = `-${col_key}`;\n            }\n        }\n\n        // Remove sort arrows elements.\n        this.$el.find(\".sort-arrow\").remove();\n\n        // Add sort arrow element to new sort column.\n        var sort_arrow = new_sort.substring(0, 1) == \"-\" ? \"&uarr;\" : \"&darr;\";\n        var t = $(`<span>${sort_arrow}</span>`).addClass(\"sort-arrow\");\n\n        // Add to header\n        this.$el.find(`#${col_key}-header`).append(t);\n\n        // Update grid.\n        this.grid.set(\"sort_key\", new_sort);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set new value for categorical filter.\n    set_categorical_filter: function(name, new_value) {\n        // Update filter hyperlinks to reflect new filter value.\n        var category_filter = this.grid.get(\"categorical_filters\")[name];\n\n        var cur_value = this.grid.get(\"filters\")[name];\n        var self = this;\n        this.$el.find(`.${name}-filter`).each(function() {\n            var text = $.trim($(this).text());\n            var filter = category_filter[text];\n            var filter_value = filter[name];\n            if (filter_value == new_value) {\n                // Remove filter link since grid will be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                $(this).empty();\n                $(this).addClass(\"current-filter\");\n                $(this).append(text);\n            } else if (filter_value == cur_value) {\n                // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                $(this).empty();\n                var t = $(`<a href=\"#\">${text}</a>`);\n                t.click(() => {\n                    self.set_categorical_filter(name, filter_value);\n                });\n                $(this).removeClass(\"current-filter\");\n                $(this).append(t);\n            }\n        });\n\n        // Update grid.\n        this.grid.add_filter(name, new_value);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set page to view.\n    set_page: function(new_page) {\n        // Update page hyperlink to reflect new page.\n        var self = this;\n        this.$el.find(\".page-link\").each(function() {\n            var id = $(this).attr(\"id\");\n\n            var // Id has form 'page-link-<page_num>\n            page_num = parseInt(id.split(\"-\")[2], 10);\n\n            var cur_page = self.grid.get(\"cur_page\");\n            var text;\n            if (page_num === new_page) {\n                // Remove link to page since grid will be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                text = $(this)\n                    .children()\n                    .text();\n                $(this).empty();\n                $(this).addClass(\"inactive-link\");\n                $(this).text(text);\n            } else if (page_num === cur_page) {\n                // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                text = $(this).text();\n                $(this).empty();\n                $(this).removeClass(\"inactive-link\");\n                var t = $(`<a href=\"#\">${text}</a>`);\n                t.click(() => {\n                    self.set_page(page_num);\n                });\n                $(this).append(t);\n            }\n        });\n\n        if (new_page === \"all\") {\n            this.grid.set(\"cur_page\", new_page);\n        } else {\n            this.grid.set(\"cur_page\", parseInt(new_page, 10));\n        }\n        this.execute();\n    },\n\n    // confirmation/submission of operation request\n    submit_operation: function(operation_button, confirmation_text) {\n        // identify operation\n        var operation_name = $(operation_button).val();\n\n        // verify any item is selected\n        var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n        if (number_of_checked_ids < 1) {\n            return false;\n        }\n\n        // Check to see if there's grid confirmation text for this operation\n        var operation = _.findWhere(this.grid.attributes.operations, {\n            label: operation_name\n        });\n        if (operation && !confirmation_text) {\n            confirmation_text = operation.confirm || \"\";\n        }\n\n        // collect ids\n        var item_ids = [];\n        this.$el.find(\"input[name=id]:checked\").each(function() {\n            item_ids.push($(this).val());\n        });\n\n        // execute operation\n        var options = {\n            operation: operation_name,\n            id: item_ids,\n            confirmation_text: confirmation_text\n        };\n        if (operation.target == \"top\" || operation.target == \"center\") {\n            options = _.extend(options, {\n                href: operation.href,\n                target: operation.target\n            });\n        }\n        this.execute(options);\n        return true;\n    },\n\n    check_all_items: function() {\n        var check = this.$(\".grid-row-select-checkbox\");\n        var state = this.$(\"#check_all\").prop(\"checked\");\n        _.each(check, c => {\n            $(c).prop(\"checked\", state);\n        });\n        this.init_grid_elements();\n    },\n\n    // Go back to page one; this is useful when a filter is applied.\n    go_page_one: function() {\n        // Need to go back to page 1 if not showing all.\n        var cur_page = this.grid.get(\"cur_page\");\n        if (cur_page !== null && cur_page !== undefined && cur_page !== \"all\") {\n            this.grid.set(\"cur_page\", 1);\n        }\n    },\n\n    //\n    // execute operations and hyperlink requests\n    //\n    execute: function(options) {\n        // get url\n        var id = null;\n        var href = null;\n        var operation = null;\n        var confirmation_text = null;\n        var target = null;\n\n        // check for options\n        if (options) {\n            // get options\n            href = options.href;\n            operation = options.operation;\n            id = options.id;\n            confirmation_text = options.confirmation_text;\n            target = options.target;\n\n            // check if input contains the operation tag\n            if (href !== undefined && href.indexOf(\"operation=\") != -1) {\n                // Get operation, id in hyperlink's href.\n                var href_parts = href.split(\"?\");\n                if (href_parts.length > 1) {\n                    var href_parms_str = href_parts[1];\n                    var href_parms = href_parms_str.split(\"&\");\n                    for (var index = 0; index < href_parms.length; index++) {\n                        if (href_parms[index].indexOf(\"operation\") != -1) {\n                            // Found operation parm; get operation value.\n                            operation = href_parms[index].split(\"=\")[1];\n                            operation = operation.replace(/\\+/g, \" \");\n                        } else if (href_parms[index].indexOf(\"id\") != -1) {\n                            // Found id parm; get id value.\n                            id = href_parms[index].split(\"=\")[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for operation details\n        if (operation && id) {\n            // show confirmation box\n            if (\n                confirmation_text &&\n                confirmation_text !== \"\" &&\n                confirmation_text != \"None\" &&\n                confirmation_text != \"null\"\n            )\n                if (!confirm(confirmation_text)) return false;\n\n            // use small characters for operation?!\n            operation = operation.toLowerCase();\n\n            // Update grid.\n            this.grid.set({\n                operation: operation,\n                item_ids: id\n            });\n\n            // Do operation. If operation cannot be performed asynchronously, redirect to location.\n            if (target == \"top\") {\n                window.top.location = `${href}?${$.param(this.grid.get_url_data())}`;\n            } else if (target == \"center\") {\n                $(\"#galaxy_main\").attr(\"src\", `${href}?${$.param(this.grid.get_url_data())}`);\n            } else {\n                this.update_grid();\n            }\n\n            // done\n            return false;\n        }\n\n        // refresh grid\n        if (href) {\n            this.go_to(target, href);\n            return false;\n        }\n\n        // refresh grid\n        this.update_grid();\n\n        // done\n        return false;\n    },\n\n    // go to url\n    go_to: function(target, href) {\n        // get slide status\n        var advanced_search = this.$el.find(\"#advanced-search\").is(\":visible\");\n        this.grid.set(\"advanced_search\", advanced_search);\n\n        // get default url\n        if (!href) {\n            href = `${this.grid.get(\"url_base\")}?${$.param(this.grid.get_url_data())}`;\n        }\n\n        // clear grid of transient request attributes.\n        this.grid.set({\n            operation: undefined,\n            item_ids: undefined\n        });\n        switch (target) {\n            case \"center\":\n                $(\"#galaxy_main\").attr(\"src\", href);\n                break;\n            case \"top\":\n                window.top.location = href;\n                break;\n            default:\n                window.location = href;\n        }\n    },\n\n    // Update grid.\n    update_grid: function() {\n        // If there's an operation, do POST; otherwise, do GET.\n        var method = this.grid.get(\"operation\") ? \"POST\" : \"GET\";\n\n        // Show overlay to indicate loading and prevent user actions.\n        this.$el.find(\".loading-elt-overlay\").show();\n        var self = this;\n        $.ajax({\n            type: method,\n            url: self.grid.get(\"url_base\"),\n            data: self.grid.get_url_data(),\n            error: function() {\n                alert(\"Grid refresh failed\");\n            },\n            success: function(response_text) {\n                // backup\n                var embedded = self.grid.get(\"embedded\");\n                var insert = self.grid.get(\"insert\");\n                var advanced_search = self.$el.find(\"#advanced-search\").is(\":visible\");\n\n                // request new configuration\n                var json = response_text;\n\n                // update\n                json.embedded = embedded;\n                json.insert = insert;\n                json.advanced_search = advanced_search;\n\n                // Initialize new grid config\n                self.init_grid(json);\n\n                // Hide loading overlay.\n                self.$el.find(\".loading-elt-overlay\").hide();\n            },\n            complete: function() {\n                // Clear grid of transient request attributes.\n                self.grid.set({\n                    operation: undefined,\n                    item_ids: undefined\n                });\n            }\n        });\n    }\n});\n"]}