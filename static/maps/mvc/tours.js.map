{"version":3,"sources":["mvc/tours.js"],"names":["giveTourWithData","data","hookedTourData","hooked_tour_from_data","sessionStorage","setItem","JSON","stringify","tour","Tour","extend","steps","tour_opts","init","giveTourById","tour_id","url","gxy_root","$","getJSON","ToursView","activeGalaxyTourRunner","et","parse","getItem","window","self","top","_","restart","Galaxy","root","storage","onEnd","postclick","orphan","each","step","onShow","preclick","onShown","click","onHide","textinsert","TourItem","Backbone","urlRoot","val","trigger","model","initialize","warn","path","Model","console","Tours","Collection","render","tourtags","View","this","success","error","tpl","template","tourpage_template","tours","tourtagorder","undefined","Untagged","preventDefault","name","on","push","display","tags","tag","elem","toUpperCase","slice","toggleClass","sort","$el","html","models","e","goTo","target","hasClass"],"mappings":"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","file":"../../scripts/mvc/tours.js","sourcesContent":["import _l from \"utils/localization\";\n/**\n *  This is the primary galaxy tours definition, currently only used for\n *  rendering a tour menu.\n */\n\n// bootstrap-tour configures a window.Tour object; keep a local ref.\nimport \"libs/bootstrap-tour\";\nlet Tour = window.Tour;\n\nvar gxy_root = typeof Galaxy === \"undefined\" ? \"/\" : Galaxy.root;\n\nvar tourpage_template = `<h2>Galaxy Tours</h2>\n<p>This page presents a list of interactive tours available on this Galaxy server.\nSelect any tour to get started (and remember, you can click 'End Tour' at any time).</p>\n\n<div class=\"col-12 btn-group\" role=\"group\" aria-label=\"Tag selector\">\n    <% _.each(tourtagorder, function(tag) { %>\n    <button class=\"btn btn-primary tag-selector-button\" tag-selector-button=\"<%- tag %>\">\n        <%- tag %>\n    </button>\n    <% }); %>\n</div>\n\n<% _.each(tourtagorder, function(tourtagkey) { %>\n<div tag=\"<%- tourtagkey %>\" style=\"display: block;\">\n    <% var tourtag = tourtags[tourtagkey]; %>\n    <h4>\n        <%- tourtag.name %>\n    </h4>\n    <ul class=\"list-group\">\n    <% _.each(tourtag.tours, function(tour) { %>\n        <li class=\"list-group-item\">\n            <a href=\"/tours/<%- tour.id %>\" class=\"tourItem\" data-tour.id=<%- tour.id %>>\n                <%- tour.name || tour.id %>\n            </a>\n             - <%- tour.attributes.description || \"No description given.\" %>\n             <% _.each(tour.attributes.tags, function(tag) { %>\n                <span class=\"label label-primary sm-label-pad\">\n                    <%- tag.charAt(0).toUpperCase() + tag.slice(1) %>\n                </span>\n             <% }); %>\n        </li>\n    <% }); %>\n    </ul>\n</div>\n<% }); %>`;\n\nvar tour_opts = {\n    storage: window.sessionStorage,\n    onEnd: function() {\n        sessionStorage.removeItem(\"activeGalaxyTour\");\n    },\n    delay: 150, // Attempts to make it look natural\n    orphan: true\n};\n\nvar hooked_tour_from_data = data => {\n    _.each(data.steps, step => {\n        if (step.preclick) {\n            step.onShow = () => {\n                _.each(step.preclick, preclick => {\n                    // TODO: click delay between clicks\n                    $(preclick).click();\n                });\n            };\n        }\n        if (step.postclick) {\n            step.onHide = () => {\n                _.each(step.postclick, postclick => {\n                    // TODO: click delay between clicks\n                    $(postclick).click();\n                });\n            };\n        }\n        if (step.textinsert) {\n            // Have to manually trigger a change here, for some\n            // elements which have additional logic, like the\n            // upload input box\n            step.onShown = () => {\n                $(step.element)\n                    .val(step.textinsert)\n                    .trigger(\"change\");\n            };\n        }\n        if (step.path) {\n            // Galaxy does *not* support automagic path navigation right now in\n            // Tours -- too many ways to get your client 'stuck' in automatic\n            // navigation loops.  We can probably re-enable this as our client\n            // routing matures.\n            console.warn(\n                \"This Galaxy Tour is attempting to use path navigation.  This is known to be unstable and can possibly get the Galaxy client 'stuck' in a tour, and at this time is not allowed.\"\n            );\n            delete step.path;\n        }\n    });\n    return data;\n};\n\nvar TourItem = Backbone.Model.extend({\n    urlRoot: `${gxy_root}api/tours`\n});\n\nvar Tours = Backbone.Collection.extend({\n    url: `${gxy_root}api/tours`,\n    model: TourItem\n});\n\nexport var ToursView = Backbone.View.extend({\n    title: _l(\"Tours\"),\n    initialize: function() {\n        var self = this;\n        this.setElement(\"<div/>\");\n        this.model = new Tours();\n        this.model.fetch({\n            success: function() {\n                self.render();\n            },\n            error: function() {\n                // Do something.\n                console.error(\"Failed to fetch tours.\");\n            }\n        });\n    },\n\n    render: function() {\n        var tpl = _.template(tourpage_template);\n\n        var tourtags = {};\n        _.each(this.model.models, tour => {\n            if (tour.attributes.tags === null) {\n                if (tourtags.Untagged === undefined) {\n                    tourtags.Untagged = { name: \"Untagged\", tours: [] };\n                }\n                tourtags.Untagged.tours.push(tour);\n            } else {\n                _.each(tour.attributes.tags, tag => {\n                    tag = tag.charAt(0).toUpperCase() + tag.slice(1);\n                    if (tourtags[tag] === undefined) {\n                        tourtags[tag] = { name: tag, tours: [] };\n                    }\n                    tourtags[tag].tours.push(tour);\n                });\n            }\n        });\n        var tourtagorder = Object.keys(tourtags).sort();\n\n        this.$el\n            .html(\n                tpl({\n                    tours: this.model.models,\n                    tourtags: tourtags,\n                    tourtagorder: tourtagorder\n                })\n            )\n            .on(\"click\", \".tourItem\", function(e) {\n                e.preventDefault();\n                giveTourById($(this).data(\"tour.id\"));\n            })\n            .on(\"click\", \".tag-selector-button\", e => {\n                var elem = $(e.target);\n                var display = \"block\";\n                var tag = elem.attr(\"tag-selector-button\");\n\n                elem.toggleClass(\"btn-primary\");\n                elem.toggleClass(\"btn-secondary\");\n\n                if (elem.hasClass(\"btn-secondary\")) {\n                    display = \"none\";\n                }\n                $(`div[tag='${tag}']`).css({ display: display });\n            });\n    }\n});\n\nexport function giveTourWithData(data) {\n    let hookedTourData = hooked_tour_from_data(data);\n    sessionStorage.setItem(\"activeGalaxyTour\", JSON.stringify(data));\n    // Store tour steps in sessionStorage to easily persist w/o hackery.\n    let tour = new Tour(_.extend({ steps: hookedTourData.steps }, tour_opts));\n    // Always clean restart, since this is a new, explicit execution.\n    tour.init();\n    tour.goTo(0);\n    tour.restart();\n    return tour;\n}\n\nexport function giveTourById(tour_id) {\n    var url = `${gxy_root}api/tours/${tour_id}`;\n    $.getJSON(url, data => {\n        giveTourWithData(data);\n    });\n}\n\nexport function activeGalaxyTourRunner() {\n    var et = JSON.parse(sessionStorage.getItem(\"activeGalaxyTour\"));\n    if (et) {\n        et = hooked_tour_from_data(et);\n        if (et && et.steps) {\n            if (window && window.self === window.top) {\n                // Only kick off a new tour if this is the toplevel window (non-iframe).  This\n                // functionality actually *could* be useful, but we'd need to handle it better and\n                // come up with some design guidelines for tours jumping between windows.\n                // Disabling for now.\n                var tour = new Tour(\n                    _.extend(\n                        {\n                            steps: et.steps\n                        },\n                        tour_opts\n                    )\n                );\n                tour.init();\n                tour.restart();\n            }\n        }\n    }\n}\n\nexport default {\n    ToursView: ToursView,\n    giveTourWithData: giveTourWithData,\n    giveTourById: giveTourById,\n    activeGalaxyTourRunner: activeGalaxyTourRunner\n};\n"]}