{"version":3,"sources":["mvc/form/form-data.js"],"names":["Manager","Backbone","Model","extend","initialize","app","this","checksum","self","section","$el","find","each","id","$","attr","field","field_list","sum","JSON","stringify","value","collapsed","create","dict","input_id","input_value","_iterate","flat_id","result_dict","element_list","head","node","input","identifier","convert","name","block_prefix","block_label","indexOf","pos","section_label","length","block_indices","parseInt","substr","push","index","i","a","add","test_param","matchCase","selectedCase","undefined","ignore","collapsible_value","flat","payload","p_id","flat_dict","match","matchModel","model","callback","inputs","matchResponse","search","result","Array","new_id","separator","parent","response","children","child","hasClass","input_list","type","truevalue","falsevalue","cases","visitInputs","prefix","context","_","key","cache","j","Galaxy","emit","debug"],"mappings":"kHACO,IAAIA,EAAAA,EAAAA,QAAUC,SAASC,MAAMC,QAChCC,WAAY,SAASC,GACjBC,KAAKD,IAAMA,GAFZE,SAAIP,WACPI,IAAAA,EAAAA,GACII,EAAKH,KAQD,OAPPC,KAHsCD,IAAAI,QAAAC,IAAAC,KAAA,gBAAAC,KAAA,WAU/B,IAAIC,EAAKC,EAAER,MAAMS,KAAK,MAL9BC,EAAAR,EAAAH,IAAAY,WAAAJ,GACAN,IACQW,GAAJL,EAAIK,IAAJC,KAAAC,UAAAJ,EAAAK,OAAAL,EAAAK,SAAIH,IAAJF,EAAAM,UAAIJ,OAGAA,GAICK,OAAA,WAUL,SAAIC,EAAAA,EAAJC,EAAAC,GACAlB,EAAKmB,UAASC,GAASnB,EAOnBoB,EAAYD,GAAWF,EAL3BlB,EAAAH,IAAAyB,aAAAL,IACII,EAAAA,IAAAA,aAAJJ,GAAAf,IAAAK,KAAA,UAAAa,GAIIC,SAAAA,EAAAA,EAAAE,GACA,IAAA,IAAIvB,KAASsB,EAAAA,CACTtB,IAAAA,EAAKH,EAAIyB,GACZ,GAAAE,EAAAC,MAAA,CACJ,IAAAA,EAAAD,EAAAC,MACDL,EAAAM,EAKY,OAJZ,KAASC,IACAP,GAAaG,KAEdH,GAASK,EAAOG,KACRH,EAAAA,MACJ,IAAIL,SACAM,IACAN,KACHS,EAAA,KACDT,IAAAA,IAAWK,KAAXD,EAAA,CACQC,IAAAA,EAARK,EAAAC,QAJuB,aAKnB,GAAKC,IACGC,GANW,WAMKC,OAChBC,EAAAA,KAAJC,SAAAN,EAAAO,OAAAL,KACIH,IACCA,EAALC,EAA8BO,OAAA,EAAAL,KAItBG,EAAAA,KAAAA,SAAAA,EAAAA,GAAAA,OAAcG,EAAKF,IACnBG,EAAA,EACIV,IAAAA,IAAAA,KAAAA,EACHF,EAAAP,EAAA,IAAAmB,IAAAf,EAAAK,EAAAM,EAAAK,KAER,MACDL,IAAAA,cAAmB,IAAAtB,EAAAb,EAAUyC,IAAVhC,WAAAgB,EAAApB,IAAAQ,QAAA6B,EAAnBtB,EAAmB,IAAnBK,EAAAkB,WAAAf,KAAAH,EAAApB,GAAAQ,GACA0B,IAAAA,EAAAK,EAAAnB,EAAAZ,IACcsB,GAAdU,GACIlB,EAAAA,EAAWP,EAAXK,EAAsBc,GAAXnB,YAA2BS,IAE1C,MACJ,IAAA,UACIF,GAAId,EAAQb,MAAAoB,GAAoBK,GAAAA,GAChCiB,MACA,QACA,IAAAlC,EAAIqC,EAAAA,IAAAA,WAAoBpB,EAAApB,IACpBsB,GAAAA,GAAAA,EAAQP,QACXP,EAAAL,EAAAK,cACDiC,IAAArB,EAAAsB,QAAAtB,EAAAsB,QAAAlC,KACCL,EAALM,WAAAW,EAAAuB,oBACanC,EAAOoC,EAAPD,mBAEbN,EAAAtB,EAAAK,EAAApB,GAAAQ,GACQL,EAAQR,UACRQ,IAASA,IAAAA,KAAbiB,EAA0ByB,QACd1C,EAAAA,EAAMK,EAAdR,GAAAoB,EAAAyB,QAAAC,OApEvB,IAAAnD,EANDF,KAeIkB,KALRlB,KAAAqB,SAAArB,KAAAD,IAAAI,QAAAC,IAAAc,GASI,IAAIK,KAiEyB,OAtE7BvB,KAAAsD,aAqEiCzB,EAAA,GAAAX,GACJK,GAM5BgC,MAAA,SAAAjC,GACDO,OAAAA,KAAQyB,WAARtD,KAAAsD,UAAAhC,IAaJwB,UAAW,SAASnB,EAAOZ,GACvB,OAAO+B,EAAUnB,EAAOZ,IAH5ByC,WAAA,SAAAC,EAAAC,GASI,IAAIxD,EAAOF,KAPf8C,EAAWW,EAAAE,OAAA,SAAAhC,EAASA,GAChBzB,EAAO4C,UAAUnB,IAlHkB+B,EAAA/B,EAAAzB,EAAAoD,UAAAxB,OA0H/B8B,cAAA,SAASN,GAGZ,SAJDO,EAAAtD,EAAAkB,GAzHmC,GAAA,iBAAAA,EAAA,CAuI3B,IAAIN,EAAWjB,EAAKoD,UAAU/C,GAP1CY,IASgB2C,EAAO3C,GAAYM,QAL3BvB,IAAAA,IAAOwC,KAAXjB,EAAA,CACA,IAASoC,EAAWpC,EACZ,GAAA,KAAAlB,EAAA,CACIY,IAAAA,EAAgBmC,IAChBnC,aAAU4C,QACVD,EAAA,KAEDE,EAAAzD,EAAA0D,EAAAD,EAECH,EAAAG,EAAIA,EAAJtB,KAlBJgB,IAAAA,KACHxD,EAAAF,KAsBY,OADGiE,EAAAA,GAAAA,GACHH,GAKZzC,SAAA,SAAA6C,EAAAhD,GACJ,IAAAhB,EAAAF,KACUmE,EAAAA,GAAXC,WACA9D,KAAOwD,WA1J4B,IAAAO,EAAArE,KAoK3BO,EAAKC,EAAE6D,GAAO5D,KAAK,MAP/B,GAAAD,EAAA6D,GAAAC,SAAA,eAAA,CASY,IAAI3C,EAAQzB,EAAKH,IAAIwE,WAAWhE,GAP5Cc,EAAUd,GAAAoB,IAASuC,MAAQhD,OACnBhB,EAAAA,SAAJmE,EAAAnD,EAAAX,SAEA6D,EAAS9D,SAAK+D,EAAAnD,QAUb4B,EAVD,SAAAnB,EAAAZ,GAWH,WAAAY,EAAAkB,WAAA2B,OAUOzD,EAvLL,QAAAA,EAuLaY,EAAMkB,WAAW4B,WAAa,OAE9B9C,EAAMkB,WAAW6B,YAAc,SAL5C,IAAI5B,IAAAA,KAAAA,EAAY6B,MACnB,GAAIhD,EAAMkB,MAAAA,GAAAA,OAAN9B,EACA,OAAIA,EAGAA,OAAAA,iBAOP,IAAA6D,EAAAA,EAAAA,YAAA,SAAAA,EAAAjB,EAAAD,EAAAmB,EAAAC,GACDA,EAAAtE,EAAQX,QAAR,KAAAiF,GACHC,EAdMzE,KAAAqD,EAAA,SAAAhC,GAuBKA,GAASA,EAAM6C,MAAQ7C,EAAMG,OAPzCgD,EAAAnD,EAAAG,MAAAH,KAWI,IAAK,IAAIqD,KAAOrB,EAAQ,CACpB,IAAIjC,EAAOiC,EAAOqB,GARfJ,EAAAA,KAAAA,EAAAA,MAAAA,EACPE,IAAAA,EAAUtE,EAAAqE,EAAArE,IAAmBsE,EAA7BhD,KAAAJ,EAAAI,KACAiD,OAAOpB,EAAPa,MACI,IAAI7C,SACAmD,EAAAA,KAAAA,EAAQnD,MAAR,SAAAsD,EAAAC,GACHN,EAAAK,EAAAvB,EAAA5B,EAAA,IAAAoD,EAAAJ,KAEA,MACD,IAAIpD,cACJA,GAAKI,EAAOJ,WAAasD,CACrBlD,EAAO+C,EAAYA,WAAUnD,EAA7BI,IAAOJ,EAAoCA,WAA/CI,KAAAgD,GACQpD,IAAAA,EAARoB,EAAApB,EAAAA,EAAAmB,WAAA9B,QACI,GAAKgC,EACCzC,EAAU2E,EAAON,MAAA5B,GAAcY,OAAAD,EAAA5B,EAAAgD,GAAjCK,OAAAC,KAAAC,MAAA,+CAAAvD,EAAA,UAKAqD,OAAIzD,KAAKmB,MAAT,qEAAqBf,EAArB,KAEI,MACA,IAAA,UACI8C,EAAAA,EAAAA,OAAYlD,EAAWqB,EAAAA,GAC1B,MACGoC,QACHzB,EAAAhC,EAAAI,EAAAgD,iBAMLF,QAAAA,EACAA,YAAAA","file":"../../../scripts/mvc/form/form-data.js","sourcesContent":["/* This class maps the form dom to an api compatible javascript dictionary. */\nexport var Manager = Backbone.Model.extend({\n    initialize: function(app) {\n        this.app = app;\n    },\n\n    /** Creates a checksum. */\n    checksum: function() {\n        var sum = \"\";\n        var self = this;\n        this.app.section.$el.find(\".section-row\").each(function() {\n            var id = $(this).attr(\"id\");\n            var field = self.app.field_list[id];\n            if (field) {\n                sum += `${id}:${JSON.stringify(field.value && field.value())}:${field.collapsed};`;\n            }\n        });\n        return sum;\n    },\n\n    /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n    create: function() {\n        var self = this;\n\n        // get raw dictionary from dom\n        var dict = {};\n        this._iterate(this.app.section.$el, dict);\n\n        // add to result dictionary, label elements\n        var result_dict = {};\n        this.flat_dict = {};\n        function add(flat_id, input_id, input_value) {\n            self.flat_dict[flat_id] = input_id;\n            result_dict[flat_id] = input_value;\n            if (self.app.element_list[input_id]) {\n                self.app.element_list[input_id].$el.attr(\"tour_id\", flat_id);\n            }\n        }\n        // converter between raw dictionary and job dictionary\n        function convert(identifier, head) {\n            for (var index in head) {\n                var node = head[index];\n                if (node.input) {\n                    var input = node.input;\n                    var flat_id = identifier;\n                    if (identifier !== \"\") {\n                        flat_id += \"|\";\n                    }\n                    flat_id += input.name;\n                    switch (input.type) {\n                        case \"repeat\":\n                            var section_label = \"section-\";\n                            var block_indices = [];\n                            var block_prefix = null;\n                            for (var block_label in node) {\n                                var pos = block_label.indexOf(section_label);\n                                if (pos != -1) {\n                                    pos += section_label.length;\n                                    block_indices.push(parseInt(block_label.substr(pos)));\n                                    if (!block_prefix) {\n                                        block_prefix = block_label.substr(0, pos);\n                                    }\n                                }\n                            }\n                            block_indices.sort((a, b) => a - b);\n                            index = 0;\n                            for (var i in block_indices) {\n                                convert(`${flat_id}_${index++}`, node[block_prefix + block_indices[i]]);\n                            }\n                            break;\n                        case \"conditional\":\n                            var value = self.app.field_list[input.id].value();\n                            add(`${flat_id}|${input.test_param.name}`, input.id, value);\n                            var selectedCase = matchCase(input, value);\n                            if (selectedCase != -1) {\n                                convert(flat_id, head[`${input.id}-section-${selectedCase}`]);\n                            }\n                            break;\n                        case \"section\":\n                            convert((!input.flat && flat_id) || \"\", node);\n                            break;\n                        default:\n                            var field = self.app.field_list[input.id];\n                            if (field && field.value) {\n                                value = field.value();\n                                if (input.ignore === undefined || input.ignore != value) {\n                                    if (field.collapsed && input.collapsible_value) {\n                                        value = input.collapsible_value;\n                                    }\n                                    add(flat_id, input.id, value);\n                                    if (input.payload) {\n                                        for (var p_id in input.payload) {\n                                            add(p_id, input.id, input.payload[p_id]);\n                                        }\n                                    }\n                                }\n                            }\n                    }\n                }\n            }\n        }\n        convert(\"\", dict);\n        return result_dict;\n    },\n\n    /** Matches flat ids to corresponding input element\n     * @param{string} flat_id - Flat input id to be looked up.\n     */\n    match: function(flat_id) {\n        return this.flat_dict && this.flat_dict[flat_id];\n    },\n\n    /** Match conditional values to selected cases\n     */\n    matchCase: function(input, value) {\n        return matchCase(input, value);\n    },\n\n    /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n     */\n    matchModel: function(model, callback) {\n        var self = this;\n        visitInputs(model.inputs, (input, name) => {\n            if (self.flat_dict[name]) {\n                callback(input, self.flat_dict[name]);\n            }\n        });\n    },\n\n    /** Matches identifier from api response to input elements e.g. used to display validation errors\n     */\n    matchResponse: function(response) {\n        var result = {};\n        var self = this;\n        function search(id, head) {\n            if (typeof head === \"string\") {\n                var input_id = self.flat_dict[id];\n                if (input_id) {\n                    result[input_id] = head;\n                }\n            } else {\n                for (var i in head) {\n                    var new_id = i;\n                    if (id !== \"\") {\n                        var separator = \"|\";\n                        if (head instanceof Array) {\n                            separator = \"_\";\n                        }\n                        new_id = id + separator + new_id;\n                    }\n                    search(new_id, head[i]);\n                }\n            }\n        }\n        search(\"\", response);\n        return result;\n    },\n\n    /** Map dom tree to dictionary tree with input elements.\n     */\n    _iterate: function(parent, dict) {\n        var self = this;\n        var children = $(parent).children();\n        children.each(function() {\n            var child = this;\n            var id = $(child).attr(\"id\");\n            if ($(child).hasClass(\"section-row\")) {\n                var input = self.app.input_list[id];\n                dict[id] = (input && { input: input }) || {};\n                self._iterate(child, dict[id]);\n            } else {\n                self._iterate(child, dict);\n            }\n        });\n    }\n});\n\n/** Match conditional values to selected cases\n * @param{dict}   input     - Definition of conditional input parameter\n * @param{dict}   value     - Current value\n */\nexport var matchCase = (input, value) => {\n    if (input.test_param.type == \"boolean\") {\n        if (value == \"true\") {\n            value = input.test_param.truevalue || \"true\";\n        } else {\n            value = input.test_param.falsevalue || \"false\";\n        }\n    }\n    for (var i in input.cases) {\n        if (input.cases[i].value == value) {\n            return i;\n        }\n    }\n    return -1;\n};\n\n/** Visits tool inputs\n * @param{dict}   inputs    - Nested dictionary of input elements\n * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n */\nexport var visitInputs = (inputs, callback, prefix, context) => {\n    context = $.extend(true, {}, context);\n    _.each(inputs, input => {\n        if (input && input.type && input.name) {\n            context[input.name] = input;\n        }\n    });\n    for (var key in inputs) {\n        var node = inputs[key];\n        node.name = node.name || key;\n        var name = prefix ? `${prefix}|${node.name}` : node.name;\n        switch (node.type) {\n            case \"repeat\":\n                _.each(node.cache, (cache, j) => {\n                    visitInputs(cache, callback, `${name}_${j}`, context);\n                });\n                break;\n            case \"conditional\":\n                if (node.test_param) {\n                    callback(node.test_param, `${name}|${node.test_param.name}`, context);\n                    var selectedCase = matchCase(node, node.test_param.value);\n                    if (selectedCase != -1) {\n                        visitInputs(node.cases[selectedCase].inputs, callback, name, context);\n                    } else {\n                        Galaxy.emit.debug(`form-data::visitInputs() - Invalid case for ${name}.`);\n                    }\n                } else {\n                    Galaxy.emit.debug(`form-data::visitInputs() - Conditional test parameter missing for ${name}.`);\n                }\n                break;\n            case \"section\":\n                visitInputs(node.inputs, callback, name, context);\n                break;\n            default:\n                callback(node, name, context);\n        }\n    }\n};\n\nexport default {\n    Manager: Manager,\n    visitInputs: visitInputs\n};\n"]}