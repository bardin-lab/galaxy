{"version":3,"sources":["mvc/form/form-view.js"],"names":["View","Backbone","extend","initialize","options","this","model","Model","initial_errors","cls","icon","always_refresh","status","hide_operations","onchange","set","setElement","render","update","new_model","input_id","input","self","_","isEqual","node","field_list","field","indexOf","type","new_options","i","opt","length","push","value","Galaxy","label","input_list","is_dynamic","wait","unwait","active","highlight","message","silent","input_element","element_list","error","portlet","expand","trigger","$panel","css","first","animate","scrollTop","$el","offset","top","errors","data","matchResponse","error_messages","off","_formData2","default","Manager","_renderForm","get","attributes","current_check","checksum","on","refresh_on_change","new_check","each","$","remove","inputs","_uiPortlet2","title","operations","collapsible","collapsed","onchange_title","append","section","buttons","emit","debug"],"mappings":"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","file":"../../../scripts/mvc/form/form-view.js","sourcesContent":["/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\nimport Portlet from \"mvc/ui/ui-portlet\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport FormSection from \"mvc/form/form-section\";\nimport FormData from \"mvc/form/form-data\";\n\nexport var View = Backbone.View.extend({\n    initialize: function(options) {\n        this.model = new Backbone.Model({\n            initial_errors: false,\n            cls: \"ui-portlet-limited\",\n            icon: null,\n            always_refresh: true,\n            status: \"warning\",\n            hide_operations: false,\n            onchange: function() {}\n        }).set(options);\n        this.setElement(\"<div/>\");\n        this.render();\n    },\n\n    /** Update available options */\n    update: function(new_model) {\n        var self = this;\n        this.data.matchModel(new_model, (node, input_id) => {\n            var input = self.input_list[input_id];\n            if (input && input.options) {\n                if (!_.isEqual(input.options, node.options)) {\n                    input.options = node.options;\n                    var field = self.field_list[input_id];\n                    if (field.update) {\n                        var new_options = [];\n                        if ([\"data\", \"data_collection\", \"drill_down\"].indexOf(input.type) != -1) {\n                            new_options = input.options;\n                        } else {\n                            for (var i in node.options) {\n                                var opt = node.options[i];\n                                if (opt.length > 2) {\n                                    new_options.push({\n                                        label: opt[0],\n                                        value: opt[1]\n                                    });\n                                }\n                            }\n                        }\n                        field.update(new_options);\n                        field.trigger(\"change\");\n                        Galaxy.emit.debug(\"form-view::update()\", `Updating options for ${input_id}`);\n                    }\n                }\n            }\n        });\n    },\n\n    /** Set form into wait mode */\n    wait: function(active) {\n        for (var i in this.input_list) {\n            var field = this.field_list[i];\n            var input = this.input_list[i];\n            if (input.is_dynamic && field.wait && field.unwait) {\n                field[active ? \"wait\" : \"unwait\"]();\n            }\n        }\n    },\n\n    /** Highlight and scroll to input element (currently only used for error notifications) */\n    highlight: function(input_id, message, silent) {\n        var input_element = this.element_list[input_id];\n        if (input_element) {\n            input_element.error(message || \"Please verify this parameter.\");\n            this.portlet.expand();\n            this.trigger(\"expand\", input_id);\n            if (!silent) {\n                var $panel = this.$el\n                    .parents()\n                    .filter(function() {\n                        return [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) != -1;\n                    })\n                    .first();\n                $panel.animate(\n                    {\n                        scrollTop: $panel.scrollTop() + input_element.$el.offset().top - 120\n                    },\n                    500\n                );\n            }\n        }\n    },\n\n    /** Highlights errors */\n    errors: function(options) {\n        this.trigger(\"reset\");\n        if (options && options.errors) {\n            var error_messages = this.data.matchResponse(options.errors);\n            for (var input_id in this.element_list) {\n                if (error_messages[input_id]) {\n                    this.highlight(input_id, error_messages[input_id], true);\n                }\n            }\n        }\n    },\n\n    /** Render tool form */\n    render: function() {\n        var self = this;\n        this.off(\"change\");\n        this.off(\"reset\");\n        // contains the dom field elements as created by the parameter factory i.e. form-parameters\n        this.field_list = {};\n        // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n        this.input_list = {};\n        // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n        this.element_list = {};\n        // converts the form into a json data structure\n        this.data = new FormData.Manager(this);\n        this._renderForm();\n        this.data.create();\n        if (this.model.get(\"initial_errors\")) {\n            this.errors(this.model.attributes);\n        }\n        // add listener which triggers on checksum change, and reset the form input wrappers\n        var current_check = this.data.checksum();\n        this.on(\"change\", input_id => {\n            var input = self.input_list[input_id];\n            if (!input || input.refresh_on_change || self.model.get(\"always_refresh\")) {\n                var new_check = self.data.checksum();\n                if (new_check != current_check) {\n                    current_check = new_check;\n                    self.model.get(\"onchange\")();\n                }\n            }\n        });\n        this.on(\"reset\", () => {\n            _.each(self.element_list, input_element => {\n                input_element.reset();\n            });\n        });\n        return this;\n    },\n\n    /** Renders/appends dom elements of the form */\n    _renderForm: function() {\n        $(\".tooltip\").remove();\n        var options = this.model.attributes;\n        this.message = new Ui.UnescapedMessage();\n        this.section = new FormSection.View(this, {\n            inputs: options.inputs\n        });\n        this.portlet = new Portlet.View({\n            icon: options.icon,\n            title: options.title,\n            cls: options.cls,\n            operations: !options.hide_operations && options.operations,\n            buttons: options.buttons,\n            collapsible: options.collapsible,\n            collapsed: options.collapsed,\n            onchange_title: options.onchange_title\n        });\n        this.portlet.append(this.message.$el);\n        this.portlet.append(this.section.$el);\n        this.$el.empty();\n        if (options.inputs) {\n            this.$el.append(this.portlet.$el);\n        }\n        if (options.message) {\n            this.message.update({\n                persistent: true,\n                status: options.status,\n                message: options.message\n            });\n        }\n        Galaxy.emit.debug(\"form-view::initialize()\", \"Completed\");\n    }\n});\n\nexport default View;\n"]}