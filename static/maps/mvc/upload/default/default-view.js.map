{"version":3,"sources":["mvc/upload/default/default-view.js"],"names":["Backbone","View","extend","upload_size","collection","_uploadModel2","default","Collection","counter","announce","success","error","running","reset","this","initialize","app","self","options","list_extensions","list_genomes","ui_button","ftp_upload_site","currentFtp","setElement","_template","$","_uiMisc2","Button","title","_localization2","onclick","uploadbox","select","btnFtp","id","icon","btnCreate","$uploadtable","_eventCreate","_eventStart","_eventReset","btnClose","btnStart","_","each","btnStop","btnReset","prepend","button","$el","$uploadbox","nginx_upload_path","index","file","toData","get","history_id","percentage","message","_eventSuccess","_eventError","complete","_eventAnnounce","container","_uiSelect2","ondragover","ext","composite_files","onchange","extension","ondragleave","on","e","target","select_extension","text","value","list","data","filter","preventDefault","_changeExtension","css","default_genome","genome","_changeGenome","placement","$container","model","upload_row","_defaultRow2","find","append","render","select_genome","new_content","compatible","html","enable_reset","enable_start","show_table","enable_sources","new_model","file_name","name","file_size","btnLocal","file_mode","file_path","file_data","add","_eventProgress","it","_uploadPercentage","set","status","upload_completed","Galaxy","currHistoryPanel","info","_eventRemove","_eventComplete","_eventFtp","ftp","size","empty","_uploadFtp3","onadd","ftp_file","mode","path","onremove","model_index","currentHistory","_uploadFtp","_eventStop","default_extension","defaults_only","remove","url","length","uploadpost"],"mappings":"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","file":"../../../../scripts/mvc/upload/default/default-view.js","sourcesContent":["import _l from \"utils/localization\";\n/** Renders contents of the default uploader */\nimport Utils from \"utils/utils\";\nimport UploadModel from \"mvc/upload/upload-model\";\nimport UploadRow from \"mvc/upload/default/default-row\";\nimport UploadFtp from \"mvc/upload/upload-ftp\";\nimport UploadExtension from \"mvc/upload/upload-extension\";\nimport Popover from \"mvc/ui/ui-popover\";\nimport Select from \"mvc/ui/ui-select\";\nimport Ui from \"mvc/ui/ui-misc\";\nimport LazyLimited from \"mvc/lazy/lazy-limited\";\nimport \"utils/uploadbox\";\nexport default Backbone.View.extend({\n    // current upload size in bytes\n    upload_size: 0,\n\n    // contains upload row models\n    collection: new UploadModel.Collection(),\n\n    // keeps track of the current uploader state\n    counter: {\n        announce: 0,\n        success: 0,\n        error: 0,\n        running: 0,\n        reset: function() {\n            this.announce = this.success = this.error = this.running = 0;\n        }\n    },\n\n    initialize: function(app) {\n        var self = this;\n        this.app = app;\n        this.options = app.options;\n        this.list_extensions = app.list_extensions;\n        this.list_genomes = app.list_genomes;\n        this.ui_button = app.ui_button;\n        this.ftp_upload_site = app.currentFtp();\n\n        // build template\n        this.setElement(this._template());\n        this.$uploadbox = this.$(\".upload-box\");\n        this.$uploadtable = this.$(\".upload-table\");\n\n        // append buttons to dom\n        this.btnLocal = new Ui.Button({\n            id: \"btn-local\",\n            title: _l(\"Choose local file\"),\n            onclick: function() {\n                self.uploadbox.select();\n            },\n            icon: \"fa fa-laptop\"\n        });\n        this.btnFtp = new Ui.Button({\n            id: \"btn-ftp\",\n            title: _l(\"Choose FTP file\"),\n            onclick: function() {\n                self._eventFtp();\n            },\n            icon: \"fa fa-folder-open-o\"\n        });\n        this.btnCreate = new Ui.Button({\n            id: \"btn-new\",\n            title: \"Paste/Fetch data\",\n            onclick: function() {\n                self._eventCreate();\n            },\n            icon: \"fa fa-edit\"\n        });\n        this.btnStart = new Ui.Button({\n            id: \"btn-start\",\n            title: _l(\"Start\"),\n            onclick: function() {\n                self._eventStart();\n            }\n        });\n        this.btnStop = new Ui.Button({\n            id: \"btn-stop\",\n            title: _l(\"Pause\"),\n            onclick: function() {\n                self._eventStop();\n            }\n        });\n        this.btnReset = new Ui.Button({\n            id: \"btn-reset\",\n            title: _l(\"Reset\"),\n            onclick: function() {\n                self._eventReset();\n            }\n        });\n        this.btnClose = new Ui.Button({\n            id: \"btn-close\",\n            title: _l(\"Close\"),\n            onclick: function() {\n                self.app.modal.hide();\n            }\n        });\n        _.each(\n            [this.btnLocal, this.btnFtp, this.btnCreate, this.btnStop, this.btnReset, this.btnStart, this.btnClose],\n            button => {\n                self.$(\".upload-buttons\").prepend(button.$el);\n            }\n        );\n\n        // file upload\n        this.uploadbox = this.$uploadbox.uploadbox({\n            url: this.app.options.nginx_upload_path,\n            announce: function(index, file) {\n                self._eventAnnounce(index, file);\n            },\n            initialize: function(index) {\n                return self.app.toData([self.collection.get(index)], self.history_id);\n            },\n            progress: function(index, percentage) {\n                self._eventProgress(index, percentage);\n            },\n            success: function(index, message) {\n                self._eventSuccess(index, message);\n            },\n            error: function(index, message) {\n                self._eventError(index, message);\n            },\n            complete: function() {\n                self._eventComplete();\n            },\n            ondragover: function() {\n                self.$uploadbox.addClass(\"highlight\");\n            },\n            ondragleave: function() {\n                self.$uploadbox.removeClass(\"highlight\");\n            }\n        });\n\n        // add ftp file viewer\n        this.ftp = new Popover.View({\n            title: _l(\"FTP files\"),\n            container: this.btnFtp.$el\n        });\n\n        // select extension\n        this.select_extension = new Select.View({\n            css: \"upload-footer-selection\",\n            container: this.$(\".upload-footer-extension\"),\n            data: _.filter(this.list_extensions, ext => !ext.composite_files),\n            value: this.options.default_extension,\n            onchange: function(extension) {\n                self._changeExtension(extension);\n            }\n        });\n\n        // handle extension info popover\n        this.$(\".upload-footer-extension-info\")\n            .on(\"click\", e => {\n                new UploadExtension({\n                    $el: $(e.target),\n                    title: self.select_extension.text(),\n                    extension: self.select_extension.value(),\n                    list: self.list_extensions,\n                    placement: \"top\"\n                });\n            })\n            .on(\"mousedown\", e => {\n                e.preventDefault();\n            });\n\n        // genome extension\n        this.select_genome = new Select.View({\n            css: \"upload-footer-selection\",\n            container: this.$(\".upload-footer-genome\"),\n            data: this.list_genomes,\n            value: this.options.default_genome,\n            onchange: function(genome) {\n                self._changeGenome(genome);\n            }\n        });\n\n        // Lazy load helper\n        this.loader = new LazyLimited({\n            $container: this.$uploadbox,\n            collection: this.collection,\n            new_content: function(model) {\n                var upload_row = new UploadRow(self, { model: model });\n                self.$uploadtable.find(\"> tbody:first\").append(upload_row.$el);\n                upload_row.render();\n                return upload_row;\n            }\n        });\n\n        // events\n        this.collection.on(\"remove\", model => {\n            self._eventRemove(model);\n        });\n        this.render();\n    },\n\n    render: function() {\n        var message = \"\";\n        if (this.counter.announce == 0) {\n            if (this.uploadbox.compatible()) {\n                message = \"&nbsp;\";\n            } else {\n                message =\n                    \"Browser does not support Drag & Drop. Try Firefox 4+, Chrome 7+, IE 10+, Opera 12+ or Safari 6+.\";\n            }\n        } else {\n            if (this.counter.running == 0) {\n                message = `You added ${\n                    this.counter.announce\n                } file(s) to the queue. Add more files or click 'Start' to proceed.`;\n            } else {\n                message = `Please wait...${this.counter.announce} out of ${this.counter.running} remaining.`;\n            }\n        }\n        this.$(\".upload-top-info\").html(message);\n        var enable_reset =\n            this.counter.running == 0 && this.counter.announce + this.counter.success + this.counter.error > 0;\n        var enable_start = this.counter.running == 0 && this.counter.announce > 0;\n        var enable_sources = this.counter.running == 0;\n        var show_table = this.counter.announce + this.counter.success + this.counter.error > 0;\n        this.btnReset[enable_reset ? \"enable\" : \"disable\"]();\n        this.btnStart[enable_start ? \"enable\" : \"disable\"]();\n        this.btnStart.$el[enable_start ? \"addClass\" : \"removeClass\"](\"btn-primary\");\n        this.btnStop[this.counter.running > 0 ? \"enable\" : \"disable\"]();\n        this.btnLocal[enable_sources ? \"enable\" : \"disable\"]();\n        this.btnFtp[enable_sources ? \"enable\" : \"disable\"]();\n        this.btnCreate[enable_sources ? \"enable\" : \"disable\"]();\n        this.btnFtp.$el[this.ftp_upload_site ? \"show\" : \"hide\"]();\n        this.$(\".upload-table\")[show_table ? \"show\" : \"hide\"]();\n        this.$(\".upload-helper\")[show_table ? \"hide\" : \"show\"]();\n    },\n\n    /** A new file has been dropped/selected through the uploadbox plugin */\n    _eventAnnounce: function(index, file) {\n        this.counter.announce++;\n        var new_model = new UploadModel.Model({\n            id: index,\n            file_name: file.name,\n            file_size: file.size,\n            file_mode: file.mode || \"local\",\n            file_path: file.path,\n            file_data: file\n        });\n        this.render();\n        this.collection.add(new_model);\n    },\n\n    /** Progress */\n    _eventProgress: function(index, percentage) {\n        var it = this.collection.get(index);\n        it.set(\"percentage\", percentage);\n        this.ui_button.model.set(\"percentage\", this._uploadPercentage(percentage, it.get(\"file_size\")));\n    },\n\n    /** Success */\n    _eventSuccess: function(index, message) {\n        var it = this.collection.get(index);\n        it.set({ percentage: 100, status: \"success\" });\n        this.ui_button.model.set(\"percentage\", this._uploadPercentage(100, it.get(\"file_size\")));\n        this.upload_completed += it.get(\"file_size\") * 100;\n        this.counter.announce--;\n        this.counter.success++;\n        this.render();\n        Galaxy.currHistoryPanel.refreshContents();\n    },\n\n    /** Error */\n    _eventError: function(index, message) {\n        var it = this.collection.get(index);\n        it.set({ percentage: 100, status: \"error\", info: message });\n        this.ui_button.model.set({\n            percentage: this._uploadPercentage(100, it.get(\"file_size\")),\n            status: \"danger\"\n        });\n        this.upload_completed += it.get(\"file_size\") * 100;\n        this.counter.announce--;\n        this.counter.error++;\n        this.render();\n    },\n\n    /** Queue is done */\n    _eventComplete: function() {\n        this.collection.each(model => {\n            model.get(\"status\") == \"queued\" && model.set(\"status\", \"init\");\n        });\n        this.counter.running = 0;\n        this.render();\n    },\n\n    /** Remove model from upload list */\n    _eventRemove: function(model) {\n        var status = model.get(\"status\");\n        if (status == \"success\") {\n            this.counter.success--;\n        } else if (status == \"error\") {\n            this.counter.error--;\n        } else {\n            this.counter.announce--;\n        }\n        this.uploadbox.remove(model.id);\n        this.render();\n    },\n\n    //\n    // events triggered by this view\n    //\n\n    /** Show/hide ftp popup */\n    _eventFtp: function() {\n        if (!this.ftp.visible) {\n            this.ftp.empty();\n            var self = this;\n            this.ftp.append(\n                new UploadFtp({\n                    collection: this.collection,\n                    ftp_upload_site: this.ftp_upload_site,\n                    onadd: function(ftp_file) {\n                        return self.uploadbox.add([\n                            {\n                                mode: \"ftp\",\n                                name: ftp_file.path,\n                                size: ftp_file.size,\n                                path: ftp_file.path\n                            }\n                        ]);\n                    },\n                    onremove: function(model_index) {\n                        self.collection.remove(model_index);\n                    }\n                }).$el\n            );\n            this.ftp.show();\n        } else {\n            this.ftp.hide();\n        }\n    },\n\n    /** Create a new file */\n    _eventCreate: function() {\n        this.uploadbox.add([{ name: \"New File\", size: 0, mode: \"new\" }]);\n    },\n\n    /** Start upload process */\n    _eventStart: function() {\n        if (this.counter.announce != 0 && this.counter.running == 0) {\n            // prepare upload process\n            var self = this;\n            this.upload_size = 0;\n            this.upload_completed = 0;\n            this.collection.each(model => {\n                if (model.get(\"status\") == \"init\") {\n                    model.set(\"status\", \"queued\");\n                    self.upload_size += model.get(\"file_size\");\n                }\n            });\n            this.ui_button.model.set({\n                percentage: 0,\n                status: \"success\"\n            });\n            this.counter.running = this.counter.announce;\n            this.history_id = this.app.currentHistory();\n\n            // package ftp files separately, and remove them from queue\n            this._uploadFtp();\n\n            // queue remaining files\n            this.uploadbox.start();\n            this.render();\n        }\n    },\n\n    /** Pause upload process */\n    _eventStop: function() {\n        if (this.counter.running > 0) {\n            this.ui_button.model.set(\"status\", \"info\");\n            $(\".upload-top-info\").html(\"Queue will pause after completing the current file...\");\n            this.uploadbox.stop();\n        }\n    },\n\n    /** Remove all */\n    _eventReset: function() {\n        if (this.counter.running == 0) {\n            var self = this;\n            this.collection.reset();\n            this.counter.reset();\n            this.uploadbox.reset();\n            this.select_extension.value(this.options.default_extension);\n            this.select_genome.value(this.options.default_genome);\n            this.ui_button.model.set(\"percentage\", 0);\n            this.render();\n        }\n    },\n\n    /** Update extension for all models */\n    _changeExtension: function(extension, defaults_only) {\n        var self = this;\n        this.collection.each(model => {\n            if (\n                model.get(\"status\") == \"init\" &&\n                (model.get(\"extension\") == self.options.default_extension || !defaults_only)\n            ) {\n                model.set(\"extension\", extension);\n            }\n        });\n    },\n\n    /** Update genome for all models */\n    _changeGenome: function(genome, defaults_only) {\n        var self = this;\n        this.collection.each(model => {\n            if (\n                model.get(\"status\") == \"init\" &&\n                (model.get(\"genome\") == self.options.default_genome || !defaults_only)\n            ) {\n                model.set(\"genome\", genome);\n            }\n        });\n    },\n\n    /** Package and upload ftp files in a single request */\n    _uploadFtp: function() {\n        var self = this;\n        var list = [];\n        this.collection.each(model => {\n            if (model.get(\"status\") == \"queued\" && model.get(\"file_mode\") == \"ftp\") {\n                self.uploadbox.remove(model.id);\n                list.push(model);\n            }\n        });\n        if (list.length > 0) {\n            $.uploadpost({\n                data: this.app.toData(list),\n                url: this.app.options.nginx_upload_path,\n                success: function(message) {\n                    _.each(list, model => {\n                        self._eventSuccess(model.id);\n                    });\n                },\n                error: function(message) {\n                    _.each(list, model => {\n                        self._eventError(model.id, message);\n                    });\n                }\n            });\n        }\n    },\n\n    /** Calculate percentage of all queued uploads */\n    _uploadPercentage: function(percentage, size) {\n        return (this.upload_completed + percentage * size) / this.upload_size;\n    },\n\n    /** Template */\n    _template: function() {\n        return (\n            '<div class=\"upload-view-default\">' +\n            '<div class=\"upload-top\">' +\n            '<h6 class=\"upload-top-info\"/>' +\n            \"</div>\" +\n            '<div class=\"upload-box\">' +\n            '<div class=\"upload-helper\"><i class=\"fa fa-files-o\"/>Drop files here</div>' +\n            '<table class=\"upload-table ui-table-striped\" style=\"display: none;\">' +\n            \"<thead>\" +\n            \"<tr>\" +\n            \"<th>Name</th>\" +\n            \"<th>Size</th>\" +\n            \"<th>Type</th>\" +\n            \"<th>Genome</th>\" +\n            \"<th>Settings</th>\" +\n            \"<th>Status</th>\" +\n            \"<th/>\" +\n            \"</tr>\" +\n            \"</thead>\" +\n            \"<tbody/>\" +\n            \"</table>\" +\n            \"</div>\" +\n            '<div class=\"upload-footer\">' +\n            '<span class=\"upload-footer-title\">Type (set all):</span>' +\n            '<span class=\"upload-footer-extension\"/>' +\n            '<span class=\"upload-footer-extension-info upload-icon-button fa fa-search\"/> ' +\n            '<span class=\"upload-footer-title\">Genome (set all):</span>' +\n            '<span class=\"upload-footer-genome\"/>' +\n            \"</div>\" +\n            '<div class=\"upload-buttons\"/>' +\n            \"</div>\"\n        );\n    }\n});\n"]}