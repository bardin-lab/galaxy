{"version":3,"sources":["mvc/upload/upload-ftp.js"],"names":["Backbone","View","extend","initialize","options","this","model","Model","cls","class_add","class_remove","class_partial","help_enabled","help_text","ftp_upload_site","collection","onchange","onremove","self","set","get","_template","$","onadd","render","$wait","$help","$content","$number","$warning","hide","$body","ajax","url","$select","root","method","success","ftp_files","_index","error","_renderTable","rows","length","size","_","each","ftp_file","push","_renderRow","html","_utils2","default","bytesToString","show","empty","_all","_refresh","attributes","$it","$icon","append","model_index","ftp_index","path","on","id","add","hasClass","index","undefined","_switch","removeClass","new_index","addClass","memo","element","counts","_templateRow","escape","ctime"],"mappings":"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","file":"../../../scripts/mvc/upload/upload-ftp.js","sourcesContent":["/** This renders the content of the ftp popup **/\nimport Utils from \"utils/utils\";\nexport default Backbone.View.extend({\n    initialize: function(options) {\n        var self = this;\n        this.model = new Backbone.Model({\n            cls: \"upload-ftp\",\n            class_add: \"upload-icon-button fa fa-square-o\",\n            class_remove: \"upload-icon-button fa fa-check-square-o\",\n            class_partial: \"upload-icon-button fa fa-minus-square-o\",\n            help_enabled: true,\n            help_text: `This Galaxy server allows you to upload files via FTP. To upload some files, log in to the FTP server at <strong>${\n                options.ftp_upload_site\n            }</strong> using your Galaxy credentials.`,\n            collection: null,\n            onchange: function() {},\n            onadd: function() {},\n            onremove: function() {}\n        }).set(options);\n        this.collection = this.model.get(\"collection\");\n        this.setElement(this._template());\n        this.$content = this.$(\".upload-ftp-content\");\n        this.$wait = this.$(\".upload-ftp-wait\");\n        this.$help = this.$(\".upload-ftp-help\");\n        this.$number = this.$(\".upload-ftp-number\");\n        this.$disk = this.$(\".upload-ftp-disk\");\n        this.$body = this.$(\".upload-ftp-body\");\n        this.$warning = this.$(\".upload-ftp-warning\");\n        this.$select = this.$(\".upload-ftp-select-all\");\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.$wait.show();\n        this.$content.hide();\n        this.$warning.hide();\n        this.$help.hide();\n        $.ajax({\n            url: `${Galaxy.root}api/remote_files`,\n            method: \"GET\",\n            success: function(ftp_files) {\n                self.model.set(\"ftp_files\", ftp_files);\n                self._index();\n                self._renderTable();\n            },\n            error: function() {\n                self._renderTable();\n            }\n        });\n    },\n\n    /** Fill table with ftp entries */\n    _renderTable: function() {\n        var self = this;\n        var ftp_files = this.model.get(\"ftp_files\");\n        this.rows = [];\n        if (ftp_files && ftp_files.length > 0) {\n            this.$body.empty();\n            var size = 0;\n            _.each(ftp_files, ftp_file => {\n                self.rows.push(self._renderRow(ftp_file));\n                size += ftp_file.size;\n            });\n            this.$number.html(`${ftp_files.length} files`);\n            this.$disk.html(Utils.bytesToString(size, true));\n            if (this.collection) {\n                this.$(\"._has_collection\").show();\n                this.$select\n                    .addClass(this.model.get(\"class_add\"))\n                    .off()\n                    .on(\"click\", () => {\n                        self._all();\n                    });\n                this._refresh();\n            }\n            this.$content.show();\n        } else {\n            this.$warning.show();\n        }\n        this.model.get(\"help_enabled\") && this.$help.show();\n        this.$wait.hide();\n    },\n\n    /** Add row */\n    _renderRow: function(ftp_file) {\n        var self = this;\n        var options = this.model.attributes;\n        var $it = $(this._templateRow(ftp_file));\n        var $icon = $it.find(\".icon\");\n        this.$body.append($it);\n        if (this.collection) {\n            var model_index = this.ftp_index[ftp_file.path];\n            $icon.addClass(model_index === undefined ? options.class_add : options.class_remove);\n            $it.on(\"click\", () => {\n                self._switch($icon, ftp_file);\n                self._refresh();\n            });\n        } else {\n            $it.on(\"click\", () => {\n                options.onchange(ftp_file);\n            });\n        }\n        return $icon;\n    },\n\n    /** Create ftp index */\n    _index: function() {\n        var self = this;\n        this.ftp_index = {};\n        this.collection &&\n            this.collection.each(model => {\n                if (model.get(\"file_mode\") == \"ftp\") {\n                    self.ftp_index[model.get(\"file_path\")] = model.id;\n                }\n            });\n    },\n\n    /** Select all event handler */\n    _all: function() {\n        var options = this.model.attributes;\n        var ftp_files = this.model.get(\"ftp_files\");\n        var add = this.$select.hasClass(options.class_add);\n        for (var index in ftp_files) {\n            var ftp_file = ftp_files[index];\n            var model_index = this.ftp_index[ftp_file.path];\n            if ((model_index === undefined && add) || (model_index !== undefined && !add)) {\n                this._switch(this.rows[index], ftp_file);\n            }\n        }\n        this._refresh();\n    },\n\n    /** Handle collection changes */\n    _switch: function($icon, ftp_file) {\n        $icon.removeClass();\n        var options = this.model.attributes;\n        var model_index = this.ftp_index[ftp_file.path];\n        if (model_index === undefined) {\n            var new_index = options.onadd(ftp_file);\n            $icon.addClass(options.class_remove);\n            this.ftp_index[ftp_file.path] = new_index;\n        } else {\n            options.onremove(model_index);\n            $icon.addClass(options.class_add);\n            this.ftp_index[ftp_file.path] = undefined;\n        }\n    },\n\n    /** Refresh select all button state */\n    _refresh: function() {\n        var counts = _.reduce(\n            this.ftp_index,\n            (memo, element) => {\n                element !== undefined && memo++;\n                return memo;\n            },\n            0\n        );\n        this.$select.removeClass();\n        if (counts == 0) {\n            this.$select.addClass(this.model.get(\"class_add\"));\n        } else {\n            this.$select.addClass(\n                counts == this.rows.length ? this.model.get(\"class_remove\") : this.model.get(\"class_partial\")\n            );\n        }\n    },\n\n    /** Template of row */\n    _templateRow: function(options) {\n        return `<tr class=\"upload-ftp-row\"><td class=\"_has_collection\" style=\"display: none;\"><div class=\"icon\"/></td><td class=\"ftp-name\">${_.escape(\n            options.path\n        )}</td><td class=\"ftp-size\">${Utils.bytesToString(options.size)}</td><td class=\"ftp-time\">${\n            options.ctime\n        }</td></tr>`;\n    },\n\n    /** Template of main view */\n    _template: function() {\n        return `<div class=\"${this.model.get(\n            \"cls\"\n        )}\"><div class=\"upload-ftp-wait fa fa-spinner fa-spin\"/><div class=\"upload-ftp-help\">${this.model.get(\n            \"help_text\"\n        )}</div><div class=\"upload-ftp-content\"><span style=\"whitespace: nowrap; float: left;\">Available files: </span><span style=\"whitespace: nowrap; float: right;\"><span class=\"upload-icon fa fa-file-text-o\"/><span class=\"upload-ftp-number\"/>&nbsp;&nbsp;<span class=\"upload-icon fa fa-hdd-o\"/><span class=\"upload-ftp-disk\"/></span><table class=\"grid\" style=\"float: left;\"><thead><tr><th class=\"_has_collection\" style=\"display: none;\"><div class=\"upload-ftp-select-all\"></th><th>Name</th><th>Size</th><th>Created</th></tr></thead><tbody class=\"upload-ftp-body\"/></table></div><div class=\"upload-ftp-warning warningmessage\">Your FTP directory does not contain any files.</div>`;\n        (\"<div>\");\n    }\n});\n"]}