{"version":3,"sources":["toolshed/groups/group-list-view.js"],"names":["mod_toastr","GroupListView","Backbone","View","extend","el","defaults","initialize","options","this","_","that","window","globalTS","groups","collection","_groupModel2","default","Groups","fetch","success","model","console","log","render","error","response","responseJSON","err_msg","$","hide","template","templateGroupsList","$el","html","length","models","renderRows","tooltip","css","i","renderOne","group","rowView","_groupListrowView2","GroupListRowView","find","append","tmpl_array","push","join"],"mappings":"6QAAYA,2KAGNC,EAAgBC,SAASC,KAAKC,QAChCC,GAAI,kBACJC,YAOAC,WAAY,SAASC,GACjBC,KAAKD,QAAUE,EAAEJ,SAASG,KAAKD,YAAeC,KAAKH,SAAUE,GAC7D,IAAMG,EAAOF,KACbG,OAAOC,SAASC,OAAOC,WAAa,IAAIC,EAAAC,QAAgBC,OACxDN,OAAOC,SAASC,OAAOC,WAAWI,OAC9BC,QAAS,SAASC,GACdC,QAAQC,IAAI,mBACZD,QAAQC,IAAIF,GACZV,EAAKa,UAETC,MAAO,SAASJ,EAAOK,QACkB,IAA1BA,EAASC,aAChB3B,EAAWyB,MAAMC,EAASC,aAAaC,SAEvC5B,EAAWyB,MAAM,0BAMjCN,MAAO,aA5BPd,OAAI,SAAAG,GACJF,KAAAA,QAFuCI,EAAAN,OAAAK,KAAAD,QAAAA,GAoCnCqB,EAAE,YAAYC,OAhClB,IAAAC,EAAAtB,KAAAuB,qBAkCIvB,KAAKwB,IAAIC,KAAKH,GAAWI,OAAQvB,OAAOC,SAASC,OAAOC,WAAWqB,OAAOD,UAC1E1B,KAAK4B,WAAWzB,OAAOC,SAASC,OAAOC,WAAWqB,QAClDP,EAAE,yBAAyBS,UAC3BT,EAAE,WAAWU,IAAI,WAAY,SA1BrBjB,WAAAA,SAAAA,GACAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAQC,EAARY,OAAAK,IAAA,CACA7B,IAAAA,EAAKa,EAALgB,GACH/B,KALmCgC,WAAAC,MAAAA,MAAAD,UAAxC,SAAAjC,GAcH,IA3BsCmC,EAAA,IAAAC,EAAA3B,QAAA4B,iBAAArC,GA6DnCC,KAAKwB,IAAIa,KAAK,oBAAoBC,OAAOJ,EAAQtC,KACpD2B,mBA9DsC,WAgGnC,IAAMgB,KAXV,OAaIA,EAAWC,KAAK,qBAChBD,EAAWC,KAAK,UAChBD,EAAWC,KAAK,mDAhCpBD,EAAAC,KAAA,4BACAD,EAAAC,KAAA,uCACAD,EAAAC,KAAA,iBACAD,EAAAC,KAAA,8CACAD,EAAAC,KAAA,cACAD,EAAAC,KAAA,sBAEAD,EAAAC,KAAA,0BAkCID,EAAWC,KAAK,8BAhCpBD,EAAAC,KAAA,eAkCID,EAAWC,KAAK,mCAEhBD,EAAWC,KAAK,eAhCpBD,EAAAC,KAAA,YACAD,EAAAC,KAAA,UACAD,EAAAC,KAAA,UAEAvC,EAAAqB,SAAAiB,EAAAE,KAAA,mBAsCAjD,cAAeA","file":"../../../scripts/toolshed/groups/group-list-view.js","sourcesContent":["import * as mod_toastr from \"libs/toastr\";\nimport mod_group_model from \"toolshed/groups/group-model\";\nimport mod_group_row from \"toolshed/groups/group-listrow-view\";\nconst GroupListView = Backbone.View.extend({\n    el: \"#groups_element\",\n    defaults: {},\n\n    /**\n     * Initialize and fetch the groups from server.\n     * Async render afterwards.\n     * @param  {object} options an object with options\n     */\n    initialize: function(options) {\n        this.options = _.defaults(this.options || {}, this.defaults, options);\n        const that = this;\n        window.globalTS.groups.collection = new mod_group_model.Groups();\n        window.globalTS.groups.collection.fetch({\n            success: function(model) {\n                console.log(\"received data: \");\n                console.log(model);\n                that.render();\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(response.responseJSON.err_msg);\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    fetch: function() {},\n\n    /**\n     * Render the groups table from the object's own collection.\n     */\n    render: function(options) {\n        this.options = _.extend(this.options, options);\n        $(\".tooltip\").hide();\n        const template = this.templateGroupsList();\n        this.$el.html(template({ length: window.globalTS.groups.collection.models.length }));\n        this.renderRows(window.globalTS.groups.collection.models);\n        $(\"#center [data-toggle]\").tooltip();\n        $(\"#center\").css(\"overflow\", \"auto\");\n    },\n\n    /**\n     * Render all given models as rows in the groups list\n     * @param  {array} groups_to_render array of group models to render\n     */\n    renderRows: function(groups_to_render) {\n        for (let i = 0; i < groups_to_render.length; i++) {\n            const group = groups_to_render[i];\n            this.renderOne({ group: group });\n        }\n    },\n\n    /**\n     * Create a view for the given model and add it to the groups view.\n     * @param {Group} model of the view that will be rendered\n     */\n    renderOne: function(options) {\n        const rowView = new mod_group_row.GroupListRowView(options);\n        this.$el.find(\"#group_list_body\").append(rowView.el);\n    },\n\n    /**\n     * Table heading was clicked, update sorting preferences and re-render.\n     * @return {[type]} [description]\n     */\n    // sort_clicked : function(){\n    //     if (Galaxy.libraries.preferences.get('sort_order') === 'asc'){\n    //         Galaxy.libraries.preferences.set({'sort_order': 'desc'});\n    //     } else {\n    //         Galaxy.libraries.preferences.set({'sort_order': 'asc'});\n    //     }\n    //     this.render();\n    // },\n\n    /**\n     * Sort the underlying collection according to the parameters received.\n     * Currently supports only sorting by name.\n     */\n    // sortLibraries: function(){\n    //     if (Galaxy.libraries.preferences.get('sort_by') === 'name'){\n    //         if (Galaxy.libraries.preferences.get('sort_order') === 'asc'){\n    //             this.collection.sortByNameAsc();\n    //         } else if (Galaxy.libraries.preferences.get('sort_order') === 'desc'){\n    //             this.collection.sortByNameDesc();\n    //         }\n    //     }\n    // },\n\n    // MMMMMMMMMMMMMMMMMM\n    // === TEMPLATES ====\n    // MMMMMMMMMMMMMMMMMM\n\n    templateGroupsList: function() {\n        const tmpl_array = [];\n\n        tmpl_array.push('<div id=\"groups\">');\n        tmpl_array.push(\"</div>\");\n        tmpl_array.push('<div class=\"groups_container table-responsive\">');\n        tmpl_array.push(\"<% if(length === 0) { %>\");\n        tmpl_array.push(\"<div>There are no groups yet.</div>\");\n        tmpl_array.push(\"<% } else{ %>\");\n        tmpl_array.push('<table class=\"grid table table-condensed\">');\n        tmpl_array.push(\"   <thead>\");\n        tmpl_array.push(\"     <th>Name</th>\");\n        // tmpl_array.push('     <th style=\"width:22%;\">description</th>');\n        tmpl_array.push(\"     <th>Members</th> \");\n        tmpl_array.push(\"     <th>Repositories</th>\");\n        tmpl_array.push(\"   </thead>\");\n        tmpl_array.push('   <tbody id=\"group_list_body\">');\n        // group item views will attach here\n        tmpl_array.push(\"   </tbody>\");\n        tmpl_array.push(\"</table>\");\n        tmpl_array.push(\"<% }%>\");\n        tmpl_array.push(\"</div>\");\n\n        return _.template(tmpl_array.join(\"\"));\n    }\n});\n\nexport default {\n    GroupListView: GroupListView\n};\n"]}