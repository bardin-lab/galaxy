{"version":3,"sources":["galaxy.js"],"names":["GalaxyApp","options","bootstrapped","this","_init","_","Backbone","_addLogging2","default","NAMESPACE_KEY","DEBUGGING_KEY","localDebugging","localStorage","getItem","storageErr","console","log","_localization2","prototype","self","extend","Events","logger","debug","_processOptions","root","params","session_csrf_token","_initConfig","_patchGalaxy","window","Galaxy","_initLogger","loggerOptions","config","localize","FLATTEN_LOG_MESSAGES_KEY","_initUser","user","trigger","defaults","defaultOptions","k","hasOwnProperty","patchWith","consoleLogger","consoleLevel","_metricsLogger2","MetricsLogger","ALL","split","consoleFlattenMessages","emit","map","i","arguments","Array","slice","call","_baseMvc2","LoggableMixin","_initLocale","_l","userJSON","_userModel2","_setUpListeners","$","document","bind","ev","xhr","data","err","lastAjax","url","href","debugging","setting","undefined","setItem","removeItem","debuggingNamespaces","namespaces","csv","consoleNamespaceWhitelist","newSettings","get"],"mappings":"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","file":"../scripts/galaxy.js","sourcesContent":["import * as _ from \"libs/underscore\";\nimport * as Backbone from \"libs/backbone\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport userModel from \"mvc/user/user-model\";\nimport metricsLogger from \"utils/metrics-logger\";\nimport addLogging from \"utils/add-logging\";\nimport localize from \"utils/localization\";\n// TODO: move into a singleton pattern and have dependents import Galaxy\n// ============================================================================\n/** Base galaxy client-side application.\n *      Iniitializes:\n *          logger      : the logger/metrics-logger\n *          localize    : the string localizer\n *          config      : the current configuration (any k/v in\n *              galaxy.ini available from the configuration API)\n *          user        : the current user (as a mvc/user/user-model)\n */\nfunction GalaxyApp(options, bootstrapped) {\n    var self = this;\n    return self._init(options || {}, bootstrapped || {});\n}\n\n// add logging shortcuts for this object\naddLogging(GalaxyApp, \"GalaxyApp\");\n\n// a debug flag can be set via local storage and made available during script/page loading\nvar DEBUGGING_KEY = \"galaxy:debug\";\n\nvar NAMESPACE_KEY = `${DEBUGGING_KEY}:namespaces`;\nvar FLATTEN_LOG_MESSAGES_KEY = `${DEBUGGING_KEY}:flatten`;\n\nvar localDebugging = false;\ntry {\n    localDebugging = localStorage.getItem(DEBUGGING_KEY) == \"true\";\n} catch (storageErr) {\n    console.log(localize(\"localStorage not available for debug flag retrieval\"));\n}\n\n/** initalize options and sub-components */\nGalaxyApp.prototype._init = function __init(options, bootstrapped) {\n    var self = this;\n    _.extend(self, Backbone.Events);\n    if (localDebugging) {\n        self.logger = console;\n        console.debug(\"debugging galaxy:\", \"options:\", options, \"bootstrapped:\", bootstrapped);\n    }\n\n    self._processOptions(options);\n\n    // add root and url parameters\n    self.root = options.root || \"/\";\n    self.params = options.params || {};\n    self.session_csrf_token = options.session_csrf_token || null;\n\n    self._initConfig(options.config || {});\n    self._patchGalaxy(window.Galaxy);\n\n    self._initLogger(self.options.loggerOptions || {});\n    // at this point, either logging or not and namespaces are enabled - chat it up\n    self.debug(\"GalaxyApp.options: \", self.options);\n    self.debug(\"GalaxyApp.config: \", self.config);\n    self.debug(\"GalaxyApp.logger: \", self.logger);\n\n    self._initLocale();\n    self.debug(\"GalaxyApp.localize: \", self.localize);\n\n    self.config = options.config || {};\n    self.debug(\"GalaxyApp.config: \", self.config);\n\n    self._initUser(options.user || {});\n    self.debug(\"GalaxyApp.user: \", self.user);\n\n    self._setUpListeners();\n    self.trigger(\"ready\", self);\n\n    return self;\n};\n\n/** default options */\nGalaxyApp.prototype.defaultOptions = {\n    /** monkey patch attributes from existing window.Galaxy object? */\n    patchExisting: true,\n    /** root url of this app */\n    root: \"/\",\n    session_csrf_token: null\n};\n\n/** filter to options present in defaultOptions (and default to them) */\nGalaxyApp.prototype._processOptions = function _processOptions(options) {\n    var self = this;\n    var defaults = self.defaultOptions;\n\n    self.options = {};\n    for (var k in defaults) {\n        if (defaults.hasOwnProperty(k)) {\n            self.options[k] = options.hasOwnProperty(k) ? options[k] : defaults[k];\n        }\n    }\n    return self;\n};\n\n/** parse the config and any extra info derived from it */\nGalaxyApp.prototype._initConfig = function _initConfig(config) {\n    var self = this;\n    self.config = config;\n\n    // give precendence to localdebugging for this setting\n    self.config.debug = localDebugging || self.config.debug;\n\n    return self;\n};\n\n/** add an option from options if the key matches an option in defaultOptions */\nGalaxyApp.prototype._patchGalaxy = function _patchGalaxy(patchWith) {\n    var self = this;\n    // in case req or plain script tag order has created a prev. version of the Galaxy obj...\n    if (self.options.patchExisting && patchWith) {\n        // self.debug( 'found existing Galaxy object:', patchWith );\n        // ...(for now) monkey patch any added attributes that the previous Galaxy may have had\n        //TODO: move those attributes to more formal assignment in GalaxyApp\n        for (var k in patchWith) {\n            if (patchWith.hasOwnProperty(k)) {\n                // self.debug( '\\t patching in ' + k + ' to Galaxy:', self[ k ] );\n                self[k] = patchWith[k];\n            }\n        }\n    }\n};\n\n/** set up the metrics logger (utils/metrics-logger) and pass loggerOptions */\nGalaxyApp.prototype._initLogger = function _initLogger(loggerOptions) {\n    var self = this;\n\n    // default to console logging at the debug level if the debug flag is set\n    if (self.config.debug) {\n        loggerOptions.consoleLogger = loggerOptions.consoleLogger || console;\n        loggerOptions.consoleLevel = loggerOptions.consoleLevel || metricsLogger.MetricsLogger.ALL;\n        // load any logging namespaces from localStorage if we can\n        try {\n            loggerOptions.consoleNamespaceWhitelist = localStorage.getItem(NAMESPACE_KEY).split(\",\");\n        } catch (storageErr) {}\n        try {\n            loggerOptions.consoleFlattenMessages = localStorage.getItem(FLATTEN_LOG_MESSAGES_KEY) == \"true\";\n        } catch (storageErr) {}\n        console.log(loggerOptions.consoleFlattenMessages);\n    }\n\n    self.logger = new metricsLogger.MetricsLogger(loggerOptions);\n    self.emit = {};\n    [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"].map(i => {\n        self.emit[i] = function(data) {\n            self.logger.emit(i, arguments[0], Array.prototype.slice.call(arguments, 1));\n        };\n    });\n\n    if (self.config.debug) {\n        // add this logger to mvc's loggable mixin so that all models can use the logger\n        BASE_MVC.LoggableMixin.logger = self.logger;\n    }\n    return self;\n};\n\n/** add the localize fn to this object and the window namespace (as '_l') */\nGalaxyApp.prototype._initLocale = function _initLocale(options) {\n    var self = this;\n    self.debug(\"_initLocale:\", options);\n    self.localize = localize;\n    // add to window as global shortened alias\n    // TODO: temporary - remove when can require for plugins\n    window._l = self.localize;\n    return self;\n};\n\n/** set up the current user as a Backbone model (mvc/user/user-model) */\nGalaxyApp.prototype._initUser = function _initUser(userJSON) {\n    var self = this;\n    self.debug(\"_initUser:\", userJSON);\n    self.user = new userModel.User(userJSON);\n    self.user.logger = self.logger;\n    return self;\n};\n\n/** Set up DOM/jQuery/Backbone event listeners enabled for all pages */\nGalaxyApp.prototype._setUpListeners = function _setUpListeners() {\n    var self = this;\n\n    // hook to jq beforeSend to record the most recent ajax call and cache some data about it\n    /** cached info about the last ajax call made through jQuery */\n    self.lastAjax = {};\n    $(document).bind(\"ajaxSend\", (ev, xhr, options) => {\n        var data = options.data;\n        try {\n            data = JSON.parse(data);\n        } catch (err) {}\n\n        self.lastAjax = {\n            url: location.href.slice(0, -1) + options.url,\n            data: data\n        };\n        //TODO:?? we might somehow manage to *retry* ajax using either this hook or Backbone.sync\n    });\n    return self;\n};\n\n/** Turn debugging/console-output on/off by passing boolean. Pass nothing to get current setting. */\nGalaxyApp.prototype.debugging = function _debugging(setting) {\n    var self = this;\n    try {\n        if (setting === undefined) {\n            return localStorage.getItem(DEBUGGING_KEY) === \"true\";\n        }\n        if (setting) {\n            localStorage.setItem(DEBUGGING_KEY, true);\n            return true;\n        }\n\n        localStorage.removeItem(DEBUGGING_KEY);\n        // also remove all namespaces\n        self.debuggingNamespaces(null);\n    } catch (storageErr) {\n        console.log(localize(\"localStorage not available for debug flag retrieval\"));\n    }\n    return false;\n};\n\n/** Add, remove, or clear namespaces from the debugging filters\n *  Pass no arguments to retrieve the existing namespaces as an array.\n *  Pass in null to clear all namespaces (all logging messages will show now).\n *  Pass in an array of strings or single string of the namespaces to filter to.\n *  Returns the new/current namespaces as an array;\n */\nGalaxyApp.prototype.debuggingNamespaces = function _debuggingNamespaces(namespaces) {\n    var self = this;\n    try {\n        if (namespaces === undefined) {\n            var csv = localStorage.getItem(NAMESPACE_KEY);\n            return typeof csv === \"string\" ? csv.split(\",\") : [];\n        } else if (namespaces === null) {\n            localStorage.removeItem(NAMESPACE_KEY);\n        } else {\n            localStorage.setItem(NAMESPACE_KEY, namespaces);\n        }\n        var newSettings = self.debuggingNamespaces();\n        if (self.logger) {\n            self.logger.options.consoleNamespaceWhitelist = newSettings;\n        }\n        return newSettings;\n    } catch (storageErr) {\n        console.log(localize(\"localStorage not available for debug namespace retrieval\"));\n    }\n};\n\n/** string rep */\nGalaxyApp.prototype.toString = function toString() {\n    var userEmail = this.user ? this.user.get(\"email\") || \"(anonymous)\" : \"uninitialized\";\n    return `GalaxyApp(${userEmail})`;\n};\n\n// This is not great.  Rework to be a singleton-style Galaxy app accessible/created by import\nwindow.Galaxy = window.Galaxy || new GalaxyApp();\n\n// ============================================================================\nexport default {\n    GalaxyApp: GalaxyApp\n};\n"]}