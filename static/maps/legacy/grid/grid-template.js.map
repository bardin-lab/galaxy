{"version":3,"sources":["legacy/grid/grid-template.js"],"names":["grid","options","tmpl","embedded","this","grid_header","grid_table","info_text","title","global_actions","length","show_popup","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","action","value","target","url_args","label","err","return","insert","grid_filters","header","show_item_checkboxes","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","columns","column","visible","key","href","extra","body","items","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","current_item_id","item","id","encode_id","_step4","_iterator4","_iteratorNormalCompletion4","nowrap","column_settings","column_config","link","items_length","replace","cls","attach_popup","operations","label_id_prefix","_iterator3","footer","use_paging","num_page_links","cur_page_num","num_pages","jQuery","page_link_range","min_page","min_offset","max_offset","max_page","max_range","page_index","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","operation","found_global","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","global_operation","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","legend","message","status","indexOf","filters","advanced_search_display","show_advanced_search_link","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","filterable","column_key","f_key","d_key","default_filter_dict","_iterator8","standard_search_display","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","grid_column_filter","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","column_label","toLowerCase","is_text","_step11","_iterator11","_iteratorNormalCompletion11","filter_value","JSON","stringify","column_filter","type","filter_element","i","params","slice","size","seperator","cf_label","categorical_filters","cf","cf_key","cf_arg","filter","filter_key","_utils2","default","sanitize"],"mappings":"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","file":"../../../scripts/legacy/grid/grid-template.js","sourcesContent":["// dependencies\nimport Utils from \"utils/utils\";\n// grid view templates\nexport default {\n    // template\n    grid: function(options) {\n        var tmpl = \"\";\n        if (options.embedded) {\n            tmpl = this.grid_header(options) + this.grid_table(options);\n        } else {\n            tmpl = `<div class=\"loading-elt-overlay\"></div><table><tr><td width=\"75%\">${this.grid_header(\n                options\n            )}</td><td></td><td></td></tr><tr><td width=\"100%\" id=\"grid-message\" valign=\"top\"></td><td></td><td></td></tr></table>${this.grid_table(\n                options\n            )}`;\n        }\n\n        // add info text\n        if (options.info_text) {\n            tmpl += `<br><div class=\"toolParamHelp\" style=\"clear: both;\">${options.info_text}</div>`;\n        }\n\n        // return\n        return tmpl;\n    },\n\n    // template\n    grid_table: function() {\n        return `\n            <form method=\"post\" onsubmit=\"return false;\">\n                <table id=\"grid-table\" class=\"grid\">\n                    <thead id=\"grid-table-header\"></thead>\n                    <tbody id=\"grid-table-body\"></tbody>\n                    <tfoot id=\"grid-table-footer\"></tfoot>\n                </table>\n            </form>`;\n    },\n\n    // template\n    grid_header: function(options) {\n        var tmpl = '<div class=\"grid-header\">';\n        if (!options.embedded) {\n            tmpl += `<h2>${options.title}</h2>`;\n        }\n        if (options.global_actions) {\n            tmpl += '<ul class=\"manage-table-actions\">';\n            var show_popup = options.global_actions.length >= 3;\n            if (show_popup) {\n                tmpl +=\n                    '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' +\n                    '<div popupmenu=\"popup-global-actions\">';\n            }\n            for (let action of options.global_actions) {\n                tmpl += `<li><a class=\"action-button use-target\" target=\"${action.target}\" href=\"${\n                    action.url_args\n                }\" onclick=\"return false;\" >${action.label}</a></li>`;\n            }\n            if (show_popup) {\n                tmpl += \"</div>\";\n            }\n            tmpl += \"</ul>\";\n        }\n        if (options.insert) {\n            tmpl += options.insert;\n        }\n\n        // add grid filters\n        tmpl += this.grid_filters(options);\n        tmpl += \"</div>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    header: function(options) {\n        // start\n        var tmpl = \"<tr>\";\n\n        // add checkbox\n        if (options.show_item_checkboxes) {\n            tmpl += \"<th>\";\n            if (options.items.length > 0) {\n                tmpl +=\n                    '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' +\n                    '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n            }\n            tmpl += \"</th>\";\n        }\n\n        // create header elements\n        for (let column of options.columns) {\n            if (column.visible) {\n                tmpl += `<th id=\"${column.key}-header\">`;\n                if (column.href) {\n                    tmpl += `<a href=\"${column.href}\" class=\"sort-link\" sort_key=\"${column.key}\">${column.label}</a>`;\n                } else {\n                    tmpl += column.label;\n                }\n                tmpl += `<span class=\"sort-arrow\">${column.extra}</span></th>`;\n            }\n        }\n\n        // finalize\n        tmpl += \"</tr>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    body: function(options) {\n        // initialize\n        var tmpl = \"\";\n        var items_length = options.items.length;\n\n        // empty grid?\n        if (items_length === 0) {\n            // No results.\n            tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n        }\n\n        // create rows\n        for (let item of options.items) {\n            // Tag current\n            tmpl += \"<tr \";\n            if (options.current_item_id == item.id) {\n                tmpl += 'class=\"current\"';\n            }\n            tmpl += \">\";\n\n            // Item selection column\n            if (options.show_item_checkboxes) {\n                tmpl += `<td style=\"width: 1.5em;\"><input type=\"checkbox\" name=\"id\" value=\"${item.encode_id}\" id=\"${\n                    item.encode_id\n                }\" class=\"grid-row-select-checkbox\" /></td>`;\n            }\n\n            // Data columns\n            for (let column of options.columns) {\n                if (column.visible) {\n                    // Nowrap\n                    var nowrap = \"\";\n                    if (column.nowrap) {\n                        nowrap = 'style=\"white-space:nowrap;\"';\n                    }\n\n                    // get column settings\n                    var column_settings = item.column_config[column.label];\n\n                    // load attributes\n                    var link = column_settings.link;\n                    var value = column_settings.value;\n                    var target = column_settings.target;\n\n                    // unescape value\n                    if (jQuery.type(value) === \"string\") {\n                        value = value.replace(/\\/\\//g, \"/\");\n                    }\n\n                    // Attach popup menu?\n                    var id = \"\";\n                    var cls = \"\";\n                    if (column.attach_popup) {\n                        id = `grid-${item.encode_id}-popup`;\n                        cls = \"menubutton\";\n                        if (link !== \"\") {\n                            cls += \" split\";\n                        }\n                        cls += \" popup\";\n                    }\n\n                    // Check for row wrapping\n                    tmpl += `<td ${nowrap}>`;\n\n                    // Link\n                    if (link) {\n                        if (options.operations.length !== 0) {\n                            tmpl += `<div id=\"${id}\" class=\"${cls}\" style=\"float: left;\">`;\n                        }\n                        tmpl += `<a class=\"menubutton-label use-target\" target=\"${target}\" href=\"${link}\" onclick=\"return false;\">${value}</a>`;\n                        if (options.operations.length !== 0) {\n                            tmpl += \"</div>\";\n                        }\n                    } else {\n                        tmpl += `<div id=\"${id}\" class=\"${cls}\"><label id=\"${column.label_id_prefix}${\n                            item.encode_id\n                        }\" for=\"${item.encode_id}\">${value || \"\"}</label></div>`;\n                    }\n                    tmpl += \"</td>\";\n                }\n            }\n            tmpl += \"</tr>\";\n        }\n        return tmpl;\n    },\n\n    // template\n    footer: function(options) {\n        // create template string\n        var tmpl = \"\";\n\n        // paging\n        if (options.use_paging && options.num_pages > 1) {\n            // get configuration\n            var num_page_links = options.num_page_links;\n            var cur_page_num = options.cur_page_num;\n            var num_pages = options.num_pages;\n\n            // First pass on min page.\n            var page_link_range = num_page_links / 2;\n            var min_page = cur_page_num - page_link_range;\n            var min_offset = 0;\n            if (min_page <= 0) {\n                // Min page is too low.\n                min_page = 1;\n                min_offset = page_link_range - (cur_page_num - min_page);\n            }\n\n            // Set max page.\n            var max_range = page_link_range + min_offset;\n            var max_page = cur_page_num + max_range;\n            var max_offset;\n            if (max_page <= num_pages) {\n                // Max page is fine.\n                max_offset = 0;\n            } else {\n                // Max page is too high.\n                max_page = num_pages;\n                // +1 to account for the +1 in the loop below.\n                max_offset = max_range - (max_page + 1 - cur_page_num);\n            }\n\n            // Second and final pass on min page to add any unused\n            // offset from max to min.\n            if (max_offset !== 0) {\n                min_page -= max_offset;\n                if (min_page < 1) {\n                    min_page = 1;\n                }\n            }\n\n            // template header\n            tmpl += '<tr id=\"page-links-row\">';\n            if (options.show_item_checkboxes) {\n                tmpl += \"<td></td>\";\n            }\n            tmpl += '<td colspan=\"100\">' + '<span id=\"page-link-container\">' + \"Page:\";\n\n            if (min_page > 1) {\n                tmpl +=\n                    '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n            }\n\n            // create page urls\n            for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n                if (page_index == options.cur_page_num) {\n                    tmpl += `<span class=\"page-link inactive-link\" id=\"page-link-${page_index}\">${page_index}</span>`;\n                } else {\n                    tmpl += `<span class=\"page-link\" id=\"page-link-${page_index}\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"${page_index}\">${page_index}</a></span>`;\n                }\n            }\n\n            // show last page\n            if (max_page < num_pages) {\n                tmpl += `...<span class=\"page-link\" id=\"page-link-${num_pages}\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"${num_pages}\">${num_pages}</a></span>`;\n            }\n            tmpl += \"</span>\";\n\n            // Show all link\n            tmpl += `\n                    <span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>\n                    </td>\n                </tr>`;\n        }\n\n        // Grid operations for multiple items.\n        if (options.show_item_checkboxes) {\n            // start template\n            tmpl += `\n                <tr>\n                    <input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">\n                    <td></td>\n                    <td colspan=\"100\">\n                        For <span class=\"grid-selected-count\"></span> selected items: \n            `;\n\n            // configure buttons for operations\n            for (let operation of options.operations) {\n                if (operation.allow_multiple) {\n                    tmpl += `<input type=\"button\" value=\"${\n                        operation.label\n                    }\" class=\"operation-button action-button\">&nbsp;`;\n                }\n            }\n\n            // finalize template\n            tmpl += \"</td>\" + \"</tr>\";\n        }\n\n        // count global operations\n        var found_global = false;\n        for (let operation of options.operations) {\n            if (operation.global_operation) {\n                found_global = true;\n                break;\n            }\n        }\n\n        // add global operations\n        if (found_global) {\n            tmpl += \"<tr>\" + '<td colspan=\"100\">';\n            for (let operation of options.operations) {\n                if (operation.global_operation) {\n                    tmpl += `<a class=\"action-button\" href=\"${operation.global_operation}\">${operation.label}</a>`;\n                }\n            }\n            tmpl += \"</td>\" + \"</tr>\";\n        }\n\n        // add legend\n        if (options.legend) {\n            tmpl += `<tr><td colspan=\"100\">${options.legend}</td></tr>`;\n        }\n\n        // return\n        return tmpl;\n    },\n\n    // template\n    message: function(options) {\n        var status = options.status;\n        if ([\"success\", \"ok\"].indexOf(status) != -1) {\n            status = \"done\";\n        }\n        return `<p><div class=\"${status}message transient-message\">${_.escape(\n            options.message\n        )}</div><div style=\"clear: both\"></div></p>`;\n    },\n\n    // template\n    grid_filters: function(options) {\n        // get filters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n\n        // show advanced search if flag set or if there are filters for advanced search fields\n        var advanced_search_display = \"none\";\n        if (options.advanced_search) {\n            advanced_search_display = \"block\";\n        }\n\n        // identify columns with advanced filtering\n        var show_advanced_search_link = false;\n        for (let column of options.columns) {\n            if (column.filterable == \"advanced\") {\n                var column_key = column.key;\n                var f_key = filters[column_key];\n                var d_key = default_filter_dict[column_key];\n                if (f_key && d_key && f_key != d_key) {\n                    advanced_search_display = \"block\";\n                }\n                show_advanced_search_link = true;\n            }\n        }\n\n        // hide standard search if advanced is shown\n        var standard_search_display = \"block\";\n        if (advanced_search_display == \"block\") {\n            standard_search_display = \"none\";\n        }\n\n        //\n        // standard search\n        //\n        var tmpl = `<div id=\"standard-search\" style=\"display: ${standard_search_display};\"><table><tr><td style=\"padding: 0;\"><table>`;\n\n        // add standard filters\n        for (let column of options.columns) {\n            if (column.filterable == \"standard\") {\n                tmpl += this.grid_column_filter(options, column);\n            }\n        }\n\n        // finalize standard search\n        tmpl += \"</table>\" + \"</td>\" + \"</tr>\" + \"<tr>\" + \"<td>\";\n\n        // show advanced search link in standard display\n        if (show_advanced_search_link) {\n            tmpl += '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n        }\n\n        // finalize standard search display\n        tmpl += \"</td>\" + \"</tr>\" + \"</table>\" + \"</div>\";\n\n        //\n        // advanced search\n        //\n        tmpl += `<div id=\"advanced-search\" style=\"display: ${advanced_search_display}; margin-top: 5px; border: 1px solid #ccc;\"><table><tr><td style=\"text-align: left\" colspan=\"100\"><a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a></td></tr>`;\n\n        // add advanced filters\n        for (let column of options.columns) {\n            if (column.filterable == \"advanced\") {\n                tmpl += this.grid_column_filter(options, column);\n            }\n        }\n\n        // finalize advanced search template\n        tmpl += \"</table>\" + \"</div>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template\n    grid_column_filter: function(options, column) {\n        // collect parameters\n        var filters = options.filters;\n        var column_label = column.label;\n        var column_key = column.key;\n        if (column.filterable == \"advanced\") {\n            column_label = column_label.toLowerCase();\n        }\n\n        // start\n        var tmpl = \"<tr>\";\n\n        if (column.filterable == \"advanced\") {\n            tmpl += `<td align=\"left\" style=\"padding-left: 10px\">${column_label}:</td>`;\n        }\n        tmpl += '<td style=\"padding-bottom: 1px;\">';\n        if (column.is_text) {\n            tmpl += `<form class=\"text-filter-form\" column_key=\"${column_key}\" action=\"${options.url}\" method=\"get\" >`;\n            // Carry forward filtering criteria with hidden inputs.\n            for (let column of options.columns) {\n                var filter_value = filters[column.key];\n                if (filter_value) {\n                    if (filter_value != \"All\") {\n                        if (column.is_text) {\n                            filter_value = JSON.stringify(filter_value);\n                        }\n                        tmpl += `<input type=\"hidden\" id=\"${column.key}\" name=\"f-${\n                            column.key\n                        }\" value=\"${filter_value}\"/>`;\n                    }\n                }\n            }\n            // Print current filtering criteria and links to delete.\n            tmpl += `<span id=\"${column_key}-filtering-criteria\">`;\n\n            // add filters\n            var column_filter = filters[column_key];\n            if (column_filter) {\n                // identify type\n                var type = jQuery.type(column_filter);\n\n                // single filter value\n                if (type == \"string\") {\n                    if (column_filter != \"All\") {\n                        // append template\n                        tmpl += this.filter_element(column_key, column_filter);\n                    }\n                }\n\n                // multiple filter values\n                if (type == \"array\") {\n                    for (let i in column_filter) {\n                        // copy filters and remove entry\n                        var params = column_filter;\n                        params = params.slice(i);\n\n                        // append template\n                        tmpl += this.filter_element(column_key, column_filter[i]);\n                    }\n                }\n            }\n\n            // close span\n            tmpl += \"</span>\";\n\n            // Set value, size of search input field. Minimum size is 20 characters.\n            var value = \"\";\n            var size = 20;\n            if (column.filterable == \"standard\") {\n                value = column.label.toLowerCase();\n                if (value.length < 20) {\n                    size = value.length;\n                }\n                // +4 to account for space after placeholder\n                size = size + 4;\n            }\n\n            // print input field for column\n            tmpl += `\n                <span class=\"search-box\">\n                    <input class=\"search-box-input\" id=\"input-${column_key}-filter\" name=\"f-${column_key}\" type=\"text\" placeholder=\"${value}\" size=\"${size}\"/>\n                    <button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">\n                        <i class=\"fa fa-search\"></i>\n                    </button>\n                </span>\n            </form>`;\n        } else {\n            // filter criteria\n            tmpl += `<span id=\"${column_key}-filtering-criteria\">`;\n\n            // add category filters\n            var seperator = false;\n            for (var cf_label in options.categorical_filters[column_key]) {\n                // get category filter\n                var cf = options.categorical_filters[column_key][cf_label];\n\n                // each filter will have only a single argument, so get that single argument\n                var cf_key = \"\";\n                var cf_arg = \"\";\n                for (var key in cf) {\n                    cf_key = key;\n                    cf_arg = cf[key];\n                }\n\n                // add seperator\n                if (seperator) {\n                    tmpl += \" | \";\n                }\n                seperator = true;\n\n                // add category\n                var filter = filters[column_key];\n                if (filter && cf[column_key] && filter == cf_arg) {\n                    tmpl += `<span class=\"categorical-filter ${column_key}-filter current-filter\">${cf_label}</span>`;\n                } else {\n                    tmpl += `<span class=\"categorical-filter ${column_key}-filter\"><a href=\"javascript:void(0);\" filter_key=\"${cf_key}\" filter_val=\"${cf_arg}\">${cf_label}</a></span>`;\n                }\n            }\n            tmpl += \"</span>\";\n        }\n        tmpl += \"</td>\" + \"</tr>\";\n\n        // return template\n        return tmpl;\n    },\n\n    // template for filter items\n    filter_element: function(filter_key, filter_value) {\n        filter_value = Utils.sanitize(filter_value);\n        return `<span class=\"text-filter-val\">${filter_value}<a href=\"javascript:void(0);\" filter_key=\"${filter_key}\" filter_val=\"${filter_value}\"><i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/></a></span>`;\n    }\n};\n"]}