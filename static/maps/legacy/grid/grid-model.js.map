{"version":3,"sources":["legacy/grid/grid-model.js"],"names":["Backbone","Model","extend","defaults","url_base","async","async_ops","categorical_filters","filters","sort_key","show_item_checkboxes","can_async_op","op","_","indexOf","this","attributes","add_filter","key","value","append","new_val","cur_val","undefined","values","push","remove_filter","condition","condition_index","get_url_data","url_data","sort","page","cur_page","advanced_search","item_ids","id","self","k","get_url","args","$","param"],"mappings":"gIACeA,SAASC,MAAMC,QAC1BC,UACIC,SAAU,GACVC,OAAO,EACPC,aACAC,uBAJJJ,WACIC,SAAAA,KACAC,sBAFM,EAGNC,iBAHM,EAINC,SAAAA,EACAC,UAAAA,EACAC,eAAAA,EACAC,cAAAA,GAPMC,aADuB,SAAAC,GAoB7B,OAAqD,IAA9CC,EAAEC,QAAQC,KAAKC,WAAWV,UAAWM,IAC/CK,WArBgC,SAAAC,EAAAC,EAAAC,GAuBjC,GAAAA,EAAA,CAOQ,IAHJC,EAGQC,EAAUP,KAAKC,WAAWR,QAAQU,GAF1C,GAAY,OAARE,QAAQG,IAAAD,EACRD,EAAAF,OACA,GAAmBH,iBAALM,EAMV,GAAe,OAAXA,GAAoBA,GAAWH,EAJnCE,EAAJF,MACIG,CAAJ,IAEOE,KACHA,EAAIF,GAAAA,EACAD,EAAAA,GAAAA,EACHA,EAAMG,OAKH,KADAA,EAAAA,GACAH,QAAUG,IACbH,EAAAI,KAAAN,GAGDE,KAAAA,WAAAA,QAAUC,GAAVD,OAGCN,KAAAC,WAAAR,QAAAU,GAAAC,GAOZO,cAzDgC,SAAAR,EAAAS,GA+D7B,IAAIL,EAAUP,KAAKC,WAAWR,QAAQU,GAJ1C,GAAA,OAAAI,QAAAC,IAAAD,EAMQ,OAAO,EAFX,GAAmBN,iBAAfM,EAEAP,KAAAC,WAAAR,QAAAU,GAAA,OACH,CAED,IAAIU,EAAAf,EAAmBC,QAAvBQ,EAAiCK,IAC7B,IAAAC,IACAN,EAAKN,GAAL,MAQPa,aA9EgC,WAoF7B,IAAIC,GAJRzB,MAAAU,KAAAC,WAAAX,MAMQ0B,KAAMhB,KAAKC,WAAWP,SACtBuB,KAAMjB,KAAKC,WAAWiB,SAJ9BJ,qBAAcd,KAAAC,WAAWN,qBACrBwB,gBAAenB,KAAAC,WAAAkB,iBAIXxB,KAAAA,WAAAA,YACAwB,EAAAA,UAAiBnB,KAAKC,WAAWkB,WAOjCnB,KAAKC,WAAWmB,WAJpBL,EAAAM,GAAArB,KAAAC,WAAAmB,UAIA,IAAAE,EAAItB,KAIJ,OAHIe,EAAAA,KAAAA,EAAAA,MAAAA,EAAAd,WAAmBA,SAAWmB,SAAAA,GACjCL,EAAAA,KAAAQ,EAAA,IAAAA,EAAA,KAEDR,GAICS,QAFD,SAAAC,GAGA,OAAAzB,KAAOe,IAAP,YAAA,IAAAW,EAAAC,MAAA3B,KAAAc,gBAAA,IAAAY,EAAAC,MAAAF","file":"../../../scripts/legacy/grid/grid-model.js","sourcesContent":["// legacy grid model, used by reports and toolshed\nexport default Backbone.Model.extend({\n    defaults: {\n        url_base: \"\",\n        async: false,\n        async_ops: [],\n        categorical_filters: [],\n        filters: {},\n        sort_key: null,\n        show_item_checkboxes: false,\n        advanced_search: false,\n        cur_page: 1,\n        num_pages: 1,\n        operation: undefined,\n        item_ids: undefined\n    },\n\n    /**\n     * Return true if operation can be done asynchronously.\n     */\n    can_async_op: function(op) {\n        return _.indexOf(this.attributes.async_ops, op) !== -1;\n    },\n\n    /**\n     * Add filtering criterion.\n     */\n    add_filter: function(key, value, append) {\n        // Update URL arg with new condition.\n        if (append) {\n            // Update or append value.\n            var cur_val = this.attributes.filters[key];\n\n            var new_val;\n            if (cur_val === null || cur_val === undefined) {\n                new_val = value;\n            } else if (typeof cur_val == \"string\") {\n                if (cur_val == \"All\" || cur_val == value) {\n                    new_val = value;\n                } else {\n                    // Replace string with array.\n                    var values = [];\n                    values[0] = cur_val;\n                    values[1] = value;\n                    new_val = values;\n                }\n            } else {\n                // Current value is an array.\n                new_val = cur_val;\n                if (new_val.indexOf(value) === -1) {\n                    new_val.push(value);\n                }\n            }\n            this.attributes.filters[key] = new_val;\n        } else {\n            // Replace value.\n            this.attributes.filters[key] = value;\n        }\n    },\n\n    /**\n     * Remove filtering criterion.\n     */\n    remove_filter: function(key, condition) {\n        var cur_val = this.attributes.filters[key];\n        if (cur_val === null || cur_val === undefined) {\n            return false;\n        }\n\n        if (typeof cur_val === \"string\") {\n            // overwrite/remove condition.\n            this.attributes.filters[key] = \"\";\n        } else {\n            // filter contains an array of conditions.\n            var condition_index = _.indexOf(cur_val, condition);\n            if (condition_index !== -1) {\n                cur_val[condition_index] = \"\";\n            }\n        }\n    },\n\n    /**\n     * Returns URL data for obtaining a new grid.\n     */\n    get_url_data: function() {\n        var url_data = {\n            async: this.attributes.async,\n            sort: this.attributes.sort_key,\n            page: this.attributes.cur_page,\n            show_item_checkboxes: this.attributes.show_item_checkboxes,\n            advanced_search: this.attributes.advanced_search\n        };\n\n        // Add operation, item_ids only if they have values.\n        if (this.attributes.operation) {\n            url_data.operation = this.attributes.operation;\n        }\n        if (this.attributes.item_ids) {\n            url_data.id = this.attributes.item_ids;\n        }\n\n        // Add filter arguments to data, placing \"f-\" in front of all arguments.\n        var self = this;\n        _.each(_.pairs(self.attributes.filters), k => {\n            url_data[`f-${k[0]}`] = k[1];\n        });\n        return url_data;\n    },\n\n    // Return URL for obtaining a new grid\n    get_url: function(args) {\n        return `${this.get(\"url_base\")}?${$.param(this.get_url_data())}&${$.param(args)}`;\n    }\n});\n"]}