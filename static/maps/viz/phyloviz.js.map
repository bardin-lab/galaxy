{"version":3,"sources":["viz/phyloviz.js"],"names":["PhyloTreeLayout","_nodes","forEach","maxDepth","vertSeparation","parent","node","nodes","dist","defaultDist","numLeaves","depthSeparation","maxTextWidth","layout","children","child","sumChildVertSeparation","x0","length","leafIndex","x","y","alert","hierarchy","d3","sort","layoutMode","leafHeight","self","inputLeafHeight","mode","angle","height","isNaN","separation","tree","links","d","i","toString","call","window","depth","push","UserMenuBase","Backbone","View","extend","className","isAcceptableValue","$inputKey","min","max","value","val","fieldName","attr","replace","n","parseFloat","isFinite","isNumeric","hasIllegalJsonCharacters","y0","defaults","type","title","_localization2","default","scaleFactor","selectedNode","nodeAttrChangedTime","this","set","_data2","Dataset","id","options","dataset_id","root","toggle","PhyloTree","translate","_children","fontSize","toggleAll","cleanTree","config","jQuery","attributes","save","show_message","$","ajax","url","dataType","data","success","res","hide_modal","nodeRadius","stdInit","vis","width","source","model","renderNodes","renderLinks","link","selectAll","target","calcalateLinePos","pos0","pos1","select","insert","append","duration","diagonal","pos2","classed","linkUpdate","_selected","name","selectNode","annotation","addTooltips","remove","__data__","bootstrap","Math","round","placement","trigger","margins","updateAndRender","projection","get","nodeEnter","on","altKey","style","nodeUpdate","transition","exit","nodeExit","initialize","PhylovizView","MAX_DISPLACEMENT","MIN_SCALE","MAX_SCALE","radius","zoomFunc","behavior","zoom","scaleExtent","phyloTree","navMenu","HeaderButtons","nodeSelectionView","NodeSelectionView","settingsMenu","render","empty","zoomAndPan","mainSVG","layoutOptions","text","linearView","zoomParams","PhylovizLinearView","event","translateParams","zoomStatement","translateStatement","scale","translationCoor","split","reloadViz","treeIndex","getJSON","packedJson","phylovizView","initRightHeaderBtns","off","initNavBtns","icon_class","nexSelected","rightMenu","_iconButton2","create_icon_buttons_menu","on_click","show","updateUI","open","$el","tooltip_config","apply","el","inputs","$input","hide","resetToDefaults","key","enableEdit","each","valuesOfConcern","UI","saveChanges","toggleUI","cancelChanges","checked","updateNodes","fn","enable","isEnabled","PhyloVizSearch","searchConditionVal","searchTerm","searchTree","attrVal","Date","condition","toLowerCase","indexOf"],"mappings":"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","file":"../../scripts/viz/phyloviz.js","sourcesContent":["import _l from \"utils/localization\";\nimport * as d3 from \"libs/d3\";\nimport visualization_mod from \"viz/visualization\";\nimport data_mod from \"mvc/dataset/data\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * Base class of any menus that takes in user interaction. Contains checking methods.\n */\nvar UserMenuBase = Backbone.View.extend({\n    className: \"UserMenuBase\",\n\n    /**\n     * Check if an input value is a number and falls within max min.\n     */\n    isAcceptableValue: function($inputKey, min, max) {\n        //TODO: use better feedback than alert\n        var value = $inputKey.val();\n\n        var fieldName = $inputKey.attr(\"displayLabel\") || $inputKey.attr(\"id\").replace(\"phyloViz\", \"\");\n\n        function isNumeric(n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n        }\n\n        if (!isNumeric(value)) {\n            alert(`${fieldName} is not a number!`);\n            return false;\n        }\n\n        if (value > max) {\n            alert(`${fieldName} is too large.`);\n            return false;\n        } else if (value < min) {\n            alert(`${fieldName} is too small.`);\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Check if any user string inputs has illegal characters that json cannot accept\n     */\n    hasIllegalJsonCharacters: function($inputKey) {\n        if ($inputKey.val().search(/\"|'|\\\\/) !== -1) {\n            alert(\n                \"Named fields cannot contain these illegal characters: \" +\n                    \"double quote(\\\"), single guote('), or back slash(\\\\). \"\n            );\n            return true;\n        }\n        return false;\n    }\n});\n\n/**\n * -- Custom Layout call for phyloViz to suit the needs of a phylogenetic tree.\n * -- Specifically: 1) Nodes have a display display of (= evo dist X depth separation) from their parent\n *                  2) Nodes must appear in other after they have expand and contracted\n */\nfunction PhyloTreeLayout() {\n    var self = this; // maximum length of the text labels\n\n    var hierarchy = d3.layout\n        .hierarchy()\n        .sort(null)\n        .value(null);\n\n    var // ! represents both the layout angle and the height of the layout, in px\n    height = 360;\n\n    var layoutMode = \"Linear\";\n\n    var // height of each individual leaf node\n    leafHeight = 18;\n\n    var // separation between nodes of different depth, in px\n    depthSeparation = 200;\n\n    var // change to recurssive call\n    leafIndex = 0;\n\n    var // tree defaults to 0.5 dist if no dist is specified\n    defaultDist = 0.5;\n\n    var maxTextWidth = 50;\n\n    self.leafHeight = inputLeafHeight => {\n        if (typeof inputLeafHeight === \"undefined\") {\n            return leafHeight;\n        } else {\n            leafHeight = inputLeafHeight;\n            return self;\n        }\n    };\n\n    self.layoutMode = mode => {\n        if (typeof mode === \"undefined\") {\n            return layoutMode;\n        } else {\n            layoutMode = mode;\n            return self;\n        }\n    };\n\n    // changes the layout angle of the display, which is really changing the height\n    self.layoutAngle = angle => {\n        if (typeof angle === \"undefined\") {\n            return height;\n        }\n        // to use default if the user puts in strange values\n        if (isNaN(angle) || angle < 0 || angle > 360) {\n            return self;\n        } else {\n            height = angle;\n            return self;\n        }\n    };\n\n    self.separation = dist => {\n        // changes the dist between the nodes of different depth\n        if (typeof dist === \"undefined\") {\n            return depthSeparation;\n        } else {\n            depthSeparation = dist;\n            return self;\n        }\n    };\n\n    self.links = (\n        nodes // uses d3 native method to generate links. Done.\n    ) => d3.layout.tree().links(nodes);\n\n    // -- Custom method for laying out phylogeny tree in a linear fashion\n    self.nodes = (d, i) => {\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if (toString.call(d) === \"[object Array]\") {\n            // if d is an array, replate with the first object (newick, phyloxml)\n            d = d[0];\n        }\n\n        // self is to find the depth of all the nodes, assumes root is passed in\n        var _nodes = hierarchy.call(self, d, i);\n\n        var nodes = [];\n        var maxDepth = 0;\n        var numLeaves = 0;\n        //console.debug( JSON.stringify( _nodes, null, 2 ) )\n        window._d = d;\n        window._nodes = _nodes;\n\n        //TODO: remove dbl-touch loop\n        // changing from hierarchy's custom format for data to usable format\n        _nodes.forEach(node => {\n            maxDepth = node.depth > maxDepth ? node.depth : maxDepth; //finding max depth of tree\n            nodes.push(node);\n        });\n        // counting the number of leaf nodes and assigning max depth\n        //  to nodes that do not have children to flush all the leave nodes\n        nodes.forEach(node => {\n            if (!node.children) {\n                //&& !node._children\n                numLeaves += 1;\n                node.depth = maxDepth; // if a leaf has no child it would be assigned max depth\n            }\n        });\n\n        leafHeight = layoutMode === \"Circular\" ? height / numLeaves : leafHeight;\n        leafIndex = 0;\n        layout(nodes[0], maxDepth, leafHeight, null);\n\n        return nodes;\n    };\n\n    /**\n     * -- Function with side effect of adding x0, y0 to all child; take in the root as starting point\n     *  assuming that the leave nodes would be sorted in presented order\n     *          horizontal(y0) is calculated according to (= evo dist X depth separation) from their parent\n     *          vertical (x0) - if leave node: find its order in all of the  leave node === node.id,\n     *                              then multiply by verticalSeparation\n     *                  - if parent node: is place in the mid point all of its children nodes\n     * -- The layout will first calculate the y0 field going towards the leaves, and x0 when returning\n     */\n    function layout(node, maxDepth, vertSeparation, parent) {\n        var children = node.children;\n        var sumChildVertSeparation = 0;\n\n        // calculation of node's dist from parents, going down.\n        var dist = node.dist || defaultDist;\n        dist = dist > 1 ? 1 : dist; // We constrain all dist to be less than one\n        node.dist = dist;\n        if (parent !== null) {\n            node.y0 = parent.y0 + dist * depthSeparation;\n        } else {\n            //root node\n            node.y0 = maxTextWidth;\n        }\n\n        // if a node have no children, we will treat it as a leaf and start laying it out first\n        if (!children) {\n            node.x0 = leafIndex * vertSeparation;\n            leafIndex += 1;\n        } else {\n            // if it has children, we will visit all its children and calculate its position from its children\n            children.forEach(child => {\n                child.parent = node;\n                sumChildVertSeparation += layout(child, maxDepth, vertSeparation, node);\n            });\n            node.x0 = sumChildVertSeparation / children.length;\n        }\n\n        // adding properties to the newly created node\n        node.x = node.x0;\n        node.y = node.y0;\n        return node.x0;\n    }\n    return self;\n}\n\n/**\n * -- PhyloTree Model --\n */\nvar PhyloTree = visualization_mod.Visualization.extend({\n    defaults: {\n        layout: \"Linear\",\n        separation: 250, // px dist between nodes of different depth to represent 1 evolutionary until\n        leafHeight: 18,\n        type: \"phyloviz\", // visualization type\n        title: _l(\"Title\"),\n        scaleFactor: 1,\n        translate: [0, 0],\n        fontSize: 12, //fontSize of node label\n        selectedNode: null,\n        nodeAttrChangedTime: 0\n    },\n\n    initialize: function(options) {\n        this.set(\n            \"dataset\",\n            new data_mod.Dataset({\n                id: options.dataset_id\n            })\n        );\n    },\n\n    root: {}, // Root has to be its own independent object because it is not part of the viz_config\n\n    /**\n     * Mechanism to expand or contract a single node. Expanded nodes have a children list, while for\n     * contracted nodes the list is stored in _children. Nodes with their children data stored in _children will not\n     * have their children rendered.\n     */\n    toggle: function(d) {\n        if (typeof d === \"undefined\") {\n            return;\n        }\n        if (d.children) {\n            d._children = d.children;\n            d.children = null;\n        } else {\n            d.children = d._children;\n            d._children = null;\n        }\n    },\n\n    /**\n     *  Contracts the phylotree to a single node by repeatedly calling itself to place all the list\n     *  of children under _children.\n     */\n    toggleAll: function(d) {\n        if (d.children && d.children.length !== 0) {\n            d.children.forEach(this.toggleAll);\n            toggle(d);\n        }\n    },\n\n    /**\n     *  Return the data of the tree. Used for preserving state.\n     */\n    getData: function() {\n        return this.root;\n    },\n\n    /**\n     * Overriding the default save mechanism to do some clean of circular reference of the\n     * phyloTree and to include phyloTree in the saved json\n     */\n    save: function() {\n        var root = this.root;\n        cleanTree(root);\n        //this.set(\"root\", root);\n\n        function cleanTree(node) {\n            // we need to remove parent to delete circular reference\n            delete node.parent;\n\n            // removing unnecessary attributes\n            if (node._selected) {\n                delete node._selected;\n            }\n\n            if (node.children) {\n                node.children.forEach(cleanTree);\n            }\n            if (node._children) {\n                node._children.forEach(cleanTree);\n            }\n        }\n\n        var config = jQuery.extend(true, {}, this.attributes);\n        config.selectedNode = null;\n\n        show_message(\"Saving to Galaxy\", \"progress\");\n\n        return $.ajax({\n            url: this.url(),\n            type: \"POST\",\n            dataType: \"json\",\n            data: {\n                config: JSON.stringify(config),\n                type: \"phyloviz\"\n            },\n            success: function(res) {\n                hide_modal();\n            }\n        });\n    }\n});\n\n// -- Views --\n/**\n *  Stores the default variable for setting up the visualization\n */\nvar PhylovizLayoutBase = Backbone.View.extend({\n    defaults: {\n        nodeRadius: 4.5 // radius of each node in the diagram\n    },\n\n    /**\n     *  Common initialization in layouts\n     */\n    stdInit: function(options) {\n        var self = this;\n        self.model.on(\n            \"change:separation change:leafHeight change:fontSize change:nodeAttrChangedTime\",\n            self.updateAndRender,\n            self\n        );\n\n        self.vis = options.vis;\n        self.i = 0;\n        self.maxDepth = -1; // stores the max depth of the tree\n\n        self.width = options.width;\n        self.height = options.height;\n    },\n\n    /**\n     *  Updates the visualization whenever there are changes in the expansion and contraction of nodes\n     *  AND possibly when the tree is edited.\n     */\n    updateAndRender: function(source) {\n        var vis = d3.select(\".vis\");\n        var self = this;\n        source = source || self.model.root;\n\n        self.renderNodes(source);\n        self.renderLinks(source);\n        self.addTooltips();\n    },\n\n    /**\n     * Renders the links for the visualization.\n     */\n    renderLinks: function(source) {\n        var self = this;\n        var diagonal = self.diagonal;\n        var duration = self.duration;\n        var layoutMode = self.layoutMode;\n        var link = self.vis.selectAll(\"g.completeLink\").data(self.tree.links(self.nodes), d => d.target.id);\n\n        var calcalateLinePos = d => {\n            // position of the source node <=> starting location of the line drawn\n            d.pos0 = `${d.source.y0} ${d.source.x0}`;\n            // position where the line makes a right angle bend\n            d.pos1 = `${d.source.y0} ${d.target.x0}`;\n            // point where the horizontal line becomes a dotted line\n            d.pos2 = `${d.target.y0} ${d.target.x0}`;\n        };\n\n        var linkEnter = link\n            .enter()\n            .insert(\"svg:g\", \"g.node\")\n            .attr(\"class\", \"completeLink\");\n\n        linkEnter\n            .append(\"svg:path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", d => {\n                calcalateLinePos(d);\n                return `M ${d.pos0} L ${d.pos1}`;\n            });\n\n        var linkUpdate = link.transition().duration(500);\n\n        linkUpdate.select(\"path.link\").attr(\"d\", d => {\n            calcalateLinePos(d);\n            return `M ${d.pos0} L ${d.pos1} L ${d.pos2}`;\n        });\n\n        var linkExit = link.exit().remove();\n    },\n\n    // User Interaction methods below\n\n    /**\n     *  Displays the information for editing\n     */\n    selectNode: function(node) {\n        var self = this;\n        d3.selectAll(\"g.node\").classed(\"selectedHighlight\", d => {\n            if (node.id === d.id) {\n                if (node._selected) {\n                    // for de=selecting node.\n                    delete node._selected;\n                    return false;\n                } else {\n                    node._selected = true;\n                    return true;\n                }\n            }\n            return false;\n        });\n\n        self.model.set(\"selectedNode\", node);\n        $(\"#phyloVizSelectedNodeName\").val(node.name);\n        $(\"#phyloVizSelectedNodeDist\").val(node.dist);\n        $(\"#phyloVizSelectedNodeAnnotation\").val(node.annotation || \"\");\n    },\n\n    /**\n     *  Creates bootstrap tooltip for the visualization. Has to be called repeatedly due to newly generated\n     *  enterNodes\n     */\n    addTooltips: function() {\n        $(\".tooltip\").remove(); //clean up tooltip, just in case its listeners are removed by d3\n        $(\".node\")\n            .attr(\"data-original-title\", function() {\n                var d = this.__data__;\n                var annotation = d.annotation || \"None\";\n                return d\n                    ? `${d.name ? `${d.name}<br/>` : \"\"}Dist: ${d.dist} <br/>Annotation1: ${annotation}${\n                          d.bootstrap ? `<br/>Confidence level: ${Math.round(100 * d.bootstrap)}` : \"\"\n                      }`\n                    : \"\";\n            })\n            .tooltip({ placement: \"top\", trigger: \"hover\" });\n    }\n});\n\n/**\n * Linea layout class of Phyloviz, is responsible for rendering the nodes\n * calls PhyloTreeLayout to determine the positions of the nodes\n */\nvar PhylovizLinearView = PhylovizLayoutBase.extend({\n    initialize: function(options) {\n        // Default values of linear layout\n        var self = this;\n        self.margins = options.margins;\n        self.layoutMode = \"Linear\";\n\n        self.stdInit(options);\n\n        self.layout();\n        self.updateAndRender(self.model.root);\n    },\n\n    /**\n     * Creates the basic layout of a linear tree by precalculating fixed values.\n     * One of calculations are also made here\n     */\n    layout: function() {\n        var self = this;\n        self.tree = new PhyloTreeLayout().layoutMode(\"Linear\");\n        self.diagonal = d3.svg.diagonal().projection(d => [d.y, d.x]);\n    },\n\n    /**\n     * Renders the nodes base on Linear layout.\n     */\n    renderNodes: function(source) {\n        var self = this;\n        var fontSize = `${self.model.get(\"fontSize\")}px`;\n\n        // assigning properties from models\n        self.tree.separation(self.model.get(\"separation\")).leafHeight(self.model.get(\"leafHeight\"));\n\n        var duration = 500;\n\n        var nodes = self.tree.separation(self.model.get(\"separation\")).nodes(self.model.root);\n\n        var node = self.vis.selectAll(\"g.node\").data(nodes, d => d.name + d.id || (d.id = ++self.i));\n\n        // These variables has to be passed into update links which are in the base methods\n        self.nodes = nodes;\n        self.duration = duration;\n\n        // ------- D3 ENTRY --------\n        // Enter any new nodes at the parent's previous position.\n        var nodeEnter = node\n            .enter()\n            .append(\"svg:g\")\n            .attr(\"class\", \"node\")\n            .on(\"dblclick\", () => {\n                d3.event.stopPropagation();\n            })\n            .on(\"click\", d => {\n                if (d3.event.altKey) {\n                    self.selectNode(d); // display info if alt is pressed\n                } else {\n                    if (d.children && d.children.length === 0) {\n                        return;\n                    } // there is no need to toggle leaves\n                    self.model.toggle(d); // contract/expand nodes at data level\n                    self.updateAndRender(d); // re-render the tree\n                }\n            });\n        //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n        if (toString.call(source) === \"[object Array]\") {\n            // if d is an array, replate with the first object (newick, phyloxml)\n            source = source[0];\n        }\n        nodeEnter.attr(\"transform\", d => `translate(${source.y0},${source.x0})`);\n\n        nodeEnter\n            .append(\"svg:circle\")\n            .attr(\"r\", 1e-6)\n            .style(\"fill\", d => (d._children ? \"lightsteelblue\" : \"#fff\"));\n\n        nodeEnter\n            .append(\"svg:text\")\n            .attr(\"class\", \"nodeLabel\")\n            .attr(\"x\", d => (d.children || d._children ? -10 : 10))\n            .attr(\"dy\", \".35em\")\n            .attr(\"text-anchor\", d => (d.children || d._children ? \"end\" : \"start\"))\n            .style(\"fill-opacity\", 1e-6);\n\n        // ------- D3 TRANSITION --------\n        // Transition nodes to their new position.\n        var nodeUpdate = node.transition().duration(duration);\n\n        nodeUpdate.attr(\"transform\", d => `translate(${d.y},${d.x})`);\n\n        nodeUpdate\n            .select(\"circle\")\n            .attr(\"r\", self.defaults.nodeRadius)\n            .style(\"fill\", d => (d._children ? \"lightsteelblue\" : \"#fff\"));\n\n        nodeUpdate\n            .select(\"text\")\n            .style(\"fill-opacity\", 1)\n            .style(\"font-size\", fontSize)\n            .text(d => (d.name && d.name !== \"\" ? d.name : d.bootstrap ? Math.round(100 * d.bootstrap) : \"\"));\n\n        // ------- D3 EXIT --------\n        // Transition exiting nodes to the parent's new position.\n        var nodeExit = node\n            .exit()\n            .transition()\n            .duration(duration)\n            .remove();\n\n        nodeExit.select(\"circle\").attr(\"r\", 1e-6);\n\n        nodeExit.select(\"text\").style(\"fill-opacity\", 1e-6);\n\n        // Stash the old positions for transition.\n        nodes.forEach(d => {\n            d.x0 = d.x; // we need the x0, y0 for parents with children\n            d.y0 = d.y;\n        });\n    }\n});\n\nvar PhylovizView = Backbone.View.extend({\n    className: \"phyloviz\",\n\n    initialize: function(options) {\n        var self = this;\n        // -- Default values of the vis\n        self.MIN_SCALE = 0.05; //for zooming\n        self.MAX_SCALE = 5;\n        self.MAX_DISPLACEMENT = 500;\n        self.margins = [10, 60, 10, 80];\n\n        self.width = $(\"#PhyloViz\").width();\n        self.height = $(\"#PhyloViz\").height();\n        self.radius = self.width;\n        self.data = options.data;\n\n        // -- Events Phyloviz view responses to\n        $(window).resize(() => {\n            self.width = $(\"#PhyloViz\").width();\n            self.height = $(\"#PhyloViz\").height();\n            self.render();\n        });\n\n        // -- Create phyloTree model\n        self.phyloTree = new PhyloTree(options.config);\n        self.phyloTree.root = self.data;\n\n        // -- Set up UI functions of main view\n        self.zoomFunc = d3.behavior.zoom().scaleExtent([self.MIN_SCALE, self.MAX_SCALE]);\n        self.zoomFunc.translate(self.phyloTree.get(\"translate\"));\n        self.zoomFunc.scale(self.phyloTree.get(\"scaleFactor\"));\n\n        // -- set up header buttons, search and settings menu\n        self.navMenu = new HeaderButtons(self);\n        self.settingsMenu = new SettingsMenu({\n            phyloTree: self.phyloTree\n        });\n        self.nodeSelectionView = new NodeSelectionView({\n            phyloTree: self.phyloTree\n        });\n        self.search = new PhyloVizSearch();\n\n        // using settimeout to call the zoomAndPan function according to the stored attributes in viz_config\n        setTimeout(() => {\n            self.zoomAndPan();\n        }, 1000);\n    },\n\n    render: function() {\n        // -- Creating helper function for vis. --\n        var self = this;\n        $(\"#PhyloViz\").empty();\n\n        // -- Layout viz. --\n        self.mainSVG = d3\n            .select(\"#PhyloViz\")\n            .append(\"svg:svg\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"pointer-events\", \"all\")\n            .call(\n                self.zoomFunc.on(\"zoom\", () => {\n                    self.zoomAndPan();\n                })\n            );\n\n        self.boundingRect = self.mainSVG\n            .append(\"svg:rect\")\n            .attr(\"class\", \"boundingRect\")\n            .attr(\"width\", self.width)\n            .attr(\"height\", self.height)\n            .attr(\"stroke\", \"black\")\n            .attr(\"fill\", \"white\");\n\n        self.vis = self.mainSVG.append(\"svg:g\").attr(\"class\", \"vis\");\n\n        self.layoutOptions = {\n            model: self.phyloTree,\n            width: self.width,\n            height: self.height,\n            vis: self.vis,\n            margins: self.margins\n        };\n\n        // -- Creating Title\n        $(\"#title\").text(`Phylogenetic Tree from ${self.phyloTree.get(\"title\")}:`);\n\n        // -- Create Linear view instance --\n        var linearView = new PhylovizLinearView(self.layoutOptions);\n    },\n\n    /**\n     * Function to zoom and pan the svg element which the entire tree is contained within\n     * Uses d3.zoom events, and extend them to allow manual updates and keeping states in model\n     */\n    zoomAndPan: function(event) {\n        var zoomParams;\n        var translateParams;\n        if (typeof event !== \"undefined\") {\n            zoomParams = event.zoom;\n            translateParams = event.translate;\n        }\n\n        var self = this;\n        var scaleFactor = self.zoomFunc.scale();\n        var translationCoor = self.zoomFunc.translate();\n        var zoomStatement = \"\";\n        var translateStatement = \"\";\n\n        // Do manual scaling.\n        switch (zoomParams) {\n            case \"reset\":\n                scaleFactor = 1.0;\n                translationCoor = [0, 0];\n                break;\n            case \"+\":\n                scaleFactor *= 1.1;\n                break;\n            case \"-\":\n                scaleFactor *= 0.9;\n                break;\n            default:\n                if (typeof zoomParams === \"number\") {\n                    scaleFactor = zoomParams;\n                } else if (d3.event !== null) {\n                    scaleFactor = d3.event.scale;\n                }\n        }\n        if (scaleFactor < self.MIN_SCALE || scaleFactor > self.MAX_SCALE) {\n            return;\n        }\n        self.zoomFunc.scale(scaleFactor); //update scale Factor\n        zoomStatement = `translate(${self.margins[3]},${self.margins[0]}) scale(${scaleFactor})`;\n\n        // Do manual translation.\n        if (d3.event !== null) {\n            translateStatement = `translate(${d3.event.translate})`;\n        } else {\n            if (typeof translateParams !== \"undefined\") {\n                var x = translateParams.split(\",\")[0];\n                var y = translateParams.split(\",\")[1];\n                if (!isNaN(x) && !isNaN(y)) {\n                    translationCoor = [translationCoor[0] + parseFloat(x), translationCoor[1] + parseFloat(y)];\n                }\n            }\n            self.zoomFunc.translate(translationCoor); // update zoomFunc\n            translateStatement = `translate(${translationCoor})`;\n        }\n\n        self.phyloTree.set(\"scaleFactor\", scaleFactor);\n        self.phyloTree.set(\"translate\", translationCoor);\n        //refers to the view that we are actually zooming\n        self.vis.attr(\"transform\", translateStatement + zoomStatement);\n    },\n\n    /**\n     * Primes the Ajax URL to load another Nexus tree\n     */\n    reloadViz: function() {\n        var self = this;\n        var treeIndex = $(\"#phylovizNexSelector :selected\").val();\n        $.getJSON(\n            self.phyloTree.get(\"dataset\").url(),\n            {\n                tree_index: treeIndex,\n                data_type: \"raw_data\"\n            },\n            packedJson => {\n                self.data = packedJson.data;\n                self.config = packedJson;\n                self.render();\n            }\n        );\n    }\n});\n\nvar HeaderButtons = Backbone.View.extend({\n    initialize: function(phylovizView) {\n        var self = this;\n        self.phylovizView = phylovizView;\n\n        // Clean up code - if the class initialized more than once\n        $(\"#panelHeaderRightBtns\").empty();\n        $(\"#phyloVizNavBtns\").empty();\n        $(\"#phylovizNexSelector\").off();\n\n        self.initNavBtns();\n        self.initRightHeaderBtns();\n\n        // Initial a tree selector in the case of nexus\n        $(\"#phylovizNexSelector\")\n            .off()\n            .on(\"change\", () => {\n                self.phylovizView.reloadViz();\n            });\n    },\n\n    initRightHeaderBtns: function() {\n        var self = this;\n\n        var rightMenu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"gear\",\n                    title: _l(\"PhyloViz Settings\"),\n                    on_click: function() {\n                        $(\"#SettingsMenu\").show();\n                        self.settingsMenu.updateUI();\n                    }\n                },\n                {\n                    icon_class: \"disk\",\n                    title: _l(\"Save visualization\"),\n                    on_click: function() {\n                        var nexSelected = $(\"#phylovizNexSelector option:selected\").text();\n                        if (nexSelected) {\n                            self.phylovizView.phyloTree.set(\"title\", nexSelected);\n                        }\n                        self.phylovizView.phyloTree.save();\n                    }\n                },\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Search / Edit Nodes\",\n                    on_click: function() {\n                        $(\"#nodeSelectionView\").show();\n                    }\n                },\n                {\n                    icon_class: \"information\",\n                    title: _l(\"Phyloviz Help\"),\n                    on_click: function() {\n                        window.open(\"https://galaxyproject.org/learn/visualization/phylogenetic-tree/\");\n                        // https://docs.google.com/document/d/1AXFoJgEpxr21H3LICRs3EyMe1B1X_KFPouzIgrCz3zk/edit\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n        $(\"#panelHeaderRightBtns\").append(rightMenu.$el);\n    },\n\n    initNavBtns: function() {\n        var self = this;\n\n        var navMenu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    icon_class: \"zoom-in\",\n                    title: _l(\"Zoom in\"),\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({ zoom: \"+\" });\n                    }\n                },\n                {\n                    icon_class: \"zoom-out\",\n                    title: _l(\"Zoom out\"),\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({ zoom: \"-\" });\n                    }\n                },\n                {\n                    icon_class: \"arrow-circle\",\n                    title: \"Reset Zoom/Pan\",\n                    on_click: function() {\n                        self.phylovizView.zoomAndPan({\n                            zoom: \"reset\"\n                        });\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        $(\"#phyloVizNavBtns\").append(navMenu.$el);\n    }\n});\n\nvar SettingsMenu = UserMenuBase.extend({\n    className: \"Settings\",\n\n    initialize: function(options) {\n        // settings needs to directly interact with the phyloviz model so it will get access to it.\n        var self = this;\n        self.phyloTree = options.phyloTree;\n        self.el = $(\"#SettingsMenu\");\n        self.inputs = {\n            separation: $(\"#phyloVizTreeSeparation\"),\n            leafHeight: $(\"#phyloVizTreeLeafHeight\"),\n            fontSize: $(\"#phyloVizTreeFontSize\")\n        };\n\n        //init all buttons of settings\n        $(\"#settingsCloseBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.el.hide();\n            });\n        $(\"#phylovizResetSettingsBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.resetToDefaults();\n            });\n        $(\"#phylovizApplySettingsBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.apply();\n            });\n    },\n\n    /**\n     * Applying user values to phylotree model.\n     */\n    apply: function() {\n        var self = this;\n        if (\n            !self.isAcceptableValue(self.inputs.separation, 50, 2500) ||\n            !self.isAcceptableValue(self.inputs.leafHeight, 5, 30) ||\n            !self.isAcceptableValue(self.inputs.fontSize, 5, 20)\n        ) {\n            return;\n        }\n        $.each(self.inputs, (key, $input) => {\n            self.phyloTree.set(key, $input.val());\n        });\n    },\n    /**\n     * Called to update the values input to that stored in the model\n     */\n    updateUI: function() {\n        var self = this;\n        $.each(self.inputs, (key, $input) => {\n            $input.val(self.phyloTree.get(key));\n        });\n    },\n    /**\n     * Resets the value of the phyloTree model to its default\n     */\n    resetToDefaults: function() {\n        $(\".tooltip\").remove(); // just in case the tool tip was not removed\n        var self = this;\n        $.each(self.phyloTree.defaults, (key, value) => {\n            self.phyloTree.set(key, value);\n        });\n        self.updateUI();\n    },\n\n    render: function() {}\n});\n\n/**\n * View for inspecting node properties and editing them\n */\nvar NodeSelectionView = UserMenuBase.extend({\n    className: \"Settings\",\n\n    initialize: function(options) {\n        var self = this;\n        self.el = $(\"#nodeSelectionView\");\n        self.phyloTree = options.phyloTree;\n\n        self.UI = {\n            enableEdit: $(\"#phylovizEditNodesCheck\"),\n            saveChanges: $(\"#phylovizNodeSaveChanges\"),\n            cancelChanges: $(\"#phylovizNodeCancelChanges\"),\n            name: $(\"#phyloVizSelectedNodeName\"),\n            dist: $(\"#phyloVizSelectedNodeDist\"),\n            annotation: $(\"#phyloVizSelectedNodeAnnotation\")\n        };\n\n        // temporarily stores the values in case user change their mind\n        self.valuesOfConcern = {\n            name: null,\n            dist: null,\n            annotation: null\n        };\n\n        //init UI buttons\n        $(\"#nodeSelCloseBtn\")\n            .off()\n            .on(\"click\", () => {\n                self.el.hide();\n            });\n        self.UI.saveChanges.off().on(\"click\", () => {\n            self.updateNodes();\n        });\n        self.UI.cancelChanges.off().on(\"click\", () => {\n            self.cancelChanges();\n        });\n\n        ($ => {\n            // extending jquery fxn for enabling and disabling nodes.\n            $.fn.enable = function(isEnabled) {\n                return $(this).each(function() {\n                    if (isEnabled) {\n                        $(this).removeAttr(\"disabled\");\n                    } else {\n                        $(this).attr(\"disabled\", \"disabled\");\n                    }\n                });\n            };\n        })(jQuery);\n\n        self.UI.enableEdit.off().on(\"click\", () => {\n            self.toggleUI();\n        });\n    },\n\n    /**\n     * For turning on and off the child elements\n     */\n    toggleUI: function() {\n        var self = this;\n        var checked = self.UI.enableEdit.is(\":checked\");\n\n        if (!checked) {\n            self.cancelChanges();\n        }\n\n        $.each(self.valuesOfConcern, (key, value) => {\n            self.UI[key].enable(checked);\n        });\n        if (checked) {\n            self.UI.saveChanges.show();\n            self.UI.cancelChanges.show();\n        } else {\n            self.UI.saveChanges.hide();\n            self.UI.cancelChanges.hide();\n        }\n    },\n\n    /**\n     * Reverting to previous values in case user change their minds\n     */\n    cancelChanges: function() {\n        var self = this;\n        var node = self.phyloTree.get(\"selectedNode\");\n        if (node) {\n            $.each(self.valuesOfConcern, (key, value) => {\n                self.UI[key].val(node[key]);\n            });\n        }\n    },\n\n    /**\n     * Changing the data in the underlying tree with user-specified values\n     */\n    updateNodes: function() {\n        var self = this;\n        var node = self.phyloTree.get(\"selectedNode\");\n        if (node) {\n            if (\n                !self.isAcceptableValue(self.UI.dist, 0, 1) ||\n                self.hasIllegalJsonCharacters(self.UI.name) ||\n                self.hasIllegalJsonCharacters(self.UI.annotation)\n            ) {\n                return;\n            }\n            $.each(self.valuesOfConcern, (key, value) => {\n                node[key] = self.UI[key].val();\n            });\n            self.phyloTree.set(\"nodeAttrChangedTime\", new Date());\n        } else {\n            alert(\"No node selected\");\n        }\n    }\n});\n\n/**\n * Initializes the search panel on phyloviz and handles its user interaction\n * It allows user to search the entire free based on some qualifer, like dist <= val.\n */\nvar PhyloVizSearch = UserMenuBase.extend({\n    initialize: function() {\n        var self = this;\n\n        $(\"#phyloVizSearchBtn\").on(\"click\", () => {\n            var searchTerm = $(\"#phyloVizSearchTerm\");\n\n            var searchConditionVal = $(\"#phyloVizSearchCondition\")\n                .val()\n                .split(\"-\");\n\n            var attr = searchConditionVal[0];\n            var condition = searchConditionVal[1];\n            self.hasIllegalJsonCharacters(searchTerm);\n\n            if (attr === \"dist\") {\n                self.isAcceptableValue(searchTerm, 0, 1);\n            }\n            self.searchTree(attr, condition, searchTerm.val());\n        });\n    },\n\n    /**\n     * Searches the entire tree and will highlight the nodes that match the condition in green\n     */\n    searchTree: function(attr, condition, val) {\n        d3.selectAll(\"g.node\").classed(\"searchHighlight\", d => {\n            var attrVal = d[attr];\n            if (typeof attrVal !== \"undefined\" && attrVal !== null) {\n                if (attr === \"dist\") {\n                    switch (condition) {\n                        case \"greaterEqual\":\n                            return attrVal >= +val;\n                        case \"lesserEqual\":\n                            return attrVal <= +val;\n                        default:\n                            return;\n                    }\n                } else if (attr === \"name\" || attr === \"annotation\") {\n                    return attrVal.toLowerCase().indexOf(val.toLowerCase()) !== -1;\n                }\n            }\n        });\n    }\n});\n\nexport default {\n    PhylovizView: PhylovizView\n};\n"]}