{"version":3,"sources":["viz/trackster/tracks.js"],"names":["round","num","places","val","Math","pow","TILE_SIZE","supportsByteRanges","url","DATA_ERROR","$","ajax","DATA_NOCONVERTER","DATA_NONE","xhr","setRequestHeader","success","result","status","DATA_CANNOT_RUN_TOOL","DATA_CACHE_SIZE","_","extend","html_elt_js_obj_dict","is_container","element","obj","attr","moveable","handle_class","container_selector","element_js_obj","bind","handle","relative","e","d","this","child","container","top","bottom","i","parent","children","this_obj","length","position","outerHeight","cur_container","offsetY","insertBefore","remove_drawable","add_drawable_before","insertAfter","add_drawable","get","find","prepend","append","hasClass","move_drawable","deltaY","addClass","CONTINUOUS_DATA_MODES","Drawable","promise","Deferred","obj_dict","id_counter","type","beforeSend","action_icons","config","ConfigSettingCollection","from_models_and_saved_values","config_params","prefs","get_value","set_value","name","config_onchange","on","container_div","build_container_div","header_div","header","header_view","_viz_views2","default","TrackHeaderView","model","id","view","icons_div","is_overview","show","hide","prototype","action_icons_def","title","css_class","on_click_fn","drawable","toggle_icon","removeClass","hide_contents","show_contents","_localization2","_config2","ConfigSettingCollectionView","render_in_modal","remove","default_value","key","hidden","collection","changed","can_draw","enabled","request_draw","_draw","options","init","new_name","old_name","revert_name","to_dict","update_intro_div","update_icons","DrawableCollection","obj_type","drawables","unpack_drawables","drawables_array","object_from_template","dictified_drawables","push","to_key_value_dict","other","index","indexOf","replace_drawable","old_drawable","new_drawable","update_html","replaceWith","splice","new_position","get_drawables","get_tracks","track_type","queue","slice","shift","tracks","concat","DrawableGroup","drag_handle_class","call","content_div","filters_manager","_filters2","FiltersManager","parent_div","after","saved_filters_managers","old_manager","filters","setup_multitrack_filtering","group","show_composite_track","visible","clear_filters","clear_tile_cache","tiles_div","num_drawables","composite_icon","filters_icon","toggle","CompositeTrack","j","a_type","num_feature_tracks","get_type","can_composite","FeatureTrack","LineTrack","same_type","filter","shared_filters","new_filter","NumberFilter","add_filter","_restore_filter_managers","init_filters","composite_track","each","TracksterView","Backbone","initialize","dbkey","stand_alone","undefined","label_tracks","tracks_to_be_redrawn","max_low","max_high","zoom_factor","min_separation","has_changes","View","_visualization2","CanvasManager","ownerDocument","load_chroms_deferred","reset","label","render","parent_element","top_container","requested_redraw","appendTo","browser_content_div","bottom_container","top_labeltrack","viewport_container","add_tracks_button","text","intro_div","click","nav_container","select_datasets","track","overview_viewport","prependTo","overview_close","nav","overview_highlight","overview_box_background","overview_box","nav_controls","chrom_select","overview","location_span","stopPropagation","nav_input","default_overview_height","height","source","all_features","vis_id","hidden_input","keyCode","which","response","map","value","zo_link","zi_link","zoom_in","chrom","low","high","change_chrom","select","focus","autocomplete","request","feature_search_deferreds","t","data_manager","search_features","term","dataset_features","when","apply","done","feature","trigger","minLength","delta","current_x","reset_overview","zoom_out","clientX","tooltip","placement","original_low","offsetX","new_scroll","scrollTop","left","min","pageX","startX","width","abs","max","update_location","old_low","current_height","clientY","delta_chrom","move_delta","css","get_base_color","proxy","offset","span","trigger_navigate","clearTimeout","timer","delay","request_redraw","add_label_track","LabelTrack","load_chroms","resize_timer","data","setTimeout","dataType","document","chrom_info","redraw","window","reference_track","base","toLowerCase","chrom_start_index","new_low","start_index","chrom_data","self","new_high","new_chrom","_util2","commatize","url_parms","Galaxy","root","reference","ref_track","found","len","chrom_option","prev_chroms","chrom_pos","v","fraction","data_fetch","redraw_on_move_fn","go_to","then","str","replace","split","label_track","parseInt","move_fraction","current_chrom_span","track_options","_redraw","resolution_px_b","min_width_px","track_list","left_px","width_px","requestAnimationFrame","cur_center","resize_window","set_overview","resize_viewport","overview_drawable","dataset","point","new_half","TracksterTool","defaults","Tool","state_dict","ToolParameterView","copy","html_div","postdraw_actions","update_value","TracksterToolView","_tools2","name_div","tool","tool_state","param_view","get_inputs_dict","run_tool_row","run_on_dataset","events","change :input","param_div","$el","param","set_visible","html","update_params","params","update_event","target","tool_id","run_on_region","keydown","url_params","action","regions","region","run_on_dataset_button","current_track","new_track","track_name","is_visible","run","target_dataset_id","ajax_settings","JSON","stringify","contentType","buttons","interval","modal","success_callback","start","end","FilterScaler","Scaler","MAX_VALUE","tool_region_and_parameters_str","html_elt","constructor","LineTrackTile","Tile","change_mode","mode","FeatureTrackTile","w_scale","has_icons","track_data","incomplete_features","other_tiles_features_drawn","inputs","ss_deferred","ServerStateDeferred","success_fn","go","error","message","default_val","_painters2","gen_val","feature_data","Number","predisplay_actions","parseFloat","canvas","stale","all_slotted","feature_mapper","seq_data","Track","view_region","bookmarked_regions","Model","_data2","Dataset","dataset_check_type","data_url_extra_params","GenomeDataManager","location","chroms_info","data_mode_compatible","data_and_mode_compatible","cancel_fn","min_height_px","max_height_px","visible_height_px","resize","add_resize_handle","on_resize","in_handle","in_drag","original_height","new_height","unbind","ok_fn","GenomeRegion","elt","ReferenceTrack","regions_to_use","show_message","href","msg_html","hda_ldda","Collection","toJSON","body","No","Yes","retry","set","Close","drag_control","hover","msg_elt","data_query_wait","valid_chroms","init_deferred","data_type","min_value","max_value","set_default_value","VariantTrack","tile_cache","clear","left_offset","tool_view","TiledTrack","getJSON","kind","set_filters_manager","predraw_init","resolve","stats","new_mode","mean","sd","mode_icon","param_space_viz_icon","filters_available","Cache","dynamic_tool_div","clear_after","range","overlay_div","resolution","slotters","max_rows","tile_promise","tile_region","tile_index","tile_width","tile_promises","set_min_max","tiles","_add_yaxis_label","pref_name","isNaN","floor","ceil","make_text_editable","num_cols","line_track_tiles","tile","draw_helper","tools_icon","_gen_tile_cache_key","icons_present","before_draw","_get_drawables","force","show_tile","get_tile_data","data_mode","tile_data","tile_drawn","on_change","drawing_modes","drawing_heights","canvas_manager","tile_low","tile_high","new_val","all_data_index","ctx","translate","painter","draw","update_auto_mode","display_mode","draw_tile","tile_element","get_elt","o","is_tile","track_height","m","get_data","region_str","param_str","set_elt","tracks_data","can_subset","entry","extra_info","subset_entry","pop","get_mode","get_canvas_height","new_canvas","getContext","globalAlpha","globalCompositeOperation","canvas_width","_draw_line_track_tile","tickDistance","new_div","screenPosition","LinePainter","build_config_params","toString","show_group","join","dataset_type","visible_height","init_for_tool_data","log","max_height","ReadTrack","display_modes","data_url","union","cur_visible","new_visible","init_deferreds","fillStyle","set_name","update_all_min_max","DiagonalHeatmapTrack","char_width_px","GenomeReferenceDataManager","is","subset","help","manager","default_font","textAlign","str_len","c","_bbiDataManager2","BBIDataManager","set_painter_from_config","tile_incomplete_features","values","new_tile","f","example_feature","DiagonalHeatmapPainter","summary_draw_height","incremental_slots","slotter","level","rows_required","ArcLinkedFeaturePainter","LinkedFeaturePainter","all_incomplete_features","filtered","inc_features","slots","filter_alpha_scaler","filter_height_scaler","ref_seq","omit","keys","size","new_canvas_ctx","draw_results","drawImage","cur_tile","features","update_ui_elt","applies_to","show_more_rows_icon","num_samples","get_metadata","dummy_painter","get_required_height","dummy_context","_slotting2","FeatureSlotter","x","measureText","font_size","flen","update_attrs","keep","alpha_filter","height_filter","b","addable_objects","translation","drawable_type","match","deferreds","fetch","sample_names","font-size","samples_div_html","line-height","ReadPainter","VcfTrack","template"],"mappings":"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","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["import _l from \"utils/localization\";\nimport * as _ from \"libs/underscore\";\nimport visualization from \"viz/visualization\";\nimport viz_views from \"viz/viz_views\";\nimport util from \"viz/trackster/util\";\nimport slotting from \"viz/trackster/slotting\";\nimport painters from \"viz/trackster/painters\";\nimport filters_mod from \"viz/trackster/filters\";\nimport data from \"mvc/dataset/data\";\nimport tools_mod from \"mvc/tool/tools\";\nimport config_mod from \"utils/config\";\nimport bbi from \"viz/bbi-data-manager\";\nimport \"ui/editable-text\";\nvar extend = _.extend;\n\n// ---- Web UI specific utilities ----\n\n/**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n// TODO: probably should separate moveable objects from containers.\nvar html_elt_js_obj_dict = {};\n\n/**\n * Designates an HTML as a container.\n */\nvar is_container = (element, obj) => {\n    html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n};\n\n/**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\nvar moveable = (element, handle_class, container_selector, element_js_obj) => {\n    // HACK: set default value for container selector.\n    container_selector = \".group\";\n\n    // Register element with its object.\n    html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n    // Need to provide selector for handle, not class.\n    element\n        .bind(\"drag\", { handle: `.${handle_class}`, relative: true }, function(e, d) {\n            var element = $(this);\n            var parent = $(this).parent();\n\n            var // Only sorting amongst tracks and groups.\n            children = parent.children(\".track,.group\");\n\n            var this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")];\n            var child;\n            var container;\n            var top;\n            var bottom;\n            var i;\n\n            //\n            // Enable three types of dragging: (a) out of container; (b) into container;\n            // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n            //\n\n            // Handle dragging out of container.\n            container = $(this).parents(container_selector);\n            if (container.length !== 0) {\n                top = container.position().top;\n                bottom = top + container.outerHeight();\n                var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n                if (d.offsetY < top) {\n                    // Moving above container.\n                    $(this).insertBefore(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable_before(this_obj, cur_container);\n                    return;\n                } else if (d.offsetY > bottom) {\n                    // Moving below container.\n                    $(this).insertAfter(container);\n                    cur_container.remove_drawable(this_obj);\n                    cur_container.container.add_drawable(this_obj);\n                    return;\n                }\n            }\n\n            // Handle dragging into container. Child is appended to container's content_div.\n            container = null;\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                top = child.position().top;\n                bottom = top + child.outerHeight();\n                // Dragging into container if child is a container and offset is inside container.\n                if (child.is(container_selector) && this !== child.get(0) && d.offsetY >= top && d.offsetY <= bottom) {\n                    // Append/prepend based on where offsetY is closest to and return.\n                    if (d.offsetY - top < bottom - d.offsetY) {\n                        child.find(\".content-div\").prepend(this);\n                    } else {\n                        child.find(\".content-div\").append(this);\n                    }\n                    // Update containers. Object may not have container if it is being moved quickly.\n                    if (this_obj.container) {\n                        this_obj.container.remove_drawable(this_obj);\n                    }\n                    html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(this_obj);\n                    return;\n                }\n            }\n\n            // Handle sibling movement, aka sorting.\n\n            // Determine new position\n            for (i = 0; i < children.length; i++) {\n                child = $(children.get(i));\n                if (\n                    d.offsetY < child.position().top &&\n                    // Cannot move tracks above reference track or intro div.\n                    !(child.hasClass(\"reference-track\") || child.hasClass(\"intro\"))\n                ) {\n                    break;\n                }\n            }\n\n            // If not already in the right place, move. Need\n            // to handle the end specially since we don't have\n            // insert at index\n            if (i === children.length) {\n                if (this !== children.get(i - 1)) {\n                    parent.append(this);\n                    html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, i);\n                }\n            } else if (this !== children.get(i)) {\n                $(this).insertBefore(children.get(i));\n                // Need to adjust insert position if moving down because move is changing\n                // indices of all list items.\n                html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, d.deltaY > 0 ? i - 1 : i);\n            }\n        })\n        .bind(\"dragstart\", function() {\n            $(this).addClass(\"dragging\");\n        })\n        .bind(\"dragend\", function() {\n            $(this).removeClass(\"dragging\");\n        });\n};\n\n/**\n * Init constants & functions used throughout trackster.\n */\nvar // Padding at the top of tracks for error messages\nERROR_PADDING = 20;\n\nvar // Maximum number of rows un a slotted track\nMAX_FEATURE_DEPTH = 100;\n\nvar // Minimum width for window for squish to be used.\nMIN_SQUISH_VIEW_WIDTH = 12000;\n\nvar // Number of pixels per tile, not including left offset.\nTILE_SIZE = 400;\n\nvar DEFAULT_DATA_QUERY_WAIT = 5000;\n\nvar // Maximum number of chromosomes that are selectable at any one time.\nMAX_CHROMS_SELECTABLE = 100;\n\nvar DATA_ERROR = \"Cannot display dataset due to an error. \";\n\nvar DATA_NOCONVERTER = \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\";\n\nvar DATA_NONE = \"No data for this chrom/contig.\";\n\nvar DATA_PENDING =\n    \"Preparing data. This can take a while for a large dataset. \" +\n    \"If the visualization is saved and closed, preparation will continue in the background.\";\n\nvar DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \";\nvar DATA_LOADING = \"Loading data...\";\nvar DATA_OK = \"Ready for display\";\nvar TILE_CACHE_SIZE = 10;\nvar DATA_CACHE_SIZE = 20;\n\nvar // Numerical/continuous data display modes.\nCONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n/**\n * Round a number to a given number of decimal places.\n */\nfunction round(num, places) {\n    // Default rounding is to integer.\n    if (!places) {\n        places = 0;\n    }\n\n    var val = Math.pow(10, places);\n    return Math.round(num * val) / val;\n}\n\n/**\n * Check if a server can do byte range requests.\n */\nfunction supportsByteRanges(url) {\n    var promise = $.Deferred();\n    $.ajax({\n        type: \"HEAD\",\n        url: url,\n        beforeSend: function(xhr) {\n            xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n        },\n        success: function(result, status, xhr) {\n            promise.resolve(xhr.status === 206);\n        }\n    });\n\n    return promise;\n}\n\n/**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n/**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\nvar Drawable = function(view, container, obj_dict) {\n    if (!Drawable.id_counter) {\n        Drawable.id_counter = 0;\n    }\n    this.id = Drawable.id_counter++;\n    this.view = view;\n    this.container = container;\n    this.drag_handle_class = obj_dict.drag_handle_class;\n    this.is_overview = false;\n    this.action_icons = {};\n\n    // -- Set up drawable configuration. --\n    this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(this.config_params, obj_dict.prefs);\n\n    // If there's no saved name, use object name.\n    if (!this.config.get_value(\"name\")) {\n        this.config.set_value(\"name\", obj_dict.name);\n    }\n    if (this.config_onchange) {\n        this.config.on(\"change\", this.config_onchange, this);\n    }\n\n    // Build Drawable HTML and behaviors.\n    this.container_div = this.build_container_div();\n    this.header_div = null;\n\n    // Use opt-out policy on header creation because this is the more frequent approach:\n    // unless flag set, create header.\n    if (obj_dict.header !== false) {\n        var header_view = new viz_views.TrackHeaderView({\n            model: this,\n            id: this.id\n        });\n\n        this.header_div = header_view.$el;\n        this.container_div.append(this.header_div);\n\n        // Show icons when users is hovering over track.\n        var icons_div = header_view.icons_div;\n        this.action_icons = header_view.action_icons;\n        this.container_div.hover(\n            () => {\n                icons_div.show();\n            },\n            () => {\n                icons_div.hide();\n            }\n        );\n    }\n};\n\nDrawable.prototype.action_icons_def = [\n    // Hide/show drawable content.\n    // FIXME: make this an odict for easier lookup.\n    {\n        name: \"toggle_icon\",\n        title: \"Hide/show content\",\n        css_class: \"toggle\",\n        on_click_fn: function(drawable) {\n            if (drawable.config.get_value(\"content_visible\")) {\n                drawable.action_icons.toggle_icon.addClass(\"toggle-expand\").removeClass(\"toggle\");\n                drawable.hide_contents();\n                drawable.config.set_value(\"content_visible\", false);\n            } else {\n                drawable.action_icons.toggle_icon.addClass(\"toggle\").removeClass(\"toggle-expand\");\n                drawable.config.set_value(\"content_visible\", true);\n                drawable.show_contents();\n            }\n        }\n    },\n    // Edit settings.\n    {\n        name: \"settings_icon\",\n        title: _l(\"Edit settings\"),\n        css_class: \"gear\",\n        on_click_fn: function(drawable) {\n            var view = new config_mod.ConfigSettingCollectionView({\n                collection: drawable.config\n            });\n            view.render_in_modal(\"Configure Track\");\n        }\n    },\n    // Remove.\n    {\n        name: \"remove_icon\",\n        title: _l(\"Remove\"),\n        css_class: \"remove-icon\",\n        on_click_fn: function(drawable) {\n            // Tooltip for remove icon must be deleted when drawable is deleted.\n            $(\".tooltip\").remove();\n            drawable.remove();\n        }\n    }\n];\n\nextend(Drawable.prototype, {\n    config_params: [\n        { key: \"name\", label: \"Name\", type: \"text\", default_value: \"\" },\n        {\n            key: \"content_visible\",\n            type: \"bool\",\n            default_value: true,\n            hidden: true\n        }\n    ],\n\n    config_onchange: function() {},\n\n    init: function() {},\n\n    changed: function() {\n        this.view.changed();\n    },\n\n    can_draw: function() {\n        if (this.enabled && this.config.get_value(\"content_visible\")) {\n            return true;\n        }\n\n        return false;\n    },\n\n    request_draw: function() {},\n\n    _draw: function(options) {},\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {},\n\n    /**\n     * Set drawable name.\n     */\n    set_name: function(new_name) {\n        this.old_name = this.config.get_value(\"name\");\n        this.config.set_value(\"name\", new_name);\n    },\n\n    /**\n     * Revert track name; currently name can be reverted only once.\n     */\n    revert_name: function() {\n        if (this.old_name) {\n            this.config.set_value(\"name\", this.old_name);\n        }\n    },\n\n    /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n    remove: function() {\n        this.changed();\n\n        this.container.remove_drawable(this);\n        var view = this.view;\n        this.container_div.hide(0, function() {\n            $(this).remove();\n            // HACK: is there a better way to update the view?\n            view.update_intro_div();\n        });\n    },\n\n    /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n    build_container_div: function() {},\n\n    /**\n     * Update icons.\n     */\n    update_icons: function() {},\n\n    /**\n     * Hide drawable's contents.\n     */\n    hide_contents: function() {},\n\n    /**\n     * Show drawable's contents.\n     */\n    show_contents: function() {},\n\n    /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n    get_drawables: function() {}\n});\n\n/**\n * A collection of drawable objects.\n */\nvar DrawableCollection = function(view, container, obj_dict) {\n    Drawable.call(this, view, container, obj_dict);\n\n    // Attribute init.\n    this.obj_type = obj_dict.obj_type;\n    this.drawables = [];\n};\n\nextend(DrawableCollection.prototype, Drawable.prototype, {\n    /**\n     * Unpack and add drawables to the collection.\n     */\n    unpack_drawables: function(drawables_array) {\n        // Add drawables to collection.\n        this.drawables = [];\n        var drawable;\n        for (var i = 0; i < drawables_array.length; i++) {\n            drawable = object_from_template(drawables_array[i], this.view, this);\n            this.add_drawable(drawable);\n        }\n    },\n\n    /**\n     * Init each drawable in the collection.\n     */\n    init: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].init();\n        }\n    },\n\n    /**\n     * Draw each drawable in the collection.\n     */\n    _draw: function(options) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i]._draw(options);\n        }\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        var dictified_drawables = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            dictified_drawables.push(this.drawables[i].to_dict());\n        }\n        return {\n            prefs: this.config.to_key_value_dict(),\n            obj_type: this.obj_type,\n            drawables: dictified_drawables\n        };\n    },\n\n    /**\n     * Add a drawable to the end of the collection.\n     */\n    add_drawable: function(drawable) {\n        this.drawables.push(drawable);\n        drawable.container = this;\n        this.changed();\n    },\n\n    /**\n     * Add a drawable before another drawable.\n     */\n    add_drawable_before: function(drawable, other) {\n        this.changed();\n        var index = this.drawables.indexOf(other);\n        if (index !== -1) {\n            this.drawables.splice(index, 0, drawable);\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Replace one drawable with another.\n     */\n    replace_drawable: function(old_drawable, new_drawable, update_html) {\n        var index = this.drawables.indexOf(old_drawable);\n        if (index !== -1) {\n            this.drawables[index] = new_drawable;\n            if (update_html) {\n                old_drawable.container_div.replaceWith(new_drawable.container_div);\n            }\n            this.changed();\n        }\n        return index;\n    },\n\n    /**\n     * Remove drawable from this collection.\n     */\n    remove_drawable: function(drawable) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Found drawable to remove.\n            this.drawables.splice(index, 1);\n            drawable.container = null;\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Move drawable to another location in collection.\n     */\n    move_drawable: function(drawable, new_position) {\n        var index = this.drawables.indexOf(drawable);\n        if (index !== -1) {\n            // Remove from current position:\n            this.drawables.splice(index, 1);\n            // insert into new position:\n            this.drawables.splice(new_position, 0, drawable);\n            this.changed();\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Returns all <track_type> tracks in collection.\n     */\n    get_tracks: function(track_type) {\n        // Initialize queue with copy of drawables array.\n        var queue = this.drawables.slice(0);\n\n        var tracks = [];\n        var drawable;\n        while (queue.length !== 0) {\n            drawable = queue.shift();\n            if (drawable instanceof track_type) {\n                tracks.push(drawable);\n            } else if (drawable.drawables) {\n                queue = queue.concat(drawable.drawables);\n            }\n        }\n        return tracks;\n    }\n});\n\n/**\n * A group of drawables that are moveable, visible.\n */\nvar DrawableGroup = function(view, container, obj_dict) {\n    extend(obj_dict, {\n        obj_type: \"DrawableGroup\",\n        drag_handle_class: \"group-handle\"\n    });\n    DrawableCollection.call(this, view, container, obj_dict);\n\n    // Set up containers/moving for group: register both container_div and content div as container\n    // because both are used as containers (container div to recognize container, content_div to\n    // store elements). Group can be moved.\n    this.content_div = $(\"<div/>\")\n        .addClass(\"content-div\")\n        .attr(\"id\", `group_${this.id}_content_div`)\n        .appendTo(this.container_div);\n    is_container(this.container_div, this);\n    is_container(this.content_div, this);\n    moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n    // Set up filters.\n    this.filters_manager = new filters_mod.FiltersManager(this);\n    this.header_div.after(this.filters_manager.parent_div);\n\n    // HACK: add div to clear floating elements.\n    this.filters_manager.parent_div.after($(\"<div style='clear: both'/>\"));\n\n    // For saving drawables' filter managers when group-level filtering is done:\n    this.saved_filters_managers = [];\n\n    // Add drawables.\n    if (\"drawables\" in obj_dict) {\n        this.unpack_drawables(obj_dict.drawables);\n    }\n\n    // Restore filters.\n    if (\"filters\" in obj_dict) {\n        // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n        var old_manager = this.filters_manager;\n        this.filters_manager = new filters_mod.FiltersManager(this, obj_dict.filters);\n        old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n        if (obj_dict.filters.visible) {\n            this.setup_multitrack_filtering();\n        }\n    }\n};\n\nextend(DrawableGroup.prototype, Drawable.prototype, DrawableCollection.prototype, {\n    action_icons_def: [\n        Drawable.prototype.action_icons_def[0],\n        Drawable.prototype.action_icons_def[1],\n        // Replace group with composite track.\n        {\n            name: \"composite_icon\",\n            title: _l(\"Show composite track\"),\n            css_class: \"layers-stack\",\n            on_click_fn: function(group) {\n                $(\".tooltip\").remove();\n                group.show_composite_track();\n            }\n        },\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: _l(\"Filters\"),\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(group) {\n                // TODO: update Tooltip text.\n                if (group.filters_manager.visible()) {\n                    // Hiding filters.\n                    group.filters_manager.clear_filters();\n                    group._restore_filter_managers();\n                    // TODO: maintain current filter by restoring and setting saved manager's\n                    // settings to current/shared manager's settings.\n                    // TODO: need to restore filter managers when moving drawable outside group.\n                } else {\n                    // Showing filters.\n                    group.setup_multitrack_filtering();\n                    group.request_draw({ clear_tile_cache: true });\n                }\n                group.filters_manager.toggle();\n            }\n        },\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    build_container_div: function() {\n        var container_div = $(\"<div/>\")\n            .addClass(\"group\")\n            .attr(\"id\", `group_${this.id}`);\n        if (this.container) {\n            this.container.content_div.append(container_div);\n        }\n        return container_div;\n    },\n\n    hide_contents: function() {\n        this.tiles_div.hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    update_icons: function() {\n        //\n        // Handle update when there are no tracks.\n        //\n        var num_drawables = this.drawables.length;\n        if (num_drawables === 0) {\n            this.action_icons.composite_icon.hide();\n            this.action_icons.filters_icon.hide();\n        } else if (num_drawables === 1) {\n            this.action_icons.composite_icon.toggle(this.drawables[0] instanceof CompositeTrack);\n            this.action_icons.filters_icon.hide();\n        } else {\n            // There are 2 or more tracks.\n\n            //\n            // Determine if a composite track can be created. Current criteria:\n            // (a) all tracks are line tracks;\n            //      OR\n            // FIXME: this is not enabled right now because it has not been well tested:\n            // (b) there is a single FeatureTrack.\n            //\n\n            // All tracks the same?\n            var i;\n\n            var j;\n            var drawable;\n            var same_type = true;\n            var a_type = this.drawables[0].get_type();\n            var num_feature_tracks = 0;\n            for (i = 0; i < num_drawables; i++) {\n                drawable = this.drawables[i];\n                if (drawable.get_type() !== a_type) {\n                    can_composite = false;\n                    break;\n                }\n                if (drawable instanceof FeatureTrack) {\n                    num_feature_tracks++;\n                }\n            }\n\n            if (same_type && this.drawables[0] instanceof LineTrack) {\n                this.action_icons.composite_icon.show();\n            } else {\n                this.action_icons.composite_icon.hide();\n                $(\".tooltip\").remove();\n            }\n\n            //\n            // Set up group-level filtering and update filter icon.\n            //\n            if (num_feature_tracks > 1 && num_feature_tracks === this.drawables.length) {\n                //\n                // Find shared filters.\n                //\n                var shared_filters = {};\n\n                var filter;\n\n                // Init shared filters with filters from first drawable.\n                drawable = this.drawables[0];\n                for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                    filter = drawable.filters_manager.filters[j];\n                    shared_filters[filter.name] = [filter];\n                }\n\n                // Create lists of shared filters.\n                for (i = 1; i < this.drawables.length; i++) {\n                    drawable = this.drawables[i];\n                    for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                        filter = drawable.filters_manager.filters[j];\n                        if (filter.name in shared_filters) {\n                            shared_filters[filter.name].push(filter);\n                        }\n                    }\n                }\n\n                //\n                // Create filters for shared filters manager. Shared filters manager is group's\n                // manager.\n                //\n                this.filters_manager.remove_all();\n                var filters;\n                var new_filter;\n                var min;\n                var max;\n                for (var filter_name in shared_filters) {\n                    filters = shared_filters[filter_name];\n                    if (filters.length === num_feature_tracks) {\n                        // Add new filter.\n                        // FIXME: can filter.copy() be used?\n                        new_filter = new filters_mod.NumberFilter({\n                            name: filters[0].name,\n                            index: filters[0].index\n                        });\n                        this.filters_manager.add_filter(new_filter);\n                    }\n                }\n\n                // Show/hide icon based on filter availability.\n                this.action_icons.filters_icon.toggle(this.filters_manager.filters.length > 0);\n            } else {\n                this.action_icons.filters_icon.hide();\n            }\n        }\n    },\n\n    /**\n     * Restore individual track filter managers.\n     */\n    _restore_filter_managers: function() {\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].filters_manager = this.saved_filters_managers[i];\n        }\n        this.saved_filters_managers = [];\n    },\n\n    /**\n     *\n     */\n    setup_multitrack_filtering: function() {\n        // Save tracks' managers and set up shared manager.\n        if (this.filters_manager.filters.length > 0) {\n            // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n            this.saved_filters_managers = [];\n            for (var i = 0; i < this.drawables.length; i++) {\n                var drawable = this.drawables[i];\n                this.saved_filters_managers.push(drawable.filters_manager);\n                drawable.filters_manager = this.filters_manager;\n            }\n\n            //TODO: hide filters icons for each drawable?\n        }\n        this.filters_manager.init_filters();\n    },\n\n    /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n    show_composite_track: function() {\n        var composite_track = new CompositeTrack(this.view, this.view, {\n            name: this.config.get_value(\"name\"),\n            drawables: this.drawables\n        });\n        var index = this.container.replace_drawable(this, composite_track, true);\n        composite_track.request_draw();\n    },\n\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    remove_drawable: function(drawable) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        this.update_icons();\n    },\n\n    to_dict: function() {\n        // If filters are visible, need to restore original filter managers before converting to dict.\n        if (this.filters_manager.visible()) {\n            this._restore_filter_managers();\n        }\n\n        var obj_dict = extend(DrawableCollection.prototype.to_dict.call(this), {\n            filters: this.filters_manager.to_dict()\n        });\n\n        // Setup multi-track filtering again.\n        if (this.filters_manager.visible()) {\n            this.setup_multitrack_filtering();\n        }\n\n        return obj_dict;\n    },\n\n    request_draw: function(options) {\n        _.each(this.drawables, d => {\n            d.request_draw(options);\n        });\n    }\n});\n\n/**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\nvar TracksterView = Backbone.View.extend({\n    initialize: function(obj_dict) {\n        extend(obj_dict, {\n            obj_type: \"View\"\n        });\n        DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n        this.chrom = null;\n        this.vis_id = obj_dict.vis_id;\n        this.dbkey = obj_dict.dbkey;\n        this.stand_alone = obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true;\n        this.label_tracks = [];\n        this.tracks_to_be_redrawn = [];\n        this.max_low = 0;\n        this.max_high = 0;\n        this.zoom_factor = 3;\n        this.min_separation = 30;\n        this.has_changes = false;\n        // Deferred object that indicates when view's chrom data has been loaded.\n        this.load_chroms_deferred = null;\n        this.render();\n        this.canvas_manager = new visualization.CanvasManager(this.container.get(0).ownerDocument);\n        this.reset();\n\n        // Define track configuration\n        this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                }\n            ],\n            { name: obj_dict.name }\n        );\n    },\n\n    render: function() {\n        // Attribute init.\n        this.requested_redraw = false;\n\n        // Create DOM elements\n        var parent_element = this.container;\n\n        var view = this;\n        // Top container for things that are fixed at the top\n        this.top_container = $(\"<div/>\")\n            .addClass(\"top-container\")\n            .appendTo(parent_element);\n        // Browser content, primary tracks are contained in here\n        this.browser_content_div = $(\"<div/>\")\n            .addClass(\"content\")\n            .appendTo(parent_element);\n        // Bottom container for things that are fixed at the bottom\n        this.bottom_container = $(\"<div/>\")\n            .addClass(\"bottom-container\")\n            .appendTo(parent_element);\n        // Label track fixed at top\n        this.top_labeltrack = $(\"<div/>\")\n            .addClass(\"top-labeltrack\")\n            .appendTo(this.top_container);\n        // Viewport for dragging tracks in center\n        this.viewport_container = $(\"<div/>\")\n            .addClass(\"viewport-container\")\n            .attr(\"id\", \"viewport-container\")\n            .appendTo(this.browser_content_div);\n        // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n        this.content_div = this.viewport_container;\n        is_container(this.viewport_container, view);\n        // Introduction div shown when there are no tracks.\n        this.intro_div = $(\"<div/>\")\n            .addClass(\"intro\")\n            .appendTo(this.viewport_container);\n        var add_tracks_button = $(\"<div/>\")\n            .text(\"Add Datasets to Visualization\")\n            .addClass(\"action-button\")\n            .appendTo(this.intro_div)\n            .click(() => {\n                visualization.select_datasets({ dbkey: view.dbkey }, tracks => {\n                    _.each(tracks, track => {\n                        view.add_drawable(object_from_template(track, view, view));\n                    });\n                });\n            });\n\n        // Navigation at top\n        this.nav_container = $(\"<div/>\")\n            .addClass(\"trackster-nav-container\")\n            .prependTo(this.top_container);\n        this.nav = $(\"<div/>\")\n            .addClass(\"trackster-nav\")\n            .appendTo(this.nav_container);\n\n        if (this.stand_alone) {\n            this.nav_container.addClass(\"stand-alone\");\n            this.nav.addClass(\"stand-alone\");\n        }\n\n        // Overview (scrollbar and overview plot) at bottom\n        this.overview = $(\"<div/>\")\n            .addClass(\"overview\")\n            .appendTo(this.bottom_container);\n        this.overview_viewport = $(\"<div/>\")\n            .addClass(\"overview-viewport\")\n            .appendTo(this.overview);\n        this.overview_close = $(\"<a/>\")\n            .attr(\"title\", \"Close overview\")\n            .addClass(\"icon-button overview-close tooltip\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_highlight = $(\"<div/>\")\n            .addClass(\"overview-highlight\")\n            .hide()\n            .appendTo(this.overview_viewport);\n        this.overview_box_background = $(\"<div/>\")\n            .addClass(\"overview-boxback\")\n            .appendTo(this.overview_viewport);\n        this.overview_box = $(\"<div/>\")\n            .addClass(\"overview-box\")\n            .appendTo(this.overview_viewport);\n        this.default_overview_height = this.overview_box.height();\n\n        this.nav_controls = $(\"<div/>\")\n            .addClass(\"nav-controls\")\n            .appendTo(this.nav);\n        this.chrom_select = $(\"<select/>\")\n            .attr({ name: \"chrom\" })\n            .addClass(\"chrom-nav\")\n            .append(\"<option value=''>Loading</option>\")\n            .appendTo(this.nav_controls);\n        var submit_nav = function(e) {\n            if (e.type === \"focusout\" || (e.keyCode || e.which) === 13 || (e.keyCode || e.which) === 27) {\n                if ((e.keyCode || e.which) !== 27) {\n                    // Not escape key\n                    view.go_to($(this).val());\n                }\n                $(this).hide();\n                $(this).val(\"\");\n                view.location_span.show();\n                view.chrom_select.show();\n            }\n\n            // Suppress key presses so that they do impact viz.\n            e.stopPropagation();\n        };\n        this.nav_input = $(\"<input/>\")\n            .addClass(\"nav-input\")\n            .hide()\n            .bind(\"keyup focusout\", submit_nav)\n            .appendTo(this.nav_controls);\n        this.location_span = $(\"<span/>\")\n            .addClass(\"location\")\n            .attr(\"title\", \"Click to change location\")\n            .tooltip({ placement: \"bottom\" })\n            .appendTo(this.nav_controls);\n        this.location_span.click(() => {\n            view.location_span.hide();\n            view.chrom_select.hide();\n            view.nav_input.val(`${view.chrom}:${view.low}-${view.high}`);\n            view.nav_input.css(\"display\", \"inline-block\");\n            view.nav_input.select();\n            view.nav_input.focus();\n            // Set up autocomplete for tracks' features.\n            view.nav_input.autocomplete({\n                source: function(request, response) {\n                    // Using current text, query each track and create list of all matching features.\n                    var all_features = [];\n\n                    var feature_search_deferreds = $.map(view.get_tracks(FeatureTrack), t =>\n                        t.data_manager.search_features(request.term).success(dataset_features => {\n                            all_features = all_features.concat(dataset_features);\n                        })\n                    );\n\n                    // When all searching is done, fill autocomplete.\n                    $.when.apply($, feature_search_deferreds).done(() => {\n                        response(\n                            $.map(all_features, feature => ({\n                                label: feature[0],\n                                value: feature[1]\n                            }))\n                        );\n                    });\n                },\n                minLength: 2\n            });\n        });\n        if (this.vis_id !== undefined) {\n            this.hidden_input = $(\"<input/>\")\n                .attr(\"type\", \"hidden\")\n                .val(this.vis_id)\n                .appendTo(this.nav_controls);\n        }\n\n        this.zo_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-out\")\n            .attr(\"title\", \"Zoom out\")\n            .tooltip({ placement: \"bottom\" })\n            .click(() => {\n                view.zoom_out();\n            })\n            .appendTo(this.nav_controls);\n        this.zi_link = $(\"<a/>\")\n            .attr(\"id\", \"zoom-in\")\n            .attr(\"title\", \"Zoom in\")\n            .tooltip({ placement: \"bottom\" })\n            .click(() => {\n                view.zoom_in();\n            })\n            .appendTo(this.nav_controls);\n\n        // Get initial set of chroms.\n        this.load_chroms_deferred = this.load_chroms({ low: 0 });\n        this.chrom_select.bind(\"change\", () => {\n            view.change_chrom(view.chrom_select.val());\n        });\n\n        /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n        // Blur tool/filter inputs when user clicks on content div.\n        this.browser_content_div.click(function(e) {\n            $(this)\n                .find(\"input\")\n                .trigger(\"blur\");\n        });\n\n        // Double clicking zooms in\n        this.browser_content_div.bind(\"dblclick\", function(e) {\n            view.zoom_in(e.pageX, this.viewport_container);\n        });\n\n        // Dragging the overview box (~ horizontal scroll bar)\n        this.overview_box\n            .bind(\"dragstart\", function(e, d) {\n                this.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var delta = d.offsetX - this.current_x;\n                this.current_x = d.offsetX;\n                var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.max_high - view.max_low));\n                view.move_delta(-delta_chrom);\n            });\n\n        this.overview_close.click(() => {\n            view.reset_overview();\n        });\n\n        // Dragging in the viewport scrolls\n        this.viewport_container\n            .bind(\"draginit\", (e, d) => {\n                // Disable interaction if started in scrollbar (for webkit)\n                if (e.clientX > view.viewport_container.width() - 16) {\n                    return false;\n                }\n            })\n            .bind(\"dragstart\", (e, d) => {\n                d.original_low = view.low;\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n            })\n            .bind(\"drag\", function(e, d) {\n                var container = $(this);\n                var delta = d.offsetX - d.current_x;\n                var new_scroll = container.scrollTop() - (e.clientY - d.current_height);\n                container.scrollTop(new_scroll);\n                d.current_height = e.clientY;\n                d.current_x = d.offsetX;\n                var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.high - view.low));\n                view.move_delta(delta_chrom);\n            });\n        /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n        // Dragging in the top label track allows selecting a region to zoom in on selected region.\n        this.top_labeltrack\n            .bind(\"dragstart\", function(e, d) {\n                return $(\"<div/>\")\n                    .addClass(\"zoom-area\")\n                    .css(\"height\", view.browser_content_div.height() + view.top_labeltrack.height() + 1)\n                    .appendTo($(this));\n            })\n            .bind(\"drag\", (e, d) => {\n                $(d.proxy).css({\n                    left: Math.min(e.pageX, d.startX) - view.container.offset().left,\n                    width: Math.abs(e.pageX - d.startX)\n                });\n\n                var min = Math.min(e.pageX, d.startX) - view.container.offset().left;\n\n                var max = Math.max(e.pageX, d.startX) - view.container.offset().left;\n\n                var span = view.high - view.low;\n                var width = view.viewport_container.width();\n                view.update_location(\n                    Math.round(min / width * span) + view.low,\n                    Math.round(max / width * span) + view.low\n                );\n            })\n            .bind(\"dragend\", (e, d) => {\n                var min = Math.min(e.pageX, d.startX);\n                var max = Math.max(e.pageX, d.startX);\n                var span = view.high - view.low;\n                var width = view.viewport_container.width();\n                var old_low = view.low;\n                view.low = Math.round(min / width * span) + old_low;\n                view.high = Math.round(max / width * span) + old_low;\n                $(d.proxy).remove();\n                view.request_redraw();\n            });\n\n        // FIXME: this is still wonky for embedded visualizations.\n        /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n        this.add_label_track(new LabelTrack(this, { content_div: this.top_labeltrack }));\n\n        $(window).bind(\"resize\", function() {\n            // Stop previous timer.\n            if (this.resize_timer) {\n                clearTimeout(this.resize_timer);\n            }\n\n            // When function activated, resize window and redraw.\n            this.resize_timer = setTimeout(() => {\n                view.resize_window();\n            }, 500);\n        });\n        $(document).bind(\"redraw\", () => {\n            view.redraw();\n        });\n\n        this.reset();\n        $(window).trigger(\"resize\");\n    },\n\n    get_base_color: function(base) {\n        return this.config.get_value(`${base.toLowerCase()}_color`) || this.config.get_value(\"n_color\");\n    }\n});\n\n// FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\nextend(TracksterView.prototype, DrawableCollection.prototype, {\n    changed: function() {\n        this.has_changes = true;\n    },\n\n    /** Add or remove intro div depending on view state. */\n    update_intro_div: function() {\n        this.intro_div.toggle(this.drawables.length === 0);\n    },\n\n    /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n    trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n        // Stop previous timer.\n        if (this.timer) {\n            clearTimeout(this.timer);\n        }\n\n        if (delay) {\n            // To aggregate calls, use timer and only navigate once\n            // location has stabilized.\n            var self = this;\n            this.timer = setTimeout(() => {\n                self.trigger(\"navigate\", `${new_chrom}:${new_low}-${new_high}`);\n            }, 500);\n        } else {\n            view.trigger(\"navigate\", `${new_chrom}:${new_low}-${new_high}`);\n        }\n    },\n\n    update_location: function(low, high) {\n        this.location_span.text(`${util.commatize(low)} - ${util.commatize(high)}`);\n        this.nav_input.val(`${this.chrom}:${util.commatize(low)}-${util.commatize(high)}`);\n\n        // Update location. Only update when there is a valid chrom; when loading vis, there may\n        // not be a valid chrom.\n        var chrom = this.chrom_select.val();\n        if (chrom !== \"\") {\n            this.trigger_navigate(chrom, this.low, this.high, true);\n        }\n    },\n\n    /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n    // FIXME: instead of loading chrom data, should load and store genome object.\n    load_chroms: function(url_parms) {\n        url_parms.num = MAX_CHROMS_SELECTABLE;\n\n        var view = this;\n        var chrom_data = $.Deferred();\n        $.ajax({\n            url: `${Galaxy.root}api/genomes/${this.dbkey}`,\n            data: url_parms,\n            dataType: \"json\",\n            success: function(result) {\n                // Do nothing if could not load chroms.\n                if (result.chrom_info.length === 0) {\n                    return;\n                }\n\n                // Load chroms.\n                if (result.reference) {\n                    var ref_track = new ReferenceTrack(view);\n                    view.add_label_track(ref_track);\n                    view.reference_track = ref_track;\n                }\n                view.chrom_data = result.chrom_info;\n\n                view.chrom_select.html(\"\");\n                view.chrom_select.append($('<option value=\"\">Select Chrom/Contig</option>'));\n\n                for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                    var chrom = view.chrom_data[i].chrom;\n                    var chrom_option = $(\"<option>\");\n                    chrom_option.text(chrom);\n                    chrom_option.val(chrom);\n                    view.chrom_select.append(chrom_option);\n                }\n                if (result.prev_chroms) {\n                    view.chrom_select.append($(`<option value=\"previous\">Previous ${MAX_CHROMS_SELECTABLE}</option>`));\n                }\n                if (result.next_chroms) {\n                    view.chrom_select.append($(`<option value=\"next\">Next ${MAX_CHROMS_SELECTABLE}</option>`));\n                }\n                view.chrom_start_index = result.start_index;\n\n                chrom_data.resolve(result.chrom_info);\n            },\n            error: function() {\n                alert(`Could not load chroms for this dbkey: ${view.dbkey}`);\n            }\n        });\n        return chrom_data;\n    },\n\n    change_chrom: function(chrom, low, high) {\n        var view = this;\n        // If chrom data is still loading, wait for it.\n        if (!view.chrom_data) {\n            view.load_chroms_deferred.then(() => {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        }\n\n        // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n        if (!chrom || chrom === \"None\") {\n            return;\n        }\n\n        //\n        // If user is navigating to previous/next set of chroms, load new chrom set and return.\n        //\n        if (chrom === \"previous\") {\n            view.load_chroms({\n                low: this.chrom_start_index - MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n        if (chrom === \"next\") {\n            view.load_chroms({\n                low: this.chrom_start_index + MAX_CHROMS_SELECTABLE\n            });\n            return;\n        }\n\n        //\n        // User is loading a particular chrom. Look first in current set; if not in current set, load new\n        // chrom set.\n        //\n        var found = $.grep(view.chrom_data, (v, i) => v.chrom === chrom)[0];\n        if (found === undefined) {\n            // Try to load chrom and then change to chrom.\n            view.load_chroms({ chrom: chrom }, () => {\n                view.change_chrom(chrom, low, high);\n            });\n            return;\n        } else {\n            // Switching to local chrom.\n            if (chrom !== view.chrom) {\n                view.chrom = chrom;\n                view.chrom_select.val(view.chrom);\n                view.max_high = found.len - 1; // -1 because we're using 0-based indexing.\n                view.reset();\n\n                for (var i = 0, len = view.drawables.length; i < len; i++) {\n                    var drawable = view.drawables[i];\n                    if (drawable.init) {\n                        drawable.init();\n                    }\n                }\n                if (view.reference_track) {\n                    view.reference_track.init();\n                }\n            }\n\n            // Resolve low, high.\n            if (low === undefined && high === undefined) {\n                // Both are undefined, so view is whole chromosome.\n                view.low = 0;\n                view.high = view.max_high;\n            } else {\n                // Low and/or high is defined.\n                view.low = low !== undefined ? Math.max(low, 0) : 0;\n                if (high === undefined) {\n                    // Center visualization around low.\n                    // HACK: max resolution is currently 30 bases.\n                    view.low = Math.max(view.low - 15, 0);\n                    view.high = view.low + 30;\n                } else {\n                    // High is defined.\n                    view.high = Math.min(high, view.max_high);\n                }\n            }\n\n            view.request_redraw();\n        }\n    },\n\n    /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n    go_to: function(str) {\n        // Remove commas.\n        str = str.replace(/,/g, \"\");\n\n        // Replace colons and hyphens with space for easy parsing.\n        str = str.replace(/:|\\-/g, \" \");\n\n        // Parse new location.\n        var chrom_pos = str.split(/\\s+/);\n\n        var chrom = chrom_pos[0];\n        var new_low = chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined;\n        var new_high = chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined;\n\n        this.change_chrom(chrom, new_low, new_high);\n    },\n\n    move_fraction: function(fraction) {\n        var view = this;\n        var span = view.high - view.low;\n        this.move_delta(fraction * span);\n    },\n\n    move_delta: function(delta_chrom) {\n        //\n        // Update low, high.\n        //\n\n        var view = this;\n        var current_chrom_span = view.high - view.low;\n        // Check for left and right boundaries\n        if (view.low - delta_chrom < view.max_low) {\n            view.low = view.max_low;\n            view.high = view.max_low + current_chrom_span;\n        } else if (view.high - delta_chrom > view.max_high) {\n            view.high = view.max_high;\n            view.low = view.max_high - current_chrom_span;\n        } else {\n            view.high -= delta_chrom;\n            view.low -= delta_chrom;\n        }\n\n        //\n        // Redraw view.\n        //\n\n        // Redraw without requesting more data immediately.\n        view.request_redraw({ data_fetch: false });\n\n        // Set up timeout to redraw with more data when moving stops.\n        if (this.redraw_on_move_fn) {\n            clearTimeout(this.redraw_on_move_fn);\n        }\n\n        this.redraw_on_move_fn = setTimeout(() => {\n            view.request_redraw();\n        }, 200);\n\n        // Navigate.\n        var chrom = view.chrom_select.val();\n        this.trigger_navigate(chrom, view.low, view.high, true);\n    },\n\n    /**\n     * Add a drawable to the view.\n     */\n    add_drawable: function(drawable) {\n        DrawableCollection.prototype.add_drawable.call(this, drawable);\n        drawable.init();\n        this.changed();\n        this.update_intro_div();\n\n        // When drawable config changes, mark view as changed. This\n        // captures most (all?) state change that needs to be saved.\n        var self = this;\n        drawable.config.on(\"change\", () => {\n            self.changed();\n        });\n    },\n\n    add_label_track: function(label_track) {\n        label_track.view = this;\n        label_track.init();\n        this.label_tracks.push(label_track);\n    },\n\n    /**\n     * Remove drawable from the view.\n     */\n    remove_drawable: function(drawable, hide) {\n        DrawableCollection.prototype.remove_drawable.call(this, drawable);\n        if (hide) {\n            var view = this;\n            drawable.container_div.hide(0, function() {\n                $(this).remove();\n                view.update_intro_div();\n            });\n        }\n    },\n\n    reset: function() {\n        this.low = this.max_low;\n        this.high = this.max_high;\n        this.viewport_container.find(\".yaxislabel\").remove();\n    },\n\n    /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n    request_redraw: function(options, drawable) {\n        var view = this;\n\n        var // Either redrawing a single drawable or all view's drawables.\n        track_list = drawable ? [drawable] : view.drawables;\n\n        // Add/update tracks in track list to redraw list.\n        _.each(track_list, track => {\n            var track_options = _.find(view.tracks_to_be_redrawn, to => to[0] === track);\n\n            if (track_options) {\n                // Track already in list; update options.\n                track_options[1] = options;\n            } else {\n                // Track not in list yet.\n                view.tracks_to_be_redrawn.push([track, options]);\n            }\n        });\n\n        // Set up redraw if it has not been requested since last redraw.\n        if (!this.requested_redraw) {\n            requestAnimationFrame(() => {\n                view._redraw();\n            });\n            this.requested_redraw = true;\n        }\n    },\n\n    /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n    _redraw: function() {\n        // TODO: move this code to function that does location setting.\n\n        // Clear because requested redraw is being handled now.\n        this.requested_redraw = false;\n\n        var low = this.low;\n        var high = this.high;\n\n        if (low < this.max_low) {\n            low = this.max_low;\n        }\n        if (high > this.max_high) {\n            high = this.max_high;\n        }\n        var span = this.high - this.low;\n        if (this.high !== 0 && span < this.min_separation) {\n            high = low + this.min_separation;\n        }\n        this.low = Math.floor(low);\n        this.high = Math.ceil(high);\n\n        this.update_location(this.low, this.high);\n\n        // -- Drawing code --\n\n        // Resolution is a pixel density.\n        this.resolution_px_b = this.viewport_container.width() / (this.high - this.low);\n\n        // Overview\n        var left_px = this.low / (this.max_high - this.max_low) * this.overview_viewport.width() || 0;\n        var width_px = (this.high - this.low) / (this.max_high - this.max_low) * this.overview_viewport.width() || 0;\n        var min_width_px = 13;\n\n        this.overview_box\n            .css({\n                left: left_px,\n                width: Math.max(min_width_px, width_px)\n            })\n            .show();\n        if (width_px < min_width_px) {\n            this.overview_box.css(\"left\", left_px - (min_width_px - width_px) / 2);\n        }\n        if (this.overview_highlight) {\n            this.overview_highlight.css({\n                left: left_px,\n                width: width_px\n            });\n        }\n\n        // Draw data tracks.\n        _.each(this.tracks_to_be_redrawn, track_options => {\n            var track = track_options[0];\n            var options = track_options[1];\n            if (track) {\n                track._draw(options);\n            }\n        });\n        this.tracks_to_be_redrawn = [];\n\n        // Draw label tracks.\n        _.each(this.label_tracks, label_track => {\n            label_track._draw();\n        });\n    },\n\n    zoom_in: function(point, container) {\n        if (this.max_high === 0 || this.high - this.low <= this.min_separation) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span / this.zoom_factor / 2;\n        if (point) {\n            cur_center = point / this.viewport_container.width() * (this.high - this.low) + this.low;\n        }\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n\n        this.changed();\n        this.request_redraw();\n    },\n\n    zoom_out: function() {\n        if (this.max_high === 0) {\n            return;\n        }\n        var span = this.high - this.low;\n        var cur_center = span / 2 + this.low;\n        var new_half = span * this.zoom_factor / 2;\n        this.low = Math.round(cur_center - new_half);\n        this.high = Math.round(cur_center + new_half);\n        this.changed();\n        this.request_redraw();\n    },\n\n    /** Resize viewport. Use this method if header/footer content has changed in size. */\n    resize_viewport: function() {\n        this.viewport_container.height(\n            this.container.height() - this.top_container.height() - this.bottom_container.height()\n        );\n    },\n\n    /** Called when window is resized. */\n    resize_window: function() {\n        this.resize_viewport();\n        this.request_redraw();\n    },\n\n    /** Show a Drawable in the overview. */\n    set_overview: function(drawable) {\n        if (this.overview_drawable) {\n            // If drawable to be set as overview is already in overview, do nothing.\n            // Otherwise, remove overview.\n            if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                return;\n            }\n            this.overview_viewport.find(\".track\").remove();\n        }\n\n        // Set new overview.\n        var overview_drawable = drawable.copy({\n            content_div: this.overview_viewport\n        });\n\n        var view = this;\n        overview_drawable.header_div.hide();\n        overview_drawable.is_overview = true;\n        view.overview_drawable = overview_drawable;\n        this.overview_drawable.postdraw_actions = () => {\n            view.overview_highlight.show().height(view.overview_drawable.content_div.height());\n            view.overview_viewport.height(\n                view.overview_drawable.content_div.height() + view.overview_box.outerHeight()\n            );\n            view.overview_close.show();\n            view.resize_window();\n        };\n        view.overview_drawable.request_draw();\n        this.changed();\n    },\n\n    /** Close and reset overview. */\n    reset_overview: function() {\n        // Update UI.\n        $(\".tooltip\").remove();\n        this.overview_viewport.find(\".track-tile\").remove();\n        this.overview_viewport.height(this.default_overview_height);\n        this.overview_box.height(this.default_overview_height);\n        this.overview_close.hide();\n        this.overview_highlight.hide();\n        view.resize_window();\n        view.overview_drawable = null;\n    }\n});\n\n/**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\nvar TracksterTool = tools_mod.Tool.extend({\n    defaults: {\n        track: null\n    },\n\n    initialize: function(options) {\n        tools_mod.Tool.prototype.initialize.call(this, options);\n\n        // Restore tool visibility from state; default to hidden.\n        var hidden = true;\n        if (options.tool_state !== undefined && options.tool_state.hidden !== undefined) {\n            hidden = options.tool_state.hidden;\n        }\n        this.set(\"hidden\", hidden);\n\n        // FIXME: need to restore tool values from options.tool_state\n\n        // HACK: remove some inputs because Trackster does yet not work with them.\n        this.remove_inputs([\"data\", \"hidden_data\", \"conditional\"]);\n    },\n\n    state_dict: function(options) {\n        return _.extend(this.get_inputs_dict(), {\n            hidden: !this.is_visible()\n        });\n    }\n});\n\n/**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\nvar ToolParameterView = Backbone.View.extend({\n    events: {\n        \"change :input\": \"update_value\"\n    },\n\n    render: function() {\n        var param_div = this.$el.addClass(\"param-row\");\n        var param = this.model;\n\n        // Param label.\n        var label_div = $(\"<div>\")\n            .addClass(\"param-label\")\n            .text(param.get(\"label\"))\n            .appendTo(param_div);\n        // Param HTML.\n        var html_div = $(\"<div/>\")\n            .addClass(\"param-input\")\n            .html(param.get(\"html\"))\n            .appendTo(param_div);\n        // Set initial value.\n        html_div.find(\":input\").val(param.get(\"value\"));\n\n        // Add to clear floating layout.\n        $(\"<div style='clear: both;'/>\").appendTo(param_div);\n    },\n\n    update_value: function(update_event) {\n        this.model.set_value($(update_event.target).val());\n    }\n});\n\n/**\n * View for TracksterTool.\n */\nvar TracksterToolView = Backbone.View.extend({\n    initialize: function(options) {\n        this.model.on(\"change:hidden\", this.set_visible, this);\n    },\n\n    /**\n     * Render tool UI.\n     */\n    render: function() {\n        var self = this;\n        var tool = this.model;\n        var parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n        // Prevent div events from propogating to other elements.\n        parent_div\n            .bind(\"drag\", e => {\n                e.stopPropagation();\n            })\n            .click(e => {\n                e.stopPropagation();\n            })\n            .bind(\"dblclick\", e => {\n                e.stopPropagation();\n            })\n            .keydown(e => {\n                e.stopPropagation();\n            });\n\n        // Add name, inputs.\n        var name_div = $(\"<div class='tool-name'>\")\n            .appendTo(parent_div)\n            .text(tool.get(\"name\"));\n        tool.get(\"inputs\").each(param => {\n            // Render parameter.\n            var param_view = new ToolParameterView({ model: param });\n            param_view.render();\n            parent_div.append(param_view.$el);\n        });\n\n        // Highlight value for inputs for easy replacement.\n        parent_div.find(\"input\").click(function() {\n            $(this).select();\n        });\n\n        // Add buttons for running on dataset, region.\n        var run_tool_row = $(\"<div>\")\n            .addClass(\"param-row\")\n            .appendTo(parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on complete dataset\")\n            .appendTo(run_tool_row);\n        var run_on_region_button = $(\"<input type='submit'>\")\n            .attr(\"value\", \"Run on visible region\")\n            .appendTo(run_tool_row);\n        run_on_region_button.click(() => {\n            // Run tool to create new track.\n            self.run_on_region();\n        });\n        run_on_dataset_button.click(() => {\n            self.run_on_dataset();\n        });\n\n        if (tool.is_visible()) {\n            this.$el.show();\n        }\n    },\n\n    /**\n     * Show or hide tool depending on tool visibility state.\n     */\n    set_visible: function() {\n        this.$el.toggle(this.model.is_visible());\n    },\n\n    /**\n     * Update tool parameters.\n     */\n    update_params: function() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.params[i].update_value();\n        }\n    },\n\n    /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n    run_on_dataset: function() {\n        var tool = this.model;\n        this.run(\n            // URL params.\n            {\n                target_dataset_id: this.model.get(\"track\").dataset.id,\n                action: \"rerun\",\n                tool_id: tool.id\n            },\n            null,\n            track_data => {\n                Galaxy.modal.show({\n                    title: `${tool.get(\"name\")} is Running`,\n                    body: `${tool.get(\n                        \"name\"\n                    )} is running on the complete dataset. Tool outputs are in dataset's history.`,\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n            }\n        );\n    },\n\n    /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n    run_on_region: function() {\n        //\n        // Create track for tool's output immediately to provide user feedback.\n        //\n        var track = this.model.get(\"track\");\n\n        var tool = this.model;\n\n        var region = new visualization.GenomeRegion({\n            chrom: track.view.chrom,\n            start: track.view.low,\n            end: track.view.high\n        });\n\n        var url_params = {\n            target_dataset_id: track.dataset.id,\n            action: \"rerun\",\n            tool_id: tool.id,\n            regions: [region.toJSON()]\n        };\n\n        var current_track = track;\n\n        var // Set name of track to include tool name, parameters, and region used.\n        track_name = tool.get(\"name\") + current_track.tool_region_and_parameters_str(region);\n\n        var container;\n\n        // If track not in a group, create a group for it and add new track to group. If track\n        // already in group, add track to group.\n        if (current_track.container === view) {\n            // Create new group.\n            var group = new DrawableGroup(view, view, {\n                name: track.config.get_value(\"name\")\n            });\n\n            // Replace track with group.\n            var index = current_track.container.replace_drawable(current_track, group, false);\n\n            // Update HTML.\n            // FIXME: this is ugly way to replace a track with a group -- make this easier via\n            // a Drawable or DrawableCollection function.\n            group.container_div.insertBefore(current_track.view.content_div.children()[index]);\n            group.add_drawable(current_track);\n            current_track.container_div.appendTo(group.content_div);\n            container = group;\n        } else {\n            // Use current group.\n            container = current_track.container;\n        }\n\n        // Create and init new track.\n        var new_track = new current_track.constructor(view, container, {\n            name: track_name,\n            hda_ldda: \"hda\"\n        });\n        new_track.init_for_tool_data();\n        new_track.change_mode(current_track.mode);\n        new_track.set_filters_manager(current_track.filters_manager.copy(new_track));\n        new_track.update_icons();\n        container.add_drawable(new_track);\n        new_track.tiles_div.text(\"Starting job.\");\n\n        // Run tool.\n        this.run(url_params, new_track, track_data => {\n            new_track.set_dataset(new data.Dataset(track_data));\n            new_track.tiles_div.text(\"Running job.\");\n            new_track.init();\n        });\n    },\n\n    /**\n     * Run tool using a set of URL params and a success callback.\n     */\n    run: function(url_params, new_track, success_callback) {\n        // Run tool.\n        url_params.inputs = this.model.get_inputs_dict();\n        var ss_deferred = new util.ServerStateDeferred({\n            ajax_settings: {\n                url: `${Galaxy.root}api/tools`,\n                data: JSON.stringify(url_params),\n                dataType: \"json\",\n                contentType: \"application/json\",\n                type: \"POST\"\n            },\n            interval: 2000,\n            success_fn: function(response) {\n                return response !== \"pending\";\n            }\n        });\n\n        // Start with this status message.\n        //new_track.container_div.addClass(\"pending\");\n        //new_track.content_div.html(DATA_PENDING);\n\n        $.when(ss_deferred.go()).then(response => {\n            if (response === \"no converter\") {\n                // No converter available for input datasets, so cannot run tool.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_NOCONVERTER);\n            } else if (response.error) {\n                // General error.\n                new_track.container_div.addClass(\"error\");\n                new_track.content_div.text(DATA_CANNOT_RUN_TOOL + response.message);\n            } else {\n                // Job submitted and running.\n                success_callback(response);\n            }\n        });\n    }\n});\n\n/**\n * Generates scale values based on filter and feature's value for filter.\n */\nvar FilterScaler = function(filter, default_val) {\n    painters.Scaler.call(this, default_val);\n    this.filter = filter;\n};\n\nFilterScaler.prototype.gen_val = function(feature_data) {\n    // If filter is not initalized yet, return default val.\n    if (\n        this.filter.high === Number.MAX_VALUE ||\n        this.filter.low === -Number.MAX_VALUE ||\n        this.filter.low === this.filter.high\n    ) {\n        return this.default_val;\n    }\n\n    // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n    return (parseFloat(feature_data[this.filter.index]) - this.filter.low) / (this.filter.high - this.filter.low);\n};\n\n/**\n * Tiles drawn by tracks.\n */\nvar Tile = function(track, region, w_scale, canvas, data) {\n    this.track = track;\n    this.region = region;\n    this.low = region.get(\"start\");\n    this.high = region.get(\"end\");\n    this.w_scale = w_scale;\n    this.canvas = canvas;\n    // Wrap element in div for background and to provide container for tile-specific elements.\n    this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n    this.data = data;\n    this.stale = false;\n};\n\n/**\n * Perform pre-display actions.\n */\nTile.prototype.predisplay_actions = () => {};\n\nvar LineTrackTile = function(track, region, w_scale, canvas, data) {\n    Tile.call(this, track, region, w_scale, canvas, data);\n};\nLineTrackTile.prototype.predisplay_actions = () => {};\n\nvar FeatureTrackTile = function(\n    track,\n    region,\n    w_scale,\n    canvas,\n    data,\n    mode,\n    message,\n    all_slotted,\n    feature_mapper,\n    incomplete_features,\n    seq_data\n) {\n    // Attribute init.\n    Tile.call(this, track, region, w_scale, canvas, data);\n    this.mode = mode;\n    this.all_slotted = all_slotted;\n    this.feature_mapper = feature_mapper;\n    this.has_icons = false;\n    this.incomplete_features = incomplete_features;\n    // Features drawn based on data from other tiles.\n    this.other_tiles_features_drawn = {};\n    this.seq_data = seq_data;\n\n    // Add message + action icons to tile's html.\n    /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n};\nextend(FeatureTrackTile.prototype, Tile.prototype);\n\n/**\n * Sets up support for popups.\n */\nFeatureTrackTile.prototype.predisplay_actions = () => {\n    /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n};\n\n/**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\nvar Track = function(view, container, obj_dict) {\n    // For now, track's container is always view.\n    extend(obj_dict, {\n        drag_handle_class: \"draghandle\"\n    });\n    Drawable.call(this, view, container, obj_dict);\n\n    //\n    // Attribute init.\n    //\n\n    // Set or create dataset.\n    this.dataset = null;\n    if (obj_dict.dataset) {\n        // Dataset can be a Backbone model or a dict that can be used to create a model.\n        this.dataset =\n            obj_dict.dataset instanceof Backbone.Model ? obj_dict.dataset : new data.Dataset(obj_dict.dataset);\n    }\n    this.dataset_check_type = \"converted_datasets_state\";\n    this.data_url_extra_params = {};\n    this.data_query_wait = \"data_query_wait\" in obj_dict ? obj_dict.data_query_wait : DEFAULT_DATA_QUERY_WAIT;\n    // A little ugly creating data manager right now due to transition to Backbone-based objects.\n    this.data_manager =\n        \"data_manager\" in obj_dict\n            ? obj_dict.data_manager\n            : new visualization.GenomeDataManager({\n                  dataset: this.dataset,\n                  // HACK: simulate 'genome' attributes from view for now.\n                  // View should eventually use Genome object.\n                  genome: new visualization.Genome({\n                      key: view.dbkey,\n                      chroms_info: {\n                          chrom_info: view.chrom_data\n                      }\n                  }),\n                  data_mode_compatible: this.data_and_mode_compatible,\n                  can_subset: this.can_subset\n              });\n\n    // Height attributes: min height, max height, and visible height.\n    this.min_height_px = 16;\n    this.max_height_px = 800;\n    this.visible_height_px = this.config.get_value(\"height\");\n\n    //\n    // Create content div, which is where track is displayed, and add to container if available.\n    //\n    this.content_div = $(\"<div class='track-content'>\").appendTo(this.container_div);\n    if (this.container) {\n        this.container.content_div.append(this.container_div);\n        if (!(\"resize\" in obj_dict) || obj_dict.resize) {\n            this.add_resize_handle();\n        }\n    }\n};\n\nextend(Track.prototype, Drawable.prototype, {\n    action_icons_def: [\n        // Change track mode.\n        {\n            name: \"mode_icon\",\n            title: _l(\"Set display mode\"),\n            css_class: \"chevron-expand\",\n            on_click_fn: function() {}\n        },\n        // Hide/show content.\n        Drawable.prototype.action_icons_def[0],\n        // Set track as overview.\n        {\n            name: \"overview_icon\",\n            title: _l(\"Set as overview\"),\n            css_class: \"application-dock-270\",\n            on_click_fn: function(track) {\n                track.view.set_overview(track);\n            }\n        },\n        // Edit config.\n        Drawable.prototype.action_icons_def[1],\n        // Toggle track filters.\n        {\n            name: \"filters_icon\",\n            title: _l(\"Filters\"),\n            css_class: \"ui-slider-050\",\n            on_click_fn: function(drawable) {\n                // TODO: update Tooltip text.\n                if (drawable.filters_manager.visible()) {\n                    drawable.filters_manager.clear_filters();\n                } else {\n                    drawable.filters_manager.init_filters();\n                }\n                drawable.filters_manager.toggle();\n            }\n        },\n        // Toggle track tool.\n        {\n            name: \"tools_icon\",\n            title: _l(\"Tool\"),\n            css_class: \"hammer\",\n            on_click_fn: function(track) {\n                // TODO: update Tooltip text.\n\n                track.tool.toggle();\n\n                // Update track name.\n                if (track.tool.is_visible()) {\n                    track.set_name(track.config.get_value(\"name\") + track.tool_region_and_parameters_str());\n                } else {\n                    track.revert_name();\n                }\n                // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                $(\".tooltip\").remove();\n            }\n        },\n        // Go to parameter exploration visualization.\n        {\n            name: \"param_space_viz_icon\",\n            title: _l(\"Tool parameter space visualization\"),\n            css_class: \"arrow-split\",\n            on_click_fn: function(track) {\n                var html = `<strong>Tool</strong>:${track.tool.get(\n                    \"name\"\n                )}<br/><strong>Dataset</strong>:${track.config.get_value(\n                    \"name\"\n                )}<br/><strong>Region(s)</strong>: <select name=\"regions\"><option value=\"cur\">current viewing area</option><option value=\"bookmarks\">bookmarks</option><option value=\"both\">current viewing area and bookmarks</option></select>`;\n\n                var cancel_fn = () => {\n                    Galaxy.modal.hide();\n                    $(window).unbind(\"keypress.check_enter_esc\");\n                };\n\n                var ok_fn = () => {\n                    var regions_to_use = $('select[name=\"regions\"] option:selected').val(),\n                        regions,\n                        view_region = new visualization.GenomeRegion({\n                            chrom: view.chrom,\n                            start: view.low,\n                            end: view.high\n                        }),\n                        bookmarked_regions = _.map(\n                            $(\".bookmark\"),\n                            elt =>\n                                new visualization.GenomeRegion({\n                                    from_str: $(elt)\n                                        .children(\".position\")\n                                        .text()\n                                })\n                        );\n\n                    // Get regions for visualization.\n                    if (regions_to_use === \"cur\") {\n                        // Use only current region.\n                        regions = [view_region];\n                    } else if (regions_to_use === \"bookmarks\") {\n                        // Use only bookmarks.\n                        regions = bookmarked_regions;\n                    } else {\n                        // Use both current region and bookmarks.\n                        regions = [view_region].concat(bookmarked_regions);\n                    }\n\n                    Galaxy.modal.hide();\n\n                    // Go to visualization.\n                    window.location.href = `${Galaxy.root}visualization/sweepster?${$.param({\n                        dataset_id: track.dataset.id,\n                        hda_ldda: track.dataset.get(\"hda_ldda\"),\n                        regions: JSON.stringify(new Backbone.Collection(regions).toJSON())\n                    })}`;\n                };\n\n                var check_enter_esc = e => {\n                    if ((e.keyCode || e.which) === 27) {\n                        // Escape key\n                        cancel_fn();\n                    } else if ((e.keyCode || e.which) === 13) {\n                        // Enter key\n                        ok_fn();\n                    }\n                };\n\n                // show dialog\n                Galaxy.modal.show({\n                    title: \"Visualize tool parameter space and output from different parameter settings?\",\n                    body: html,\n                    buttons: { No: cancel_fn, Yes: ok_fn }\n                });\n            }\n        },\n        // Remove track.\n        Drawable.prototype.action_icons_def[2]\n    ],\n\n    can_draw: function() {\n        return this.dataset && Drawable.prototype.can_draw.call(this);\n    },\n\n    build_container_div: function() {\n        return $(\"<div/>\")\n            .addClass(\"track\")\n            .attr(\"id\", `track_${this.id}`);\n    },\n\n    /**\n     * Set track's dataset.\n     */\n    set_dataset: function(dataset) {\n        this.dataset = dataset;\n        this.data_manager.set(\"dataset\", dataset);\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Add resizing handle to drawable's container_div.\n     */\n    add_resize_handle: function() {\n        var track = this;\n        var in_handle = false;\n        var in_drag = false;\n        var drag_control = $(\"<div class='track-resize'>\");\n        // Control shows on hover over track, stays while dragging\n        $(track.container_div).hover(\n            () => {\n                if (track.config.get_value(\"content_visible\")) {\n                    in_handle = true;\n                    drag_control.show();\n                }\n            },\n            () => {\n                in_handle = false;\n                if (!in_drag) {\n                    drag_control.hide();\n                }\n            }\n        );\n        // Update height and force redraw of current view while dragging,\n        // clear cache to force redraw of other tiles.\n        drag_control\n            .hide()\n            .bind(\"dragstart\", (e, d) => {\n                in_drag = true;\n                d.original_height = $(track.content_div).height();\n            })\n            .bind(\"drag\", (e, d) => {\n                var new_height = Math.min(\n                    Math.max(d.original_height + d.deltaY, track.min_height_px),\n                    track.max_height_px\n                );\n                $(track.tiles_div).css(\"height\", new_height);\n                track.visible_height_px = track.max_height_px === new_height ? 0 : new_height;\n                track.on_resize();\n            })\n            .bind(\"dragend\", (e, d) => {\n                track.tile_cache.clear();\n                in_drag = false;\n                if (!in_handle) {\n                    drag_control.hide();\n                }\n                track.config.set_value(\"height\", track.visible_height_px);\n                track.changed();\n            })\n            .appendTo(track.container_div);\n    },\n\n    /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n    hide_contents: function() {\n        // Hide tiles.\n        this.tiles_div.hide();\n        // Hide any y axis labels (common to several track types)\n        this.container_div.find(\".yaxislabel, .track-resize\").hide();\n    },\n\n    show_contents: function() {\n        // Show the contents div and labels (if present)\n        this.tiles_div.show();\n        this.container_div.find(\".yaxislabel, .track-resize\").show();\n        // Request a redraw of the content\n        this.request_draw();\n    },\n\n    /**\n     * Returns track type.\n     */\n    get_type: function() {\n        // Order is important: start with most-specific classes and go up the track hierarchy.\n        if (this instanceof LabelTrack) {\n            return \"LabelTrack\";\n        } else if (this instanceof ReferenceTrack) {\n            return \"ReferenceTrack\";\n        } else if (this instanceof LineTrack) {\n            return \"LineTrack\";\n        } else if (this instanceof ReadTrack) {\n            return \"ReadTrack\";\n        } else if (this instanceof VariantTrack) {\n            return \"VariantTrack\";\n        } else if (this instanceof CompositeTrack) {\n            return \"CompositeTrack\";\n        } else if (this instanceof FeatureTrack) {\n            return \"FeatureTrack\";\n        }\n        return \"\";\n    },\n\n    /**\n     * Remove visualization content and display message.\n     */\n    show_message: function(msg_html) {\n        this.tiles_div.remove();\n        return $(\"<span/>\")\n            .addClass(\"message\")\n            .html(msg_html)\n            .appendTo(this.content_div);\n    },\n\n    /**\n     * Initialize and draw the track.\n     */\n    init: function(retry) {\n        // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n        // used in this function to determine what action(s) to take.\n\n        var track = this;\n        track.enabled = false;\n        track.tile_cache.clear();\n        track.data_manager.clear();\n        /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n        // Remove old track content (e.g. tiles, messages).\n        track.content_div.children().remove();\n        track.container_div.removeClass(\"nodata error pending\");\n\n        track.tiles_div = $(\"<div/>\")\n            .addClass(\"tiles\")\n            .appendTo(track.content_div);\n\n        //\n        // Tracks with no dataset id are handled differently.\n        // FIXME: is this really necessary?\n        //\n        if (!track.dataset.id) {\n            return;\n        }\n\n        // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n        // about track status.\n        var init_deferred = $.Deferred();\n\n        var params = {\n            hda_ldda: track.dataset.get(\"hda_ldda\"),\n            data_type: this.dataset_check_type,\n            chrom: track.view.chrom,\n            retry: retry\n        };\n\n        $.getJSON(this.dataset.url(), params, result => {\n            if (!result || result === \"error\" || result.kind === \"error\") {\n                // Dataset is in error state.\n                track.container_div.addClass(\"error\");\n                var msg_elt = track.show_message(DATA_ERROR);\n                if (result.message) {\n                    // Add links to (a) show error and (b) try again.\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"View error\")\n                            .click(() => {\n                                Galaxy.modal.show({\n                                    title: _l(\"Trackster Error\"),\n                                    body: `<pre>${result.message}</pre>`,\n                                    buttons: {\n                                        Close: function() {\n                                            Galaxy.modal.hide();\n                                        }\n                                    }\n                                });\n                            })\n                    );\n                    msg_elt.append($(\"<span/>\").text(\" \"));\n                    msg_elt.append(\n                        $(\"<a href='javascript:void(0);'></a>\")\n                            .text(\"Try again\")\n                            .click(() => {\n                                track.init(true);\n                            })\n                    );\n                }\n            } else if (result === \"no converter\") {\n                track.container_div.addClass(\"error\");\n                track.show_message(DATA_NOCONVERTER);\n            } else if (\n                result === \"no data\" ||\n                (result.data !== undefined && (result.data === null || result.data.length === 0))\n            ) {\n                track.container_div.addClass(\"nodata\");\n                track.show_message(DATA_NONE);\n            } else if (result === \"pending\") {\n                track.container_div.addClass(\"pending\");\n                track.show_message(DATA_PENDING);\n                //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                setTimeout(() => {\n                    track.init();\n                }, track.data_query_wait);\n            } else if (result === \"data\" || result.status === \"data\") {\n                if (result.valid_chroms) {\n                    track.valid_chroms = result.valid_chroms;\n                    track.update_icons();\n                }\n                track.tiles_div.text(DATA_OK);\n                if (track.view.chrom) {\n                    track.tiles_div.text(\"\");\n                    track.tiles_div.css(\"height\", `${track.visible_height_px}px`);\n                    track.enabled = true;\n                    // predraw_init may be asynchronous, wait for it and then draw\n                    $.when.apply($, track.predraw_init()).done(() => {\n                        init_deferred.resolve();\n                        track.container_div.removeClass(\"nodata error pending\");\n                        track.request_draw();\n                    });\n                } else {\n                    init_deferred.resolve();\n                }\n            }\n        });\n\n        this.update_icons();\n        return init_deferred;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n\n                // Tracks may not have stat data either because there is no data or data is not yet ready.\n                if (data && data.min !== undefined && data.max !== undefined) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min;\n\n                    var max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(Math.min(0, Math.max(min_value, data.mean - 2 * data.sd)));\n                    max_value = Math.ceil(Math.max(0, Math.min(max_value, data.mean + 2 * data.sd)));\n                    // Update config, prefs\n                    track.config.set_default_value(\"min_value\", min_value);\n                    track.config.set_default_value(\"max_value\", max_value);\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Returns all drawables in this drawable.\n     */\n    get_drawables: function() {\n        return this;\n    }\n});\n\nvar TiledTrack = function(view, container, obj_dict) {\n    Track.call(this, view, container, obj_dict);\n\n    var track = this;\n\n    // Make track moveable.\n    moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n    // Attribute init.\n    this.filters_manager = new filters_mod.FiltersManager(this, \"filters\" in obj_dict ? obj_dict.filters : null);\n    // HACK: set filters manager for data manager.\n    // FIXME: prolly need function to set filters and update data_manager reference.\n    this.data_manager.set(\"filters_manager\", this.filters_manager);\n    this.filters_available = false;\n    this.tool = obj_dict.tool\n        ? new TracksterTool(\n              _.extend(obj_dict.tool, {\n                  track: this,\n                  tool_state: obj_dict.tool_state\n              })\n          )\n        : null;\n    this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n    this.left_offset = 0;\n\n    if (this.header_div) {\n        //\n        // Setup filters.\n        //\n        this.set_filters_manager(this.filters_manager);\n\n        //\n        // Create dynamic tool view.\n        //\n        if (this.tool) {\n            var tool_view = new TracksterToolView({ model: this.tool });\n            tool_view.render();\n            this.dynamic_tool_div = tool_view.$el;\n            this.header_div.after(this.dynamic_tool_div);\n        }\n    }\n\n    // Add tiles_div, overlay_div to content_div.\n    this.tiles_div = $(\"<div/>\")\n        .addClass(\"tiles\")\n        .appendTo(this.content_div);\n    if (!this.config.get_value(\"content_visible\")) {\n        this.tiles_div.hide();\n    }\n    this.overlay_div = $(\"<div/>\")\n        .addClass(\"overlay\")\n        .appendTo(this.content_div);\n\n    if (obj_dict.mode) {\n        this.change_mode(obj_dict.mode);\n    }\n};\nextend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n    action_icons_def: Track.prototype.action_icons_def.concat([\n        // Show more rows when all features are not slotted.\n        {\n            name: \"show_more_rows_icon\",\n            title: \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n            css_class: \"exclamation\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.slotters[track.view.resolution_px_b].max_rows *= 2;\n                track.request_draw({ clear_tile_cache: true });\n            },\n            hide: true\n        }\n    ]),\n\n    /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n    copy: function(container) {\n        // Create copy.\n        var obj_dict = this.to_dict();\n        extend(obj_dict, {\n            data_manager: this.data_manager\n        });\n        var new_track = new this.constructor(this.view, container, obj_dict);\n        // Misc. init and return.\n        new_track.change_mode(this.mode);\n        new_track.enabled = this.enabled;\n        return new_track;\n    },\n\n    /**\n     * Set filters manager + HTML elements.\n     */\n    set_filters_manager: function(filters_manager) {\n        this.filters_manager = filters_manager;\n        this.header_div.after(this.filters_manager.parent_div);\n    },\n\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: function() {\n        return {\n            track_type: this.get_type(),\n            dataset: {\n                id: this.dataset.id,\n                hda_ldda: this.dataset.get(\"hda_ldda\")\n            },\n            prefs: this.config.to_key_value_dict(),\n            mode: this.mode,\n            filters: this.filters_manager.to_dict(),\n            tool_state: this.tool ? this.tool.state_dict() : {}\n        };\n    },\n\n    /**\n     * Set track bounds for current chromosome.\n     */\n    set_min_max: function() {\n        var track = this;\n\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n                if (\n                    isNaN(parseFloat(track.config.get_value(\"min_value\"))) ||\n                    isNaN(parseFloat(track.config.get_value(\"max_value\")))\n                ) {\n                    // Compute default minimum and maximum values\n                    var min_value = data.min;\n\n                    var max_value = data.max;\n                    // If mean and sd are present, use them to compute a ~95% window\n                    // but only if it would shrink the range on one side\n                    min_value = Math.floor(Math.min(0, Math.max(min_value, data.mean - 2 * data.sd)));\n                    max_value = Math.ceil(Math.max(0, Math.min(max_value, data.mean + 2 * data.sd)));\n                    // Update the prefs\n                    track.config.set_value(\"min_value\", min_value);\n                    track.config.set_value(\"max_value\", max_value);\n                }\n            }\n        );\n    },\n\n    /**\n     * Change track's mode.\n     */\n    change_mode: function(new_mode) {\n        var track = this;\n        // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n        track.mode = new_mode;\n        track.config.set_value(\"mode\", new_mode);\n        // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n        // data manager would work if Auto data were checked for compatibility when a specific\n        // mode is chosen.\n        if (new_mode === \"Auto\") {\n            this.data_manager.clear();\n        }\n        track.request_draw({ clear_tile_cache: true });\n        this.action_icons.mode_icon.attr(\"title\", `Set display mode (now: ${track.mode})`);\n        return track;\n    },\n\n    /**\n     * Update track's buttons.\n     */\n    update_icons: function() {\n        var track = this;\n\n        //\n        // Show/hide filter icon.\n        //\n        track.action_icons.filters_icon.toggle(track.filters_available);\n\n        //\n        // Show/hide tool icons.\n        //\n        track.action_icons.tools_icon.toggle(track.tool !== null);\n        track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n    },\n\n    /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n    _gen_tile_cache_key: function(w_scale, tile_region) {\n        return `${w_scale}_${tile_region}`;\n    },\n\n    /**\n     * Request that track be drawn.\n     */\n    request_draw: function(options) {\n        if (options && options.clear_tile_cache) {\n            this.tile_cache.clear();\n        }\n        this.view.request_redraw(options, this);\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    before_draw: function() {\n        // Clear because this is set when drawing.\n        this.max_height_px = 0;\n    },\n\n    /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n    _draw: function(options) {\n        if (!this.can_draw()) {\n            return;\n        }\n\n        var clear_after = options && options.clear_after;\n        var low = this.view.low;\n        var high = this.view.high;\n        var range = high - low;\n        var width = this.view.container.width();\n        var w_scale = this.view.resolution_px_b;\n        var resolution = 1 / w_scale;\n\n        // For overview, adjust high, low, resolution, and w_scale.\n        if (this.is_overview) {\n            low = this.view.max_low;\n            high = this.view.max_high;\n            w_scale = width / (view.max_high - view.max_low);\n            resolution = 1 / w_scale;\n        }\n\n        this.before_draw();\n\n        //\n        // Method for moving and/or removing tiles:\n        // (a) mark all elements for removal using class 'remove'\n        // (b) during tile drawing/placement, remove class for elements that are moved;\n        //     this occurs in show_tile()\n        // (c) after drawing tiles, remove elements still marked for removal\n        //     (i.e. that still have class 'remove').\n        //\n\n        // Step (a) for (re)moving tiles.\n        this.tiles_div.children().addClass(\"remove\");\n\n        var // Tile width in bases.\n        tile_width = Math.floor(TILE_SIZE * resolution);\n\n        var // Index of first tile that overlaps visible region.\n        tile_index = Math.floor(low / tile_width);\n\n        var tile_region;\n        var tile_promise;\n        var tile_promises = [];\n        var tiles = [];\n        // Draw tiles.\n        while (tile_index * tile_width < high) {\n            // Get tile region.\n            tile_region = new visualization.GenomeRegion({\n                chrom: this.view.chrom,\n                start: tile_index * tile_width,\n                // Tile high cannot be larger than view.max_high, which the chromosome length.\n                end: Math.min((tile_index + 1) * tile_width, this.view.max_high)\n            });\n            tile_promise = this.draw_helper(tile_region, w_scale, options);\n            tile_promises.push(tile_promise);\n            $.when(tile_promise).then(tile => {\n                tiles.push(tile);\n            });\n\n            // Go to next tile.\n            tile_index += 1;\n        }\n\n        // Step (c) for (re)moving tiles when clear_after is false.\n        if (!clear_after) {\n            this.tiles_div\n                .children(\".remove\")\n                .removeClass(\"remove\")\n                .remove();\n        }\n\n        // When all tiles are drawn, call post-draw actions.\n        var track = this;\n        $.when.apply($, tile_promises).then(() => {\n            // Step (c) for (re)moving tiles when clear_after is true:\n            track.tiles_div.children(\".remove\").remove();\n\n            // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n            // (a) ReferenceTrack without sufficient resolution;\n            // (b) data_fetch = false.\n            tiles = _.filter(tiles, t => t !== null);\n            if (tiles.length !== 0) {\n                track.postdraw_actions(tiles, width, w_scale, clear_after);\n            }\n        });\n    },\n\n    /**\n     * Add a maximum/minimum label to track.\n     */\n    _add_yaxis_label: function(type, on_change) {\n        var track = this;\n        var css_class = type === \"max\" ? \"top\" : \"bottom\";\n        var text = type === \"max\" ? \"max\" : \"min\";\n        var pref_name = type === \"max\" ? \"max_value\" : \"min_value\";\n        var label = this.container_div.find(`.yaxislabel.${css_class}`);\n        var value = round(track.config.get_value(pref_name), 1);\n\n        // Default action for on_change is to redraw track.\n        on_change =\n            on_change ||\n            (() => {\n                track.request_draw({ clear_tile_cache: true });\n            });\n\n        if (label.length !== 0) {\n            // Label already exists, so update value.\n            label.text(value);\n        } else {\n            // Add label.\n            label = $(\"<div/>\")\n                .text(value)\n                .make_text_editable({\n                    num_cols: 12,\n                    on_finish: function(new_val) {\n                        $(\".tooltip\").remove();\n                        track.config.set_value(pref_name, round(new_val, 1));\n                        on_change();\n                    },\n                    help_text: `Set ${text} value`\n                })\n                .addClass(`yaxislabel ${css_class}`)\n                .css(\"color\", this.config.get_value(\"label_color\"));\n            this.container_div.prepend(label);\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        var line_track_tiles = _.filter(tiles, tile => tile instanceof LineTrackTile);\n\n        //\n        // Take different actions depending on whether there are LineTrack/Coverage tiles.\n        //\n\n        if (line_track_tiles.length > 0) {\n            // -- Drawing in Coverage mode. --\n\n            // Clear because this is set when drawing.\n            this.max_height_px = 0;\n            var track = this;\n            _.each(tiles, tile => {\n                if (!(tile instanceof LineTrackTile)) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.region, w_scale, {\n                        force: true,\n                        mode: \"Coverage\"\n                    });\n                }\n            });\n\n            track._add_yaxis_label(\"max\");\n        } else {\n            // -- Drawing in non-Coverage mode. --\n\n            // Remove Y-axis labels because there are no line track tiles.\n            this.container_div.find(\".yaxislabel\").remove();\n\n            //\n            // If some tiles have icons, set padding of tiles without icons so features and rows align.\n            //\n            var icons_present = _.find(tiles, tile => tile.has_icons);\n\n            if (icons_present) {\n                _.each(tiles, tile => {\n                    if (!tile.has_icons) {\n                        // Need to align with other tile(s) that have icons.\n                        tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                    }\n                });\n            }\n        }\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        return this.mode;\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(display_mode) {\n        // FIXME: needs to be implemented.\n    },\n\n    /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n    _get_drawables: function() {\n        return [this];\n    },\n\n    /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n    draw_helper: function(region, w_scale, options) {\n        // Init options if necessary to avoid having to check if options defined.\n        if (!options) {\n            options = {};\n        }\n\n        var force = options.force;\n        var mode = options.mode || this.mode;\n        var resolution = 1 / w_scale;\n\n        var // Useful vars.\n        track = this;\n\n        var drawables = this._get_drawables();\n        var key = this._gen_tile_cache_key(w_scale, region);\n\n        var is_tile = o => o && \"track\" in o;\n\n        // Check tile cache, if found show existing tile in correct position\n        var tile = force ? undefined : track.tile_cache.get_elt(key);\n        if (tile) {\n            if (is_tile(tile)) {\n                track.show_tile(tile, w_scale);\n            }\n            return tile;\n        }\n\n        // If not fetching data, nothing more to do because data is needed to draw tile.\n        if (options.data_fetch === false) {\n            return null;\n        }\n\n        // Function that returns data/Deferreds needed to draw tile.\n        var get_tile_data = () => {\n            // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n            var data_mode = _.find(CONTINUOUS_DATA_MODES, m => m === mode) ? \"Coverage\" : mode;\n\n            // Map drawable object to data needed for drawing.\n            var tile_data = _.map(drawables, (\n                d // Get the track data/promise.\n            ) => d.data_manager.get_data(region, data_mode, resolution, track.data_url_extra_params));\n\n            // Get reference data/promise.\n            if (view.reference_track) {\n                tile_data.push(\n                    view.reference_track.data_manager.get_data(\n                        region,\n                        mode,\n                        resolution,\n                        view.reference_track.data_url_extra_params\n                    )\n                );\n            }\n\n            return tile_data;\n        };\n\n        //\n        // When data is available, draw tile.\n        //\n        var tile_drawn = $.Deferred();\n        track.tile_cache.set_elt(key, tile_drawn);\n        $.when.apply($, get_tile_data()).then(() => {\n            var tile_data = get_tile_data();\n            var tracks_data = tile_data;\n            var seq_data;\n\n            // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n            // that cannot be subsetted. This may occur if the superset has a message. If there is a\n            // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n            // GenomeDataManager in visualization module.\n            if (_.find(tile_data, d => util.is_deferred(d))) {\n                track.tile_cache.set_elt(key, undefined);\n                $.when(track.draw_helper(region, w_scale, options)).then(tile => {\n                    tile_drawn.resolve(tile);\n                });\n                return;\n            }\n\n            // If sequence data is available, subset to get only data in region.\n            if (view.reference_track) {\n                seq_data = view.reference_track.data_manager.subset_entry(tile_data.pop(), region);\n            }\n\n            // Get drawing modes, heights for all tracks.\n            var drawing_modes = [];\n\n            var drawing_heights = [];\n\n            _.each(drawables, (d, i) => {\n                var mode = d.mode;\n                var data = tracks_data[i];\n                if (mode === \"Auto\") {\n                    mode = d.get_mode(data);\n                    d.update_auto_mode(mode);\n                }\n                drawing_modes.push(mode);\n                drawing_heights.push(d.get_canvas_height(data, mode, w_scale, width));\n            });\n\n            var canvas = track.view.canvas_manager.new_canvas();\n            var tile_low = region.get(\"start\");\n            var tile_high = region.get(\"end\");\n            var all_data_index = 0;\n\n            var width = Math.ceil((tile_high - tile_low) * w_scale) + track.left_offset;\n\n            var height = _.max(drawing_heights);\n            var tile;\n\n            //\n            // Draw all tracks on tile.\n            //\n            canvas.width = width;\n            // Height is specified in options or is the height found above.\n            canvas.height = options.height || height;\n            var ctx = canvas.getContext(\"2d\");\n            ctx.translate(track.left_offset, 0);\n            if (drawables.length > 1) {\n                ctx.globalAlpha = 0.5;\n                ctx.globalCompositeOperation = \"source-over\";\n            }\n            _.each(drawables, (d, i) => {\n                tile = d.draw_tile(tracks_data[i], ctx, drawing_modes[i], region, w_scale, seq_data);\n            });\n\n            // Don't cache, show if no tile.\n            if (tile !== undefined) {\n                track.tile_cache.set_elt(key, tile);\n                track.show_tile(tile, w_scale);\n            }\n\n            tile_drawn.resolve(tile);\n        });\n\n        return tile_drawn;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        return this.visible_height_px;\n    },\n\n    /**\n     * Draw line (bigwig) data onto tile.\n     */\n    _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n        // Set min/max if they are not already set.\n        // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n        // standardize this.\n        if ([undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1) {\n            this.config.set_value(\"min_value\", 0);\n        }\n        if ([undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !== -1) {\n            this.config.set_value(\"max_value\", _.max(_.map(result.data, d => d[1])) || 0);\n        }\n\n        var canvas = ctx.canvas;\n\n        var painter = new painters.LinePainter(\n            result.data,\n            region.get(\"start\"),\n            region.get(\"end\"),\n            this.config.to_key_value_dict(),\n            mode\n        );\n\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new LineTrackTile(this, region, w_scale, canvas, result.data);\n    },\n\n    /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n    /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n    show_tile: function(tile, w_scale) {\n        var track = this;\n        var tile_element = tile.html_elt;\n\n        // -- Show/move tile element. --\n\n        tile.predisplay_actions();\n\n        // Position tile element based on current viewport.\n        var left = Math.round((tile.low - (this.is_overview ? this.view.max_low : this.view.low)) * w_scale);\n        if (this.left_offset) {\n            left -= this.left_offset;\n        }\n        tile_element.css(\"left\", left);\n\n        if (tile_element.hasClass(\"remove\")) {\n            // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n            // for removing tiles.\n            tile_element.removeClass(\"remove\");\n        } else {\n            // Showing new tile.\n            this.tiles_div.append(tile_element);\n        }\n\n        // -- Update track, tile heights based on new tile. --\n\n        tile_element.css(\"height\", \"auto\");\n\n        // Update max height based on current tile's height.\n        // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n        // -2 to get the correct height.\n        this.max_height_px = Math.max(this.max_height_px, tile_element.height() - 2);\n\n        // Update height for all tiles based on max height.\n        tile_element\n            .parent()\n            .children()\n            .css(\"height\", `${this.max_height_px}px`);\n\n        // Update track height based on max height and visible height.\n        var track_height = this.max_height_px;\n        if (this.visible_height_px !== 0) {\n            track_height = Math.min(this.max_height_px, this.visible_height_px);\n        }\n        this.tiles_div.css(\"height\", `${track_height}px`);\n    },\n\n    /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n    tool_region_and_parameters_str: function(region) {\n        var track = this;\n        var region_str = region !== undefined ? region.toString() : \"all\";\n        var param_str = _.values(track.tool.get_inputs_dict()).join(\", \");\n        return ` - region=[${region_str}], parameters=[${param_str}]`;\n    },\n\n    /**\n     * Returns true if data is compatible with a given mode.\n     */\n    data_and_mode_compatible: function(data, mode) {\n        // Only handle modes that user can set.\n        if (mode === \"Auto\") {\n            return true;\n        } else if (mode === \"Coverage\") {\n            // Histogram mode requires bigwig data.\n            return data.dataset_type === \"bigwig\";\n        } else if (data.dataset_type === \"bigwig\" || data.extra_info === \"no_detail\") {\n            // All other modes--Dense, Squish, Pack--require data + details.\n            return false;\n        } else {\n            return true;\n        }\n    },\n\n    /**\n     * Returns true if entry can be subsetted.\n     */\n    can_subset: function(entry) {\n        // Do not subset entries with a message or data with no detail.\n        if (entry.message || entry.extra_info === \"no_detail\") {\n            return false;\n        } else if (entry.dataset_type === \"bigwig\") {\n            // Subset only if data is single-bp resolution.\n            return entry.data[1][0] - entry.data[0][0] === 1;\n        }\n\n        return true;\n    },\n\n    /**\n     * Set up track to receive tool data.\n     */\n    init_for_tool_data: function() {\n        // Set up track to fetch raw data rather than converted data.\n        this.data_manager.set(\"data_type\", \"raw_data\");\n        this.data_query_wait = 1000;\n        this.dataset_check_type = \"state\";\n\n        // FIXME: this is optional and is disabled for now because it creates\n        // additional converter jobs without a clear benefit because indexing\n        // such a small dataset provides little benefit.\n        //\n        // Set up one-time, post-draw to clear tool execution settings.\n        //\n        /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n    }\n});\n\nvar LabelTrack = function(view, container) {\n    Track.call(this, view, container, {\n        resize: false,\n        header: false\n    });\n    this.container_div.addClass(\"label-track\");\n};\nextend(LabelTrack.prototype, Track.prototype, {\n    init: function() {\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    _draw: function(options) {\n        var view = this.view;\n        var range = view.high - view.low;\n\n        var tickDistance = Math.floor(Math.pow(10, Math.floor(Math.log(range) / Math.log(10))));\n\n        var position = Math.floor(view.low / tickDistance) * tickDistance;\n        var width = this.view.container.width();\n        var new_div = $(\"<div/>\").addClass(\"label-container\");\n        while (position < view.high) {\n            var screenPosition = Math.floor((position - view.low) / range * width);\n            new_div.append(\n                $(\"<div/>\")\n                    .addClass(\"pos-label\")\n                    .text(util.commatize(position))\n                    .css({\n                        left: screenPosition\n                    })\n            );\n            position += tickDistance;\n        }\n        this.content_div.children(\":first\").remove();\n        this.content_div.append(new_div);\n    }\n});\n\n// FIXME: Composite tracks have code for showing composite tracks with line tracks and\n// composite tracks with line + feature tracks. It's probably best if different classes\n// are created for each type of composite track.\n\n/**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\nvar CompositeTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n\n    // Init drawables; each drawable is a copy so that config/preferences\n    // are independent of each other. Also init left offset.\n    this.drawables = [];\n    if (\"drawables\" in obj_dict) {\n        var drawable;\n        for (var i = 0; i < obj_dict.drawables.length; i++) {\n            drawable = obj_dict.drawables[i];\n            this.drawables[i] = object_from_template(drawable, view, null);\n\n            // Track's left offset is the max of all tracks.\n            if (drawable.left_offset > this.left_offset) {\n                this.left_offset = drawable.left_offset;\n            }\n        }\n        this.enabled = true;\n    }\n\n    // Set all feature tracks to use Coverage mode.\n    _.each(this.drawables, d => {\n        if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n            d.change_mode(\"Coverage\");\n        }\n    });\n\n    this.update_icons();\n\n    // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n    // that for object type.\n    this.obj_type = \"CompositeTrack\";\n};\n\nextend(CompositeTrack.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    action_icons_def: [\n        // Create composite track from group's tracks.\n        {\n            name: \"composite_icon\",\n            title: _l(\"Show individual tracks\"),\n            css_class: \"layers-stack\",\n            on_click_fn: function(track) {\n                $(\".tooltip\").remove();\n                track.show_group();\n            }\n        }\n    ].concat(TiledTrack.prototype.action_icons_def),\n\n    // HACK: CompositeTrack should inherit from DrawableCollection as well.\n    /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n    to_dict: DrawableCollection.prototype.to_dict,\n\n    add_drawable: DrawableCollection.prototype.add_drawable,\n\n    unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Action to take during resize.\n     */\n    on_resize: function() {\n        // Propogate visible height to other tracks.\n        var visible_height = this.visible_height_px;\n        _.each(this.drawables, d => {\n            d.visible_height_px = visible_height;\n        });\n        Track.prototype.on_resize.call(this);\n    },\n\n    /**\n     * Change mode for all tracks.\n     */\n    change_mode: function(new_mode) {\n        TiledTrack.prototype.change_mode.call(this, new_mode);\n        for (var i = 0; i < this.drawables.length; i++) {\n            this.drawables[i].change_mode(new_mode);\n        }\n    },\n\n    /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n    init: function() {\n        // Init components.\n        var init_deferreds = [];\n        for (var i = 0; i < this.drawables.length; i++) {\n            init_deferreds.push(this.drawables[i].init());\n        }\n\n        // Draw composite when all tracks available.\n        var track = this;\n        $.when.apply($, init_deferreds).then(() => {\n            track.enabled = true;\n            track.request_draw();\n        });\n    },\n\n    update_icons: function() {\n        // For now, hide filters and tool.\n        this.action_icons.filters_icon.hide();\n        this.action_icons.tools_icon.hide();\n        this.action_icons.param_space_viz_icon.hide();\n    },\n\n    can_draw: Drawable.prototype.can_draw,\n\n    _get_drawables: function() {\n        return this.drawables;\n    },\n\n    /**\n     * Replace this track with group that includes individual tracks.\n     */\n    show_group: function() {\n        // Create group with individual tracks.\n        var group = new DrawableGroup(this.view, this.container, {\n            name: this.config.get_value(\"name\")\n        });\n\n        var track;\n        for (var i = 0; i < this.drawables.length; i++) {\n            track = this.drawables[i];\n            track.update_icons();\n            group.add_drawable(track);\n            track.container = group;\n            group.content_div.append(track.container_div);\n        }\n\n        // Replace track with group.\n        var index = this.container.replace_drawable(this, group, true);\n        group.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions taken before drawing.\n     */\n    before_draw: function() {\n        // FIXME: this is needed only if there are feature tracks in the composite track.\n        // TiledTrack.prototype.before_draw.call(this);\n\n        //\n        // Set min, max for tracks to be largest min, max.\n        //\n\n        // Get smallest min, biggest max.\n        var min = _.min(_.map(this.drawables, d => d.config.get_value(\"min_value\")));\n\n        var max = _.max(_.map(this.drawables, d => d.config.get_value(\"max_value\")));\n\n        this.config.set_value(\"min_value\", min);\n        this.config.set_value(\"max_value\", max);\n\n        // Set all tracks to smallest min, biggest max.\n        _.each(this.drawables, d => {\n            d.config.set_value(\"min_value\", min);\n            d.config.set_value(\"max_value\", max);\n        });\n    },\n\n    /**\n     * Update minimum, maximum for component tracks.\n     */\n    update_all_min_max: function() {\n        var track = this;\n        var min_value = this.config.get_value(\"min_value\");\n        var max_value = this.config.get_value(\"max_value\");\n        _.each(this.drawables, d => {\n            d.config.set_value(\"min_value\", min_value);\n            d.config.set_value(\"max_value\", max_value);\n        });\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n        var max_height = -1;\n\n        var i;\n        for (i = 0; i < tiles.length; i++) {\n            var height = tiles[i].html_elt.find(\"canvas\").height();\n            if (height > max_height) {\n                max_height = height;\n            }\n        }\n\n        for (i = 0; i < tiles.length; i++) {\n            var tile = tiles[i];\n            if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                this.draw_helper(tile.region, w_scale, {\n                    force: true,\n                    height: max_height\n                });\n                tile.html_elt.remove();\n            }\n        }\n\n        // Wrap function so that it can be called without object reference.\n        var track = this;\n\n        var t = () => {\n            track.update_all_min_max();\n        };\n\n        // Add min, max labels.\n        this._add_yaxis_label(\"min\", t);\n        this._add_yaxis_label(\"max\", t);\n    }\n});\n\n/**\n * Displays reference genome data.\n */\nvar ReferenceTrack = function(view) {\n    TiledTrack.call(this, view, { content_div: view.top_labeltrack }, { resize: false, header: false });\n\n    // Use offset to ensure that bases at tile edges are drawn.\n    this.left_offset = view.canvas_manager.char_width_px;\n    this.container_div.addClass(\"reference-track\");\n    this.data_url = `${Galaxy.root}api/genomes/${this.view.dbkey}`;\n    this.data_url_extra_params = { reference: true };\n    this.data_manager = new visualization.GenomeReferenceDataManager({\n        data_url: this.data_url,\n        can_subset: this.can_subset\n    });\n    this.hide_contents();\n};\nextend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 13,\n                hidden: true\n            }\n        ]);\n    },\n\n    init: function() {\n        this.data_manager.clear();\n        // Enable by default because there should always be data when drawing track.\n        this.enabled = true;\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {},\n\n    can_draw: Drawable.prototype.can_draw,\n\n    /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n    draw_helper: function(region, w_scale, options) {\n        var cur_visible = this.tiles_div.is(\":visible\");\n        var new_visible;\n        var tile = null;\n        if (w_scale > this.view.canvas_manager.char_width_px) {\n            this.tiles_div.show();\n            new_visible = true;\n            tile = TiledTrack.prototype.draw_helper.call(this, region, w_scale, options);\n        } else {\n            new_visible = false;\n            this.tiles_div.hide();\n        }\n\n        // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n        // postdraw_actions is not called when reference track not shown due to no tiles. If\n        // it is moved to postdraw_actions, resize must be called each time because cannot\n        // easily detect showing/hiding.\n\n        // If showing or hiding reference track, resize viewport.\n        if (cur_visible !== new_visible) {\n            this.view.resize_viewport();\n        }\n\n        return tile;\n    },\n\n    can_subset: function(entry) {\n        return true;\n    },\n\n    /**\n     * Draw ReferenceTrack tile.\n     */\n    draw_tile: function(data, ctx, mode, region, w_scale) {\n        // Try to subset data.\n        var subset = this.data_manager.subset_entry(data, region);\n\n        var seq_data = subset.data;\n\n        // Draw sequence data.\n        var canvas = ctx.canvas;\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"center\";\n        for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n            ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n            ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n        }\n        return new Tile(this, region, w_scale, canvas, subset);\n    }\n});\n\n/**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\nvar LineTrack = function(view, container, obj_dict) {\n    this.mode = \"Histogram\";\n    TiledTrack.call(this, view, container, obj_dict);\n    // Need left offset for drawing overlap near tile boundaries.\n    this.left_offset = 30;\n\n    // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n    // FIXME: there should be a flag to wait for this check to complete before loading the track.\n    var self = this;\n    $.when(supportsByteRanges(`${Galaxy.root}datasets/${this.dataset.id}/display`)).then(supportsByteRanges => {\n        if (supportsByteRanges) {\n            self.data_manager = new bbi.BBIDataManager({\n                dataset: self.dataset\n            });\n        }\n    });\n};\n\nextend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: CONTINUOUS_DATA_MODES,\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            { key: \"color\", label: \"Color\", type: \"color\" },\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"float\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 30,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Actions to be taken before drawing.\n     */\n    // FIXME: can the default behavior be used; right now it breaks during resize.\n    before_draw: function() {},\n\n    /**\n     * Draw track tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n    },\n\n    /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n    can_subset: function(entry) {\n        return entry.data[1][0] - entry.data[0][0] === 1;\n    },\n\n    /**\n     * Add min, max labels.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        // Add min, max labels.\n        this._add_yaxis_label(\"max\");\n        this._add_yaxis_label(\"min\");\n    }\n});\n\n/**\n * Diagonal heatmap for showing interactions data.\n */\nvar DiagonalHeatmapTrack = function(view, container, obj_dict) {\n    this.mode = \"Heatmap\";\n    TiledTrack.call(this, view, container, obj_dict);\n};\n\nextend(DiagonalHeatmapTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Heatmap\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"pos_color\",\n                label: \"Positive Color\",\n                type: \"color\",\n                default_value: \"#FF8C00\"\n            },\n            {\n                key: \"neg_color\",\n                label: \"Negative Color\",\n                type: \"color\",\n                default_value: \"#4169E1\"\n            },\n            {\n                key: \"min_value\",\n                label: \"Min Value\",\n                type: \"int\",\n                default_value: undefined\n            },\n            {\n                key: \"max_value\",\n                label: \"Max Value\",\n                type: \"int\",\n                default_value: undefined\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 500,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var track = this;\n        return $.getJSON(\n            track.dataset.url(),\n            {\n                data_type: \"data\",\n                stats: true,\n                chrom: track.view.chrom,\n                low: 0,\n                high: track.view.max_high,\n                hda_ldda: track.dataset.get(\"hda_ldda\")\n            },\n            result => {\n                var data = result.data;\n            }\n        );\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Paint onto canvas.\n        var canvas = ctx.canvas;\n\n        var painter = new painters.DiagonalHeatmapPainter(\n            result.data,\n            region.get(\"start\"),\n            region.get(\"end\"),\n            this.config.to_key_value_dict(),\n            mode\n        );\n\n        painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n        return new Tile(this, region, w_scale, canvas, result.data);\n    }\n});\n\n/**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\nvar FeatureTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.container_div.addClass(\"feature-track\");\n    this.summary_draw_height = 30;\n    this.slotters = {};\n    this.start_end_dct = {};\n    this.left_offset = 200;\n\n    // this.painter = painters.LinkedFeaturePainter;\n    this.set_painter_from_config();\n};\nextend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"block_color\",\n                label: \"Block color\",\n                type: \"color\"\n            },\n            {\n                key: \"reverse_strand_color\",\n                label: \"Antisense strand color\",\n                type: \"color\"\n            },\n            {\n                key: \"label_color\",\n                label: \"Label color\",\n                type: \"color\",\n                default_value: \"black\"\n            },\n            {\n                key: \"show_counts\",\n                label: \"Show summary counts\",\n                type: \"bool\",\n                default_value: true,\n                help: \"Show the number of items in each bin when drawing summary histogram\"\n            },\n            {\n                key: \"min_value\",\n                label: \"Histogram minimum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"max_value\",\n                label: \"Histogram maximum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"connector_style\",\n                label: \"Connector style\",\n                type: \"select\",\n                default_value: \"fishbones\",\n                options: [\n                    {\n                        label: \"Line with arrows\",\n                        value: \"fishbone\"\n                    },\n                    { label: \"Arcs\", value: \"arcs\" }\n                ]\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.set_painter_from_config();\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    set_painter_from_config: function() {\n        if (this.config.get_value(\"connector_style\") === \"arcs\") {\n            this.painter = painters.ArcLinkedFeaturePainter;\n        } else {\n            this.painter = painters.LinkedFeaturePainter;\n        }\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var track = this;\n        var i;\n\n        var line_track_tiles = _.filter(tiles, t => t instanceof LineTrackTile);\n\n        //\n        // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n        // are labeled incomplete on the tile level because they cannot be completely drawn.\n        //\n        if (line_track_tiles.length === 0) {\n            // Gather incomplete features together.\n            var all_incomplete_features = {};\n            _.each(_.pluck(tiles, \"incomplete_features\"), inc_features => {\n                _.each(inc_features, feature => {\n                    all_incomplete_features[feature[0]] = feature;\n                });\n            });\n\n            // Draw incomplete features on each tile.\n            var self = this;\n            _.each(tiles, tile => {\n                // Remove features already drawn on tile originally.\n                var tile_incomplete_features = _.omit(\n                    all_incomplete_features,\n                    _.map(tile.incomplete_features, f => f[0])\n                );\n\n                // Remove features already drawn on tile in past postdraw actions.\n                tile_incomplete_features = _.omit(tile_incomplete_features, _.keys(tile.other_tiles_features_drawn));\n\n                // Draw tile's incomplete features.\n                if (_.size(tile_incomplete_features) !== 0) {\n                    // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                    // canvas, and then draw incomplete features on the new canvas.\n                    var features = {\n                        data: _.values(tile_incomplete_features)\n                    };\n\n                    var new_canvas = self.view.canvas_manager.new_canvas();\n                    var new_canvas_ctx = new_canvas.getContext(\"2d\");\n                    new_canvas.height = Math.max(\n                        tile.canvas.height,\n                        self.get_canvas_height(features, tile.mode, tile.w_scale, 100)\n                    );\n                    new_canvas.width = tile.canvas.width;\n                    new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                    new_canvas_ctx.translate(track.left_offset, 0);\n                    var new_tile = self.draw_tile(\n                        features,\n                        new_canvas_ctx,\n                        tile.mode,\n                        tile.region,\n                        tile.w_scale,\n                        tile.seq_data\n                    );\n                    $(tile.canvas).replaceWith($(new_tile.canvas));\n                    tile.canvas = new_canvas;\n                    _.extend(tile.other_tiles_features_drawn, all_incomplete_features);\n                }\n            });\n        }\n\n        // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n        /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n        //\n        // Update filter attributes, UI.\n        //\n\n        // Update filtering UI.\n        if (track.filters_manager) {\n            var filters = track.filters_manager.filters;\n            var f;\n            for (f = 0; f < filters.length; f++) {\n                filters[f].update_ui_elt();\n            }\n\n            // Determine if filters are available; this is based on the tiles' data.\n            // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n            var filters_available = false;\n\n            var example_feature;\n            var filter;\n            for (i = 0; i < tiles.length; i++) {\n                if (tiles[i].data.length) {\n                    example_feature = tiles[i].data[0];\n                    for (f = 0; f < filters.length; f++) {\n                        filter = filters[f];\n                        if (filter.applies_to(example_feature) && filter.min !== filter.max) {\n                            filters_available = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // If filter availability changed, hide filter div if necessary and update menu.\n            if (track.filters_available !== filters_available) {\n                track.filters_available = filters_available;\n                if (!track.filters_available) {\n                    track.filters_manager.hide();\n                }\n                track.update_icons();\n            }\n        }\n\n        //\n        // If not all features slotted, show icon for showing more rows (slots).\n        //\n        if (tiles[0] instanceof FeatureTrackTile) {\n            var all_slotted = true;\n            for (i = 0; i < tiles.length; i++) {\n                if (!tiles[i].all_slotted) {\n                    all_slotted = false;\n                    break;\n                }\n            }\n            this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n        } else {\n            this.action_icons.show_more_rows_icon.hide();\n        }\n    },\n\n    /**\n     * Update track interface to show display mode being used.\n     */\n    update_auto_mode: function(mode) {\n        if (this.mode === \"Auto\") {\n            if (mode === \"no_detail\") {\n                mode = \"feature spans\";\n            }\n            this.action_icons.mode_icon.attr(\"title\", `Set display mode (now: Auto/${mode})`);\n        }\n    },\n\n    /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n    incremental_slots: function(level, features, mode) {\n        // Get/create incremental slots for level. If display mode changed,\n        // need to create new slots.\n\n        var dummy_context = this.view.canvas_manager.dummy_context;\n\n        var slotter = this.slotters[level];\n        if (!slotter || slotter.mode !== mode) {\n            slotter = new slotting.FeatureSlotter(level, mode, MAX_FEATURE_DEPTH, x => dummy_context.measureText(x));\n            this.slotters[level] = slotter;\n        }\n\n        return slotter.slot_features(features);\n    },\n\n    /**\n     * Returns appropriate display mode based on data.\n     */\n    get_mode: function(data) {\n        var mode;\n        // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n        if (data.extra_info === \"no_detail\" || this.is_overview) {\n            mode = \"no_detail\";\n        } else {\n            // Choose b/t Squish and Pack.\n            // Proxy measures for using Squish:\n            // (a) error message re: limiting number of features shown;\n            // (b) X number of features shown;\n            // (c) size of view shown.\n            // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n            // fix this so that tiles are redrawn as necessary to use the same mode.\n            //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n            //     (result.data && result.data.length > 2000) ||\n            //var data = result.data;\n            // if ( (data.length && data.length < 4) ||\n            //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n            if (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) {\n                mode = \"Squish\";\n            } else {\n                mode = \"Pack\";\n            }\n        }\n        return mode;\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (mode === \"Coverage\" || result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // All other modes require slotting.\n            var rows_required = this.incremental_slots(w_scale, result.data, mode);\n            // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n            // works as a static function.\n            var dummy_painter = new this.painter(null, null, null, this.config.to_key_value_dict(), mode);\n            return Math.max(this.min_height_px, dummy_painter.get_required_height(rows_required, canvas_width));\n        }\n    },\n\n    /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n        var track = this;\n        var canvas = ctx.canvas;\n        var tile_low = region.get(\"start\");\n        var tile_high = region.get(\"end\");\n        var left_offset = this.left_offset;\n\n        // If data is line track data, draw line track tile.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n        }\n\n        // Handle row-by-row tracks\n\n        // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n        var filtered = [];\n\n        var slots = this.slotters[w_scale].slots;\n        var all_slotted = true;\n        if (result.data) {\n            var filters = this.filters_manager.filters;\n            for (var i = 0, len = result.data.length; i < len; i++) {\n                var feature = result.data[i];\n                var hide_feature = false;\n                var filter;\n                for (var f = 0, flen = filters.length; f < flen; f++) {\n                    filter = filters[f];\n                    filter.update_attrs(feature);\n                    if (!filter.keep(feature)) {\n                        hide_feature = true;\n                        break;\n                    }\n                }\n                if (!hide_feature) {\n                    // Feature visible.\n                    filtered.push(feature);\n                    // Set flag if not slotted.\n                    if (!(feature[0] in slots)) {\n                        all_slotted = false;\n                    }\n                }\n            }\n        }\n\n        // Create painter.\n        var filter_alpha_scaler = this.filters_manager.alpha_filter\n            ? new FilterScaler(this.filters_manager.alpha_filter)\n            : null;\n\n        var filter_height_scaler = this.filters_manager.height_filter\n            ? new FilterScaler(this.filters_manager.height_filter)\n            : null;\n\n        var painter = new this.painter(\n            filtered,\n            tile_low,\n            tile_high,\n            this.config.to_key_value_dict(),\n            mode,\n            filter_alpha_scaler,\n            filter_height_scaler,\n            // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n            ref_seq,\n            b => track.view.get_base_color(b)\n        );\n\n        var feature_mapper = null;\n\n        ctx.fillStyle = this.config.get_value(\"block_color\");\n        ctx.font = ctx.canvas.manager.default_font;\n        ctx.textAlign = \"right\";\n\n        if (result.data) {\n            // Draw features.\n            var draw_results = painter.draw(ctx, canvas.width, canvas.height, w_scale, slots);\n            feature_mapper = draw_results.feature_mapper;\n            incomplete_features = draw_results.incomplete_features;\n            feature_mapper.translation = -left_offset;\n        }\n\n        // If not drawing on current tile, create new tile.\n        if (!cur_tile) {\n            return new FeatureTrackTile(\n                track,\n                region,\n                w_scale,\n                canvas,\n                result.data,\n                mode,\n                result.message,\n                all_slotted,\n                feature_mapper,\n                incomplete_features,\n                ref_seq\n            );\n        }\n    }\n});\n\n/**\n * Displays variant data.\n */\nvar VariantTrack = function(view, container, obj_dict) {\n    TiledTrack.call(this, view, container, obj_dict);\n    this.painter = painters.VariantPainter;\n    this.summary_draw_height = 30;\n\n    // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n    // variant is drawn when variant is at start of tile.\n    this.left_offset = 30;\n};\n\nextend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n    display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"color\",\n                label: \"Histogram color\",\n                type: \"color\"\n            },\n            {\n                key: \"show_sample_data\",\n                label: \"Show sample data\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"show_labels\",\n                label: \"Show summary and sample labels\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"summary_height\",\n                label: \"Locus summary height\",\n                type: \"float\",\n                default_value: 20\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    },\n\n    /**\n     * Draw tile.\n     */\n    draw_tile: function(result, ctx, mode, region, w_scale) {\n        // Data could be coverage data or variant data.\n        if (result.dataset_type === \"bigwig\") {\n            return this._draw_line_track_tile(result, ctx, \"Histogram\", region, w_scale);\n        } else {\n            // result.dataset_type === 'variant'\n            var view = this.view;\n\n            var painter = new this.painter(\n                result.data,\n                region.get(\"start\"),\n                region.get(\"end\"),\n                this.config.to_key_value_dict(),\n                mode,\n                b => view.get_base_color(b)\n            );\n\n            painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n            return new Tile(this, region, w_scale, ctx.canvas, result.data);\n        }\n    },\n\n    /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n    get_canvas_height: function(result, mode, w_scale, canvas_width) {\n        if (result.dataset_type === \"bigwig\") {\n            return this.summary_draw_height;\n        } else {\n            // HACK: sample_names is not be defined when dataset definition is fetched before\n            // dataset is complete (as is done when running tools). In that case, fall back on\n            // # of samples in data. This can be fixed by re-requesting dataset definition\n            // in init.\n            var num_samples = this.dataset.get_metadata(\"sample_names\")\n                ? this.dataset.get_metadata(\"sample_names\").length\n                : 0;\n            if (num_samples === 0 && result.data.length !== 0) {\n                // Sample data is separated by commas, so this computes # of samples:\n                num_samples = result.data[0][7].match(/,/g);\n                if (num_samples === null) {\n                    num_samples = 1;\n                } else {\n                    num_samples = num_samples.length + 1;\n                }\n            }\n\n            var dummy_painter = new this.painter(null, null, null, this.config.to_key_value_dict(), mode);\n            return dummy_painter.get_required_height(num_samples);\n        }\n    },\n\n    /**\n     * Additional initialization required before drawing track for the first time.\n     */\n    predraw_init: function() {\n        var deferreds = [Track.prototype.predraw_init.call(this)];\n        // FIXME: updating dataset metadata is only needed for visual analysis. Can\n        // this be moved somewhere else?\n        if (!this.dataset.get_metadata(\"sample_names\")) {\n            deferreds.push(this.dataset.fetch());\n        }\n        return deferreds;\n    },\n\n    /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n    postdraw_actions: function(tiles, width, w_scale, clear_after) {\n        TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n        var line_track_tiles = _.filter(tiles, t => t instanceof LineTrackTile);\n\n        // Add summary/sample labels if needed and not already included.\n        var sample_names = this.dataset.get_metadata(\"sample_names\");\n        if (\n            line_track_tiles.length === 0 &&\n            this.config.get_value(\"show_labels\") &&\n            sample_names &&\n            sample_names.length > 1\n        ) {\n            var font_size;\n\n            // Add and/or style labels.\n            if (this.container_div.find(\".yaxislabel.variant\").length === 0) {\n                // Add summary and sample labels.\n\n                // Add summary label to middle of summary area.\n                font_size = this.config.get_value(\"summary_height\") / 2;\n                this.tiles_div.prepend(\n                    $(\"<div/>\")\n                        .text(\"Summary\")\n                        .addClass(\"yaxislabel variant top\")\n                        .css({\n                            \"font-size\": `${font_size}px`,\n                            top: `${(this.config.get_value(\"summary_height\") - font_size) / 2}px`\n                        })\n                );\n\n                // Show sample labels.\n                if (this.config.get_value(\"show_sample_data\")) {\n                    var samples_div_html = sample_names.join(\"<br/>\");\n\n                    this.tiles_div.prepend(\n                        $(\"<div/>\")\n                            .html(samples_div_html)\n                            .addClass(\"yaxislabel variant top sample\")\n                            .css({\n                                top: this.config.get_value(\"summary_height\")\n                            })\n                    );\n                }\n            }\n\n            // Style labels.\n\n            // Match sample font size to mode.\n            font_size = `${this.mode === \"Squish\" ? 5 : 10}px`;\n            $(this.tiles_div)\n                .find(\".sample\")\n                .css({\n                    \"font-size\": font_size,\n                    \"line-height\": font_size\n                });\n            // Color labels to preference color.\n            $(this.tiles_div)\n                .find(\".yaxislabel\")\n                .css(\"color\", this.config.get_value(\"label_color\"));\n        } else {\n            // Remove all labels.\n            this.container_div.find(\".yaxislabel.variant\").remove();\n        }\n    }\n});\n\n/**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\nvar ReadTrack = function(view, container, obj_dict) {\n    FeatureTrack.call(this, view, container, obj_dict);\n    this.painter = painters.ReadPainter;\n    this.update_icons();\n};\n\nextend(ReadTrack.prototype, Drawable.prototype, TiledTrack.prototype, FeatureTrack.prototype, {\n    build_config_params: function() {\n        return _.union(Drawable.prototype.config_params, [\n            {\n                key: \"block_color\",\n                label: \"Histogram color\",\n                type: \"color\"\n            },\n            {\n                key: \"detail_block_color\",\n                label: \"Sense strand block color\",\n                type: \"color\",\n                default_value: \"#AAAAAA\"\n            },\n            {\n                key: \"reverse_strand_color\",\n                label: \"Antisense strand block color\",\n                type: \"color\",\n                default_value: \"#DDDDDD\"\n            },\n            {\n                key: \"label_color\",\n                label: \"Label color\",\n                type: \"color\",\n                default_value: \"black\"\n            },\n            {\n                key: \"show_insertions\",\n                label: \"Show insertions\",\n                type: \"bool\",\n                default_value: false\n            },\n            {\n                key: \"show_differences\",\n                label: \"Show differences only\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"show_counts\",\n                label: \"Show summary counts\",\n                type: \"bool\",\n                default_value: true\n            },\n            {\n                key: \"mode\",\n                type: \"string\",\n                default_value: this.mode,\n                hidden: true\n            },\n            {\n                key: \"min_value\",\n                label: \"Histogram minimum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"max_value\",\n                label: \"Histogram maximum\",\n                type: \"float\",\n                default_value: undefined,\n                help: \"clear value to set automatically\"\n            },\n            {\n                key: \"height\",\n                type: \"int\",\n                default_value: 0,\n                hidden: true\n            }\n        ]);\n    },\n\n    config_onchange: function() {\n        this.set_name(this.config.get_value(\"name\"));\n        this.request_draw({ clear_tile_cache: true });\n    }\n});\n\n/**\n * Objects that can be added to a view.\n */\nvar addable_objects = {\n    CompositeTrack: CompositeTrack,\n    DrawableGroup: DrawableGroup,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    FeatureTrack: FeatureTrack,\n    LineTrack: LineTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    // For backward compatibility, map vcf track to variant.\n    VcfTrack: VariantTrack\n};\n\n/**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\nvar object_from_template = (template, view, container) => {\n    if (\"copy\" in template) {\n        // Template is an object.\n        return template.copy(container);\n    } else {\n        // Template is a dictionary.\n        var drawable_type = template.obj_type;\n        // For backward compatibility:\n        if (!drawable_type) {\n            drawable_type = template.track_type;\n        }\n        return new addable_objects[drawable_type](view, container, template);\n    }\n};\n\nexport default {\n    TracksterView: TracksterView,\n    DrawableGroup: DrawableGroup,\n    LineTrack: LineTrack,\n    FeatureTrack: FeatureTrack,\n    DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n    ReadTrack: ReadTrack,\n    VariantTrack: VariantTrack,\n    CompositeTrack: CompositeTrack,\n    object_from_template: object_from_template\n};\n"]}