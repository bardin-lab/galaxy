{"version":3,"sources":["viz/trackster/filters.js"],"names":["extend","Filter","obj_dict","this","manager","name","index","tool_id","tool_exp_name","prototype","to_dict","create_action_icon","title","css_class","on_click_fn","$","attr","addClass","tooltip","click","NumberFilter","call","low","Number","MAX_VALUE","high","min","max","slider","slider_label","filter","parent_div","new_value","alert","slider_row","text","appendTo","filter_label","removeClass","values_span_container","append","values_span","slider_div","name_span","control_element","step","range","slide","event","ui","get_slider_step","container","span","cur_value","parseFloat","toString","length","multi_value","parents","input_size","focus","select","edit_slider_values","blur","keyup","e","keyCode","trigger","slider_min","slider_max","stopPropagation","a_val","isNaN","remove","val","split","invalid","alpha_filter","display_controls_div","find","hide","show","track","request_draw","force","height_icon","height_filter","clear_after","transparency_icon","hover","type","copy","values","self","setTimeout","element","_keep_val","keep","to_filter","returnVal","Array","i","updated","update_attrs","Math","value","floor","update_ui_elt","ceil","FiltersManager","filters","bind","alpha_filter_name","height_filter_name","console","filters_dict","visible","run_buttons_row","run_on_dataset_button","filter_manager","toggle","run_on_dataset","filter_dicts","new_track","add_filter","push","remove_all","children","init_filters","get_or_create_dict_item","clear_filters","active_filters","tool_filter_conditions","dict","key","new_item","active_filters_list","run_filter","input_dataset_id","filter_tuple","response","Galaxy","modal","body","url_params","tool_filter_str","buttons","Close","join","getJSON","run_tool_url","dataset_id","_localization2","default"],"mappings":"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","file":"../../../scripts/viz/trackster/filters.js","sourcesContent":["import _l from \"utils/localization\";\nimport * as _ from \"libs/underscore\";\nvar extend = _.extend;\n\n/**\n * Filters that enable users to show/hide data points dynamically.\n */\nvar Filter = function(obj_dict) {\n    this.manager = null;\n    this.name = obj_dict.name;\n    // Index into payload to filter.\n    this.index = obj_dict.index;\n    this.tool_id = obj_dict.tool_id;\n    // Name to use for filter when building expression for tool.\n    this.tool_exp_name = obj_dict.tool_exp_name;\n};\n\nextend(Filter.prototype, {\n    /**\n     * Convert filter to dictionary.\n     */\n    to_dict: function() {\n        return {\n            name: this.name,\n            index: this.index,\n            tool_id: this.tool_id,\n            tool_exp_name: this.tool_exp_name\n        };\n    }\n});\n\n/**\n * Creates an action icon.\n */\nvar create_action_icon = (title, css_class, on_click_fn) =>\n    $(\"<a/>\")\n        .attr(\"href\", \"javascript:void(0);\")\n        .attr(\"title\", title)\n        .addClass(\"icon-button\")\n        .addClass(css_class)\n        .tooltip()\n        .click(on_click_fn);\n\n/**\n * Number filters have a min, max as well as a low, high; low and high are used\n */\nvar NumberFilter = function(obj_dict) {\n    //\n    // Attribute init.\n    //\n    Filter.call(this, obj_dict);\n    // Filter low/high. These values are used to filter elements.\n    this.low = \"low\" in obj_dict ? obj_dict.low : -Number.MAX_VALUE;\n    this.high = \"high\" in obj_dict ? obj_dict.high : Number.MAX_VALUE;\n    // Slide min/max. These values are used to set/update slider.\n    this.min = \"min\" in obj_dict ? obj_dict.min : Number.MAX_VALUE;\n    this.max = \"max\" in obj_dict ? obj_dict.max : -Number.MAX_VALUE;\n    // UI elements associated with filter.\n    this.container = null;\n    this.slider = null;\n    this.slider_label = null;\n\n    //\n    // Create HTML.\n    //\n\n    // Function that supports inline text editing of slider values.\n    // Enable users to edit parameter's value via a text box.\n    var edit_slider_values = (container, span, slider) => {\n        container.click(function() {\n            var cur_value = span.text();\n            var max = parseFloat(slider.slider(\"option\", \"max\"));\n\n            var input_size = max <= 1 ? 4 : max <= 1000000 ? max.toString().length : 6;\n\n            var multi_value = false;\n            var slider_row = $(this).parents(\".slider-row\");\n\n            // Row now has input.\n            slider_row.addClass(\"input\");\n\n            // Increase input size if there are two values.\n            if (slider.slider(\"option\", \"values\")) {\n                input_size = 2 * input_size + 1;\n                multi_value = true;\n            }\n            span.text(\"\");\n            // Temporary input for changing value.\n            $(\"<input type='text'/>\")\n                .attr(\"size\", input_size)\n                .attr(\"maxlength\", input_size)\n                .attr(\"value\", cur_value)\n                .appendTo(span)\n                .focus()\n                .select()\n                .click(e => {\n                    // Don't want click to propogate up to values_span and restart everything.\n                    e.stopPropagation();\n                })\n                .blur(function() {\n                    $(this).remove();\n                    span.text(cur_value);\n                    slider_row.removeClass(\"input\");\n                })\n                .keyup(function(e) {\n                    if (e.keyCode === 27) {\n                        // Escape key.\n                        $(this).trigger(\"blur\");\n                    } else if (e.keyCode === 13) {\n                        //\n                        // Enter/return key initiates callback. If new value(s) are in slider range,\n                        // change value (which calls slider's change() function).\n                        //\n                        var slider_min = slider.slider(\"option\", \"min\");\n\n                        var slider_max = slider.slider(\"option\", \"max\");\n\n                        var invalid = a_val => isNaN(a_val) || a_val > slider_max || a_val < slider_min;\n\n                        var new_value = $(this).val();\n                        if (!multi_value) {\n                            new_value = parseFloat(new_value);\n                            if (invalid(new_value)) {\n                                alert(`Parameter value must be in the range [${slider_min}-${slider_max}]`);\n                                return $(this);\n                            }\n                        } else {\n                            // Multi value.\n                            new_value = new_value.split(\"-\");\n                            new_value = [parseFloat(new_value[0]), parseFloat(new_value[1])];\n                            if (invalid(new_value[0]) || invalid(new_value[1])) {\n                                alert(`Parameter value must be in the range [${slider_min}-${slider_max}]`);\n                                return $(this);\n                            }\n                        }\n\n                        // Updating the slider also updates slider values and removes input.\n                        slider.slider(multi_value ? \"values\" : \"value\", new_value);\n                        slider_row.removeClass(\"input\");\n                    }\n                });\n        });\n    };\n\n    var filter = this;\n\n    filter.parent_div = $(\"<div/>\").addClass(\"filter-row slider-row\");\n\n    // Set up filter label (name, values).\n    var filter_label = $(\"<div/>\")\n        .addClass(\"elt-label\")\n        .appendTo(filter.parent_div);\n\n    var name_span = $(\"<span/>\")\n        .addClass(\"slider-name\")\n        .text(`${filter.name}  `)\n        .appendTo(filter_label);\n\n    var values_span = $(\"<span/>\").text(`${this.low}-${this.high}`);\n\n    var values_span_container = $(\"<span/>\")\n        .addClass(\"slider-value\")\n        .appendTo(filter_label)\n        .append(\"[\")\n        .append(values_span)\n        .append(\"]\");\n\n    filter.values_span = values_span;\n\n    // Set up slider for filter.\n    var slider_div = $(\"<div/>\")\n        .addClass(\"slider\")\n        .appendTo(filter.parent_div);\n    filter.control_element = $(\"<div/>\")\n        .attr(\"id\", `${filter.name}-filter-control`)\n        .appendTo(slider_div);\n    filter.control_element.slider({\n        range: true,\n        min: this.min,\n        max: this.max,\n        step: this.get_slider_step(this.min, this.max),\n        values: [this.low, this.high],\n        slide: function(event, ui) {\n            filter.slide(event, ui);\n        },\n        change: function(event, ui) {\n            filter.control_element.slider(\"option\", \"slide\").call(filter.control_element, event, ui);\n        }\n    });\n    filter.slider = filter.control_element;\n    filter.slider_label = values_span;\n\n    // Enable users to edit slider values via text box.\n    edit_slider_values(values_span_container, values_span, filter.control_element);\n\n    // Set up filter display controls.\n    var display_controls_div = $(\"<div/>\")\n        .addClass(\"display-controls\")\n        .appendTo(filter.parent_div);\n    this.transparency_icon = create_action_icon(\"Use filter for data transparency\", \"layer-transparent\", () => {\n        if (filter.manager.alpha_filter !== filter) {\n            // Setting this filter as the alpha filter.\n            filter.manager.alpha_filter = filter;\n            // Update UI for new filter.\n            filter.manager.parent_div\n                .find(\".layer-transparent\")\n                .removeClass(\"active\")\n                .hide();\n            filter.transparency_icon.addClass(\"active\").show();\n        } else {\n            // Clearing filter as alpha filter.\n            filter.manager.alpha_filter = null;\n            filter.transparency_icon.removeClass(\"active\");\n        }\n        filter.manager.track.request_draw({\n            force: true,\n            clear_after: true\n        });\n    })\n        .appendTo(display_controls_div)\n        .hide();\n    this.height_icon = create_action_icon(\"Use filter for data height\", \"arrow-resize-090\", () => {\n        if (filter.manager.height_filter !== filter) {\n            // Setting this filter as the height filter.\n            filter.manager.height_filter = filter;\n            // Update UI for new filter.\n            filter.manager.parent_div\n                .find(\".arrow-resize-090\")\n                .removeClass(\"active\")\n                .hide();\n            filter.height_icon.addClass(\"active\").show();\n        } else {\n            // Clearing filter as alpha filter.\n            filter.manager.height_filter = null;\n            filter.height_icon.removeClass(\"active\");\n        }\n        filter.manager.track.request_draw({\n            force: true,\n            clear_after: true\n        });\n    })\n        .appendTo(display_controls_div)\n        .hide();\n    filter.parent_div.hover(\n        () => {\n            filter.transparency_icon.show();\n            filter.height_icon.show();\n        },\n        () => {\n            if (filter.manager.alpha_filter !== filter) {\n                filter.transparency_icon.hide();\n            }\n            if (filter.manager.height_filter !== filter) {\n                filter.height_icon.hide();\n            }\n        }\n    );\n\n    // Add to clear floating layout.\n    $(\"<div style='clear: both;'/>\").appendTo(filter.parent_div);\n};\nextend(NumberFilter.prototype, {\n    /**\n     * Convert filter to dictionary.\n     */\n    to_dict: function() {\n        var obj_dict = Filter.prototype.to_dict.call(this);\n        return extend(obj_dict, {\n            type: \"number\",\n            min: this.min,\n            max: this.max,\n            low: this.low,\n            high: this.high\n        });\n    },\n    /**\n     * Return a copy of filter.\n     */\n    copy: function() {\n        return new NumberFilter({\n            name: this.name,\n            index: this.index,\n            tool_id: this.tool_id,\n            tool_exp_name: this.tool_exp_name\n        });\n    },\n    /**\n     * Get step for slider.\n     */\n    // FIXME: make this a \"static\" function.\n    get_slider_step: function(min, max) {\n        var range = max - min;\n        return range <= 2 ? 0.01 : 1;\n    },\n    /**\n     * Handle slide events.\n     */\n    slide: function(event, ui) {\n        var values = ui.values;\n\n        // Set new values in UI.\n        this.values_span.text(`${values[0]}-${values[1]}`);\n\n        // Set new values in filter.\n        this.low = values[0];\n        this.high = values[1];\n\n        // Set timeout to update if filter low, high are stable.\n        var self = this;\n        setTimeout(() => {\n            if (values[0] === self.low && values[1] === self.high) {\n                self.manager.track.request_draw({\n                    force: true,\n                    clear_after: true\n                });\n            }\n        }, 25);\n    },\n    /**\n     * Returns true if filter can be applied to element.\n     */\n    applies_to: function(element) {\n        if (element.length > this.index) {\n            return true;\n        }\n        return false;\n    },\n    /**\n     * Helper function: returns true if value in in filter's [low, high] range.\n     */\n    _keep_val: function(val) {\n        return isNaN(val) || (val >= this.low && val <= this.high);\n    },\n    /**\n     * Returns true if (a) element's value(s) is in [low, high] (range is inclusive)\n     * or (b) if value is non-numeric and hence unfilterable.\n     */\n    keep: function(element) {\n        if (!this.applies_to(element)) {\n            // No element to filter on.\n            return true;\n        }\n\n        // Keep value function.\n        var filter = this;\n\n        // Do filtering.\n        var to_filter = element[this.index];\n        if (to_filter instanceof Array) {\n            var returnVal = true;\n            for (var i = 0; i < to_filter.length; i++) {\n                if (!this._keep_val(to_filter[i])) {\n                    // Exclude element.\n                    returnVal = false;\n                    break;\n                }\n            }\n            return returnVal;\n        } else {\n            return this._keep_val(element[this.index]);\n        }\n    },\n    /**\n     * Update filter's min and max values based on element's values.\n     */\n    update_attrs: function(element) {\n        var updated = false;\n        if (!this.applies_to(element)) {\n            return updated;\n        }\n\n        //\n        // Update filter's min, max based on element values.\n        //\n\n        // Make value(s) into an Array.\n        var values = element[this.index];\n        if (!(values instanceof Array)) {\n            values = [values];\n        }\n\n        // Loop through values and update min, max.\n        for (var i = 0; i < values.length; i++) {\n            var value = values[i];\n            if (value < this.min) {\n                this.min = Math.floor(value);\n                updated = true;\n            }\n            if (value > this.max) {\n                this.max = Math.ceil(value);\n                updated = true;\n            }\n        }\n        return updated;\n    },\n    /**\n     * Update filter's slider.\n     */\n    update_ui_elt: function() {\n        // Only show filter if min < max because filter is not useful otherwise. This\n        // covers all corner cases, such as when min, max have not been defined and\n        // when min == max.\n        if (this.min < this.max) {\n            this.parent_div.show();\n        } else {\n            this.parent_div.hide();\n        }\n\n        var slider_min = this.slider.slider(\"option\", \"min\");\n        var slider_max = this.slider.slider(\"option\", \"max\");\n        if (this.min < slider_min || this.max > slider_max) {\n            // Update slider min, max, step.\n            this.slider.slider(\"option\", \"min\", this.min);\n            this.slider.slider(\"option\", \"max\", this.max);\n            this.slider.slider(\"option\", \"step\", this.get_slider_step(this.min, this.max));\n            // Refresh slider:\n            // TODO: do we want to keep current values or reset to min/max?\n            // Currently we reset values:\n            this.slider.slider(\"option\", \"values\", [this.min, this.max]);\n            // To use the current values.\n            //var values = this.slider.slider( \"option\", \"values\" );\n            //this.slider.slider( \"option\", \"values\", values );\n        }\n    }\n});\n\n/**\n * Manages a set of filters.\n */\nvar FiltersManager = function(track, obj_dict) {\n    this.track = track;\n    this.alpha_filter = null;\n    this.height_filter = null;\n    this.filters = [];\n\n    //\n    // Create HTML.\n    //\n\n    //\n    // Create parent div.\n    //\n    this.parent_div = $(\"<div/>\")\n        .addClass(\"filters\")\n        .hide();\n    // Disable dragging, double clicking, keys on div so that actions on slider do not impact viz.\n    this.parent_div\n        .bind(\"drag\", e => {\n            e.stopPropagation();\n        })\n        .click(e => {\n            e.stopPropagation();\n        })\n        .bind(\"dblclick\", e => {\n            e.stopPropagation();\n        })\n        .bind(\"keydown\", e => {\n            e.stopPropagation();\n        });\n\n    //\n    // Restore state from dict.\n    //\n    if (obj_dict && \"filters\" in obj_dict) {\n        // Second condition needed for backward compatibility.\n        var alpha_filter_name = \"alpha_filter\" in obj_dict ? obj_dict.alpha_filter : null;\n\n        var height_filter_name = \"height_filter\" in obj_dict ? obj_dict.height_filter : null;\n\n        var filters_dict = obj_dict.filters;\n        var filter;\n        for (var i = 0; i < filters_dict.length; i++) {\n            if (filters_dict[i].type === \"number\") {\n                filter = new NumberFilter(filters_dict[i]);\n                this.add_filter(filter);\n                if (filter.name === alpha_filter_name) {\n                    this.alpha_filter = filter;\n                    filter.transparency_icon.addClass(\"active\").show();\n                }\n                if (filter.name === height_filter_name) {\n                    this.height_filter = filter;\n                    filter.height_icon.addClass(\"active\").show();\n                }\n            } else {\n                console.log(\"ERROR: unsupported filter: \", name, type);\n            }\n        }\n\n        if (\"visible\" in obj_dict && obj_dict.visible) {\n            this.parent_div.show();\n        }\n    }\n\n    // Add button to filter complete dataset.\n    if (this.filters.length !== 0) {\n        var run_buttons_row = $(\"<div/>\")\n            .addClass(\"param-row\")\n            .appendTo(this.parent_div);\n        var run_on_dataset_button = $(\"<input type='submit'/>\")\n            .attr(\"value\", \"Run on complete dataset\")\n            .appendTo(run_buttons_row);\n        var filter_manager = this;\n        run_on_dataset_button.click(() => {\n            filter_manager.run_on_dataset();\n        });\n    }\n};\n\nextend(FiltersManager.prototype, {\n    // HTML manipulation and inspection.\n    show: function() {\n        this.parent_div.show();\n    },\n    hide: function() {\n        this.parent_div.hide();\n    },\n    toggle: function() {\n        this.parent_div.toggle();\n    },\n    visible: function() {\n        return this.parent_div.is(\":visible\");\n    },\n    /**\n     * Returns dictionary for manager.\n     */\n    to_dict: function() {\n        var obj_dict = {};\n        var filter_dicts = [];\n        var filter;\n\n        // Include individual filter states.\n        for (var i = 0; i < this.filters.length; i++) {\n            filter = this.filters[i];\n            filter_dicts.push(filter.to_dict());\n        }\n        obj_dict.filters = filter_dicts;\n\n        // Include transparency, height filters.\n        obj_dict.alpha_filter = this.alpha_filter ? this.alpha_filter.name : null;\n        obj_dict.height_filter = this.height_filter ? this.height_filter.name : null;\n\n        // Include visibility.\n        obj_dict.visible = this.parent_div.is(\":visible\");\n\n        return obj_dict;\n    },\n    /**\n     * Return a copy of the manager.\n     */\n    copy: function(new_track) {\n        var copy = new FiltersManager(new_track);\n        for (var i = 0; i < this.filters.length; i++) {\n            copy.add_filter(this.filters[i].copy());\n        }\n        return copy;\n    },\n    /**\n     * Add a filter to the manager.\n     */\n    add_filter: function(filter) {\n        filter.manager = this;\n        this.parent_div.append(filter.parent_div);\n        this.filters.push(filter);\n    },\n    /**\n     * Remove all filters from manager.\n     */\n    remove_all: function() {\n        this.filters = [];\n        this.parent_div.children().remove();\n    },\n    /**\n     * Initialize filters.\n     */\n\n    init_filters: function() {\n        for (var i = 0; i < this.filters.length; i++) {\n            var filter = this.filters[i];\n            filter.update_ui_elt();\n        }\n    },\n    /**\n     * Clear filters so that they do not impact track display.\n     */\n    clear_filters: function() {\n        for (var i = 0; i < this.filters.length; i++) {\n            var filter = this.filters[i];\n            filter.slider.slider(\"option\", \"values\", [filter.min, filter.max]);\n        }\n        this.alpha_filter = null;\n        this.height_filter = null;\n\n        // Hide icons for setting filters.\n        this.parent_div.find(\".icon-button\").hide();\n    },\n    run_on_dataset: function() {\n        // Get or create dictionary item.\n        var get_or_create_dict_item = (dict, key, new_item) => {\n            // Add new item to dict if\n            if (!(key in dict)) {\n                dict[key] = new_item;\n            }\n            return dict[key];\n        };\n\n        //\n        // Find and group active filters. Active filters are those being used to hide data.\n        // Filters with the same tool id are grouped.\n        //\n        var active_filters = {};\n\n        var filter;\n        var tool_filter_conditions;\n        for (var i = 0; i < this.filters.length; i++) {\n            filter = this.filters[i];\n            if (filter.tool_id) {\n                // Add filtering conditions if filter low/high are set.\n                if (filter.min !== filter.low) {\n                    tool_filter_conditions = get_or_create_dict_item(active_filters, filter.tool_id, []);\n                    tool_filter_conditions[tool_filter_conditions.length] = `${filter.tool_exp_name} >= ${filter.low}`;\n                }\n                if (filter.max !== filter.high) {\n                    tool_filter_conditions = get_or_create_dict_item(active_filters, filter.tool_id, []);\n                    tool_filter_conditions[tool_filter_conditions.length] = `${filter.tool_exp_name} <= ${filter.high}`;\n                }\n            }\n        }\n\n        //\n        // Use tools to run filters.\n        //\n\n        // Create list of (tool_id, tool_filters) tuples.\n        var active_filters_list = [];\n        for (var tool_id in active_filters) {\n            active_filters_list[active_filters_list.length] = [tool_id, active_filters[tool_id]];\n        }\n\n        // Invoke recursive function to run filters; this enables chaining of filters via\n        // iteratively application.\n        (function run_filter(input_dataset_id, filters) {\n            var // Set up filtering info and params.\n            filter_tuple = filters[0];\n\n            var tool_id = filter_tuple[0];\n            var tool_filters = filter_tuple[1];\n            var tool_filter_str = `(${tool_filters.join(\") and (\")})`;\n\n            var url_params = {\n                cond: tool_filter_str,\n                input: input_dataset_id,\n                target_dataset_id: input_dataset_id,\n                tool_id: tool_id\n            };\n\n            // Remove current filter.\n            filters = filters.slice(1);\n\n            $.getJSON(run_tool_url, url_params, response => {\n                if (response.error) {\n                    // General error.\n                    Galaxy.modal.show({\n                        title: _l(\"Filter Dataset\"),\n                        body: `Error running tool ${tool_id}`,\n                        buttons: { Close: Galaxy.modal.hide() }\n                    });\n                } else if (filters.length === 0) {\n                    // No more filters to run.\n                    Galaxy.modal.show({\n                        title: _l(\"Filtering Dataset\"),\n                        body: \"Filter(s) are running on the complete dataset. Outputs are in dataset's history.\",\n                        buttons: { Close: Galaxy.modal.hide() }\n                    });\n                } else {\n                    // More filters to run.\n                    run_filter(response.dataset_id, filters);\n                }\n            });\n        })(this.track.dataset_id, active_filters_list);\n    }\n});\n\nexport default {\n    FiltersManager: FiltersManager,\n    NumberFilter: NumberFilter\n};\n"]}