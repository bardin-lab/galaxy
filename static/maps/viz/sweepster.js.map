{"version":3,"sources":["viz/sweepster.js"],"names":["_","d3","ToolInputsSettings","Backbone","Model","extend","defaults","inputs","values","ToolParameterTree","tool","tree_data","initialize","options","self","this","get","each","input","on","set_tree_data","add_param","remove_param","config","input_config","find","name","param","set","get_tree_params","length","index","params_samples","map","samples","get_samples","node_id","id","children","create_tree_data","param_samples","settings","setting","where","in_ptree","sortBy","value","reduce","memo","get_node_settings","target_node","get_inputs_dict","cur_node","parent","depth","fixed_settings","all_settings","get_settings","node","flatten","c","clone","get_num_leaves","isArray","get_connected_nodes","parents","cur_parent","get_subtree_nodes","a_node","get_leaf","child","find_child","toJSON","min","max","num_samples","SweepsterTrack","track","mode","regions","track_config","data_url","Galaxy","root","same_settings","other_settings","a_track","prop","this_settings","to_dict","TrackCollection","Collection","model","_visualization2","default","Visualization","prototype","dataset","tracks","default_mode","converted_datasets_state_url","_data2","Dataset","_tools2","Tool","GenomeRegionCollection","tool_with_samplable_inputs","tree_config","add","type","dataset_id","tool_id","SweepsterVisualization","SweepsterTrackView","View","tagName","TILE_LEN","canvas_manager","draw_tiles","settings_td","$","appendTo","$el","title","css","text","settings_div","append","toggle","trigger","_iconButton2","create_icon_buttons_menu","_localization2","icon_class","on_click","remove","icon_menu","run_on_dataset_button","attr","tile_containers","when","data_manager","data_is_ready","then","data_ok","resolution","region","w_scale","get_data","tile_data","canvas","new_canvas","width","height","get_canvas_height","draw_tile","getContext","ToolInputValOrSweepView","number_input_template","select_input_template","tool_row","render","sweep_inputs_row","change","val","IntegerToolParameter","template","SelectToolParameter","single_input_row","option","join","options_text","insertAfter","menu","hide","show","parseFloat","className","ToolFormView","tool_form_view","not","i","at","ToolParameterTreeView","tree_params","cluster","layout","diagonal","svg","projection","d","y","x","nodes","size","param_depths","pluck","center_left","position","left","addClass","uniq","vis","select","link","selectAll","data","connected_node_ids","enter","style","filter","undefined","SweepsterVisualizationView","helpText","ConfigSettingCollection","from_models_and_saved_values","key","label","default_value","handle_node_clicks","view","_config2","tree_design_view","tracks_div","ToolParameterTreeDesignView","close_button","help_div","tr","toString","first","add_track","tool_param_tree_view","set_input_values","window","location","hide_modal","modes","mode_mapping","param_tree","track_view","get_base_color","get_value","base","toLowerCase","run_tool_on_dataset","tool_name","show_modal","Ok","pm_track","run_jobs_deferred","settings_leaf","run_jobs","new_tracks","setTimeout","Deferred","track_obj","resolve","rerun","output","prefs","to_key_value_dict","_tracks2","object_from_template","init_for_tool_data"],"mappings":"ihBAMYA,OACAC,wDAYRC,EAAqBC,SAASC,MAAMC,QACpCC,UACIC,OAAQ,KACRC,OAAQ,QAOZC,EAAoBN,SAASC,MAAMC,QACnCC,UACII,KAAM,KACNC,UAAW,MAGfC,WAAY,SAASC,GAEjB,IAAIC,EAAOC,KACXA,KAAKC,IAAI,QACJA,IAAI,UACJC,KAAK,SAAAC,GAEFA,EAAMC,GACF,2CACA,SAAAD,GACQA,EAAMF,IAAI,aACVF,EAAKM,iBAGbN,GAEJI,EAAMC,GACF,kBACA,SAAAD,GAlChBhB,EAAqBC,IAASC,YACpBU,EAAAO,UAAAH,GAEEJ,EAAAQ,aAAAJ,GAHhBJ,EAAAM,iBAOAN,KAwCYD,EAAQU,QACRvB,EAAEiB,KAAKJ,EAAQU,OAAQ,SAAAC,GACnB,IAAIN,EAAQJ,EACPE,IAAI,QAxCrBP,IAAAA,UACUgB,KAAA,SAAAP,GAAA,OAAAA,EAAAF,IAAA,UAAAQ,EAAAE,OACNhB,EAAMW,UADAH,GAENP,EAAAA,IAAWa,MAKXH,UAAA,SAAWM,GAIHA,EAAAX,IAAA,iBAMSW,EAAAC,IAAA,YAAA,GACJD,EAAAC,IANL,cAAAb,KAAAc,kBAAAC,UAaYhB,aAAAA,SAAAA,GAEAA,EAAAA,IAAAA,YAAKQ,GACRK,EAAAC,IAAA,cAAA,MAKZ5B,EAAAe,KAzBLc,mBAAAZ,KAAA,SAAAC,EAAAa,GA2BAb,EAAAU,IAAA,cAAAG,EAAA,MAQQb,cAAAA,WAEP,IAAAc,EAAAhC,EAAAiC,IAAAlB,KAAAc,kBAAA,SAAAF,GAAA,OA9CqCA,MAAAA,EA8ElCO,QAASP,EAAMQ,iBA5BnBC,EAAA,EA4BIF,KAAAA,IAAAA,aAFyDR,KAAV,OAAAW,GAAnDD,IAIAE,SAAA,IAAIF,EAAJN,OA3BC,SAAAS,EAAAP,EAAAD,GA+BG,IAAIS,EAAgBR,EAAeD,GA7BvCJ,EAAUa,EAAVb,MAvDsCc,GAwD5Bd,EAAVX,IAAyB,SAxDawB,EAAAN,SA4DtC,OAAAF,EAAAF,OAAA,IAAAC,EACU/B,EAAAiC,IAAAQ,EAAV,SAAAC,GAAA,OACMd,GAAIQ,IA+BEV,KAAMgB,EA7BlBf,MAAAA,EACOE,MAAAA,KAmCI7B,EAAEiC,IAAIQ,EAAU,SAAAC,GAAA,OA7B/BL,GAAAD,IA+BYV,KAAMgB,EACNf,MAAOA,EA7BnBP,MAAesB,EACXJ,SAAAC,EAAAP,EAAAD,EAAA,MAKAQ,CAAAP,EAAA,GAAA,QAIIH,gBAAIW,WAAJ,OAAAxC,EAAAe,KAAAC,IAGIyB,QAiCCzB,IAAI,UA/BT2B,OAAAC,UAAA,KACAC,OAAA,SAAA3B,GAAA,OAAIc,EAAAA,IAAeF,kBAKXgB,eAAAA,WAJ+B,OAAA/B,KAAAc,kBAAZkB,OAAA,SAAAC,EAAArB,GAAA,OAAAqB,EAAArB,EAAAQ,cAAAL,QAAA,IASJmB,kBAAA,SAAYC,GAI/BJ,IAAAA,EAAAA,KAAOJ,IAJwB,QAAAS,kBAAZC,EAAvBF,EAAAG,OAOH,GAAAD,EAqCG,KAA0B,IAAnBA,EAASE,OAnCpBC,EAASH,EAAazB,MAAAX,IAAA,SAAAoC,EAAAN,MAClBpB,EAAM0B,EADYC,OA0CtB,IAAIvC,EAAOC,KAfXyC,EAnBA,SAAAC,EAAAC,EAAAjB,GA2CI,OA1CJiB,EAAA/B,QAtHsCc,EAAAiB,EAAA/B,MAAAX,IAAA,SAAA0C,EAAAZ,OAgK7BY,EAAKpB,SA5BlBtC,EAAA2D,QAAA3D,EAAAiC,IAAAyB,EAAApB,SAAA,SAAAsB,GAAA,OAAAH,EAAAG,EAAA5D,EAAA6D,MAAApB,OAJAqB,IAAgB5D,GACLK,OAAKsB,EAAAA,IAAAA,QAAkBkB,IAAO,UAAAvC,OAAiBwC,IAOtDS,CAAAP,EAAAK,GAOA,OAJAvD,EAAA+D,QAAIR,KAqCAC,GAAgBA,IAjCpBA,GA0CJQ,oBAAqB,SAASN,GAtBdnD,IAbZ,IAUI0D,KAEIC,EAAAR,EAAOL,OACH9C,GACAC,EAAAA,KAAAA,GAF0B0D,EAA9BA,EAAAb,OAMA,OAAArD,EAAA2D,SAAAM,EAlBR,SAAAE,EAAAC,GACA,OAAItD,EAAOwB,SAIPtC,EAAA2D,SAAAS,EAAApE,EAAAiC,IAAAmC,EAAA9B,SAAA,SAAAsB,GAAA,OAAAO,EAAAP,OAiCWQ,EApBET,CAAmBrB,MAIpC+B,SAAA,SAAIb,GAKH,IAkCD,IAAIJ,EAAWrC,KAAKC,IAAI,aAlCvBoC,EAAAd,UAuCGc,EAzCGW,SAAAA,GAAAA,OAAQP,EAAV/B,KAAyBa,EAAA,SAAAgC,GAAA,OAAA7B,EAAA6B,EAAA3C,MAAAX,IAAA,WAAAsD,EAAAxB,QAyCfyB,CAAWnB,EAASd,UApCtC,OApLyCc,GA0LtCoB,OAAA,WAGK,OAAAzD,KAFDc,kBAEOI,IAAA,SAAAN,GAAA,OACHD,KAAAC,EAAAX,IAAA,QACAyD,IAAA9C,EAAAX,IAAOhB,OAA0C0E,IAAA/C,EAAAX,IAAA,OAAA2D,YAAjDhD,EAAAX,IAAA,qBAKR4D,EAAIX,SAAJ7D,MAAAC,QAyCJC,UAvCIuE,MAAA,KACAC,KAAA,OACIb,SAAAA,KACAC,QAAAA,MAGJtD,WAAA,SAAS+C,GA0CT,GAzCH5C,KA7MyCa,IAAA,UAAAf,EAAAkE,SAsPlClE,EAAQgE,MAAO,CAEf,IAAIG,EAAehF,EAAEK,QAtCnB4E,SAAAC,OAASzC,KAAT,SACFW,6BAAJ8B,OAAAC,KAAI/B,UAEAmB,EAAAA,OAA0CxD,KAAAa,IAAA,QAASa,EAAAA,QAAS6B,qBAAAU,KAAlB,SAE9CI,cAAOhC,SAASd,GACZc,IAAAA,EAAWmB,KAAAA,IAAAA,YACdc,EAAAC,EAAAtE,IAAA,YACD,IAAA,IAAAuE,KAAOnC,EA1N+B,IAAAiC,EAAAE,IAAAC,EAAAD,KAAAF,EAAAE,GAwQ9B,OAAO,EAGf,OAAO,GAzCPf,OAAA,WACA,OAAkCK,MAAA9D,KAAUC,IAAA,SAAAyE,UACxC/D,SAAAA,KAAMC,IAAAA,YACN8C,QAAAA,KAAK9C,IAAAA,eAIZ+D,EAAAvF,SAAAwF,WAAAtF,QAzOyCuF,MAA9ChB,IAgPQnC,EAHMoD,EAAAC,QAAAC,cAAA1F,QAIN0E,SAAAA,EAAAA,UAASc,EAAAC,QAAAC,cAAAC,UAAA1F,UAJH2F,QAD6B,KAqDnCvF,KAAM,KA7CVE,eAAY,KACRmE,QAAKnD,KACLsE,OAAIrF,KACAsF,aAAA,SAIQC,WAAAA,SAAAA,GAFJrF,KAAAa,IADe,UAKPiD,IALOwB,EAAAP,QAAnBQ,QAAAzF,EAAAoF,UAOAlF,KAAAa,IAAA,OAAS,IAAA2E,EAAAT,QAASU,KAAA3F,EAAAH,OACrBK,KAAAa,IAAA,UAAA,IAAAiE,EAAAC,QAAAW,uBAAA5F,EAAAkE,UACJhE,KArBsCa,IAAA,SAAA,IAAA8D,EAAA7E,EAAAqF,SAuBvCd,IAAAA,EAAerE,KAASuE,IAAAA,QACpBvE,KAAAa,IAAI4D,6BAAyBkB,GAE7BA,EAAiBlB,eAAe,OAAA,cAAA,cAAA,SAExBzE,KAAAa,IACH,iBACJ,IAAAnB,GACDC,KAAOgG,EA/B4BnF,OAAAV,EAAA8F,gBAqC/BlE,UAAAA,SAAAA,GACAsC,KAAAA,IAAAA,UAAS6B,IAAK5F,IAtCiBwD,OAA3C,WAqFQ,OA1CJkB,GAAAA,KAAAA,IAAAA,MACAE,MAAAA,sCAAOhB,KAAAA,IAAAA,WAAAA,IAAAA,QAAPgB,IADJiB,KAAA,YA8CYC,WAAY/F,KAAKC,IAAI,WAAWqB,GA1C5C0E,QAAAhG,KAAAC,IAAA,QAAAqB,GA4CY0C,QAAShE,KAAKC,IAAI,WAAWwD,SAC7BmC,YAAa5F,KAAKC,IAAI,kBAAkBwD,SA1ChDwC,OAAAA,KAAAA,IAAAA,UAAyBxC,aAYrByC,EAAS9G,SAAY+G,KAAA7G,QACrB8G,QAAA,KA6CJC,SAAU,IAzCNxG,WAAA,SAASC,GACTE,KAAAsG,eAAAxG,EAAAwG,eACAX,KAAAA,SA4CA3F,KAAK6E,MAAMzE,GAAG,2BAA4BJ,KAAKuG,WAAYvG,OAtCnDQ,OAAAA,WA4CR,IAAIkB,EAAW1B,KAAK6E,MAAM5E,IAAI,YAtC9BR,EAASiC,EAATzB,IAAA,UA0CIuG,EAAcC,EAAE,SAvCxBhD,SAAQ,YACJiD,SAAO1G,KAAA2G,KAEHC,EAAAA,EAAAA,UACAd,SAAM,cACNC,OACAC,SAAAA,GAEAJ,EAAAA,OACAT,EAAAA,UARJ0B,IAAA,cAAA,QAUHC,KAAA,mBA0CGpF,EAASzB,IAAI,UAAUC,KAAK,SAAAC,GAvCpC4G,EAAAC,OAAA7G,EAAAF,IAAA,SAAA,KAAAR,EAAAU,EAAAF,IAAA,SAAA,WA0CQ,IAAIF,EAAOC,KA9BfH,GARJ4G,EAAA,aAyCaC,SAASK,GACTD,KAAK,2BAvCdZ,MAAAA,WACAE,EAD0Ca,SA0C9BlH,EAAKmH,QAAQ,iBAAkBxF,KArC/ByF,EAAApC,QAAAqC,2BAERR,OAAA,EAAAS,EAAAtC,SAAA,YACAuC,WAAc,sBARwBC,SAAA,WAkD1BR,EAAaE,YApCrBvF,OAAAA,EAAAA,EAAAA,SAAAA,UAyCI4F,WAAY,eAvChB7H,SAASiC,WAyCD3B,EAAK4G,IAAIa,SAvCjBhB,EAAAA,YAAgBgB,cAcpB9F,EAAAA,QAAa+F,EAAUvH,KAGvBF,KAAA6E,MAAI9E,IAAO,WAAXG,KAAA,WAgCIH,EAAK4G,IAAIK,OA9BTU,EAAAA,SAIIX,SAAaE,QACRC,KAAAA,EAAL,UAAaS,KAAA,MAAkBjG,OAA/B0C,KAAK8C,yCAKLN,KAAAA,MAAO3G,IAAA,UACPqH,KAAAA,cAQAC,WAAAA,WACIxH,IAAAA,EAAAA,KACA0G,EAAAA,KAAE5B,MAAA5E,IAAYuH,SACdxD,EAAAhE,KAAA6E,MAAA5E,IAAA,WACH2H,EAAA5H,KAAA2G,IAAAjG,KAAA,WA6BJoD,GAKL2C,EAAEoB,KAAK/D,EAAMgE,aAAaC,iBAAiBC,KAAK,SAAAC,GAnB5CjE,EAAA9D,KAAKqG,SAAAA,EAALvF,GACH,IAAAkH,EAAAC,EAAApH,SAAAhB,EAAAsG,SA5EqC+B,EAAA,EAAAF,EAmG1BnE,EAAOhE,EAAK8E,MAAM5E,IAAI,QApBtCwG,EAAAoB,KAAA/D,EAAAgE,aAAAO,SAAAF,EAAApE,EAAAmE,OAAAF,KAAA,SAAAM,GAsBgB,IAAIC,EAASxI,EAAKuG,eAAekC,aACjCD,EAAOE,MAAQ1I,EAAKsG,SApBxBkC,EAAAG,OAAA5E,EAAW6E,kBAAAL,EAAAvE,EAAAqE,EAAAG,EAAAE,OACf1I,EAAO6I,UAAXN,EAAAC,EAAAM,WAAA,MAAA9E,EAAAoE,EAAAC,GACItE,EAAAA,EAAQ9C,IACRgD,QACA4D,OAAAA,YAWIkB,EAAIZ,SAAaC,KAAOpH,QAExBgI,sBACAtC,yPAQCuC,sBARD,yDAUPnJ,WAhBD,SAAAC,GAiBHE,KAAA2G,IAAA7G,EAAAmJ,SA/GLjJ,KAAAkJ,UAsIIA,OAAQ,WACJ,IAAI/I,EAAQH,KAAK6E,MAjBrBiE,GAkBe3I,EAAMF,IAAI,QAlBzB6I,KAA0B1J,IAAAA,KAAS+G,oBACnCgD,EAAA,KAaC,GALDH,EAAAA,KAAAA,UAAuBI,OAAA,WAefjJ,EAAMU,IAAI,QAAS4F,EAAEzG,MAAMqJ,SAxBYlJ,aAAAqF,EAAAT,QAAAuE,qBA6BvCH,EAAmB1C,EAAExH,EAAEsK,SAASvJ,KAAK+I,sBAAhB9J,CAAuCe,KAAK6E,MAAMpB,gBAb/EyF,GAAQ/I,aAAWqF,EAAAT,QAAAyE,oBAAA,CACf,IAEIC,EAFQxK,EAAAiC,IAAK2D,KAAjB8B,IAAAjG,KAAA,iBAAA,SAAAgJ,GAAA,OAAAjD,EAAAiD,GAAAL,QAEuBM,KAASjJ,MAChCyI,EAAIA,EAeIlK,EAAEsK,SAASvJ,KAAKgJ,sBAAhB/J,EAbRa,QAAA8J,KAkBAT,EAAiBU,YAAYJ,GAXzBN,IAAAA,EAAAA,KAEAW,EAAA3C,EAAApC,QAAgB7D,2BAiBR0F,OAAO,EAAAS,EAAAtC,SAAG,yBAfd6E,WAAAA,cACJT,SAAAA,WAEQrJ,EAAS8J,IAAAA,YAAAA,GAFjBH,EAAAM,OAKHZ,EAAAa,OACDb,EAAAA,MAAiBU,OAeD9J,EAAK4G,IAAIjG,KAAK,uBAAuBsJ,UAVjDF,OAAO,EAAAzC,EAAAtC,SAAA,8BAGC6B,WAAO,SACPU,SAAY,WAERnH,EAAUU,IAAA,YAAV,GACA4I,EAAAM,OACAZ,EAAAa,OACEvD,EAAFzG,MAAA+J,OACAhK,EAASW,IAATA,KAAc,4BAAdsJ,cAQA7J,KAAAA,IAAAA,QAAAA,EAAUwG,KAGVF,EAAAA,IAAE,aACF1G,EAASW,OACZX,EAAA4G,IAAAjG,KAAA,4BAAAqJ,SAaThK,EAAK4G,IAAIjG,KAAK,uBAAuBqJ,OAPzCZ,EAAiBW,QAIbL,EAAAA,MAAAA,MAAAA,MAAAA,eAAA,SAAA9B,GACA5H,EAAAW,KAAAX,IAAc4H,GAAAyB,OAAA,WAFlBjJ,EAGOU,IAAA8G,EAAAsC,WAAAxD,EAAAzG,MAAAqJ,eAMPpK,EAAsBG,SAAA+G,KAAtB7G,QACI6J,UAAAA,cAECtJ,WAAA,SAFDC,GAGHE,KAJDkJ,UAeJA,OAAQ,WANRgB,IAAAA,EAAW,IADwC1E,EAAAT,QAAAoF,cAU3CtF,MAAO7E,KAAK6E,MAAM5E,IAAI,UAN1BmK,EAAAlB,SACHlJ,KALkD2G,IAAAK,OAAAoD,EAAAzD,KAQ/C,IAEI9B,EAFJ7E,KAEW6E,MAAKA,IAAM5E,QAAXA,IAAA,UADiCD,KAAvB2G,IAGrByD,KAAAA,aACAC,IAAK1D,iBASAzG,KAAK,SAASoK,GAPnB,IAAAxB,GACI/I,MAAJP,EAAA+K,GAAAD,GASYrB,SAAUxC,EAAEzG,aAzBuBwK,EAAvDpL,SAAA+G,KAAA7G,QAmCI4K,UAAW,sBAEXrK,WAAY,SAASC,GAHrB0K,KAAAA,MAAAA,GAAAA,mBAAiCrE,KAAK7G,OAAOU,OAG7CH,OAAAA,WAEIG,KAAA2G,IAAK9B,WAAS2C,SAOd,IAAIiD,EAAczK,KAAK6E,MAAM/D,kBAJjCoI,GAAAA,EAAQnI,OAARmI,CAKIlJ,KAAAyI,MAAKgC,KAAAA,EAAY1J,EAAQA,QACrBf,KAAA0I,OAAA,GAAA1I,KAAA6E,MAAA9B,iBAOJ,IAAIhD,EAAOC,KAFX0K,EAAKhC,EAALiC,OAAmBD,UAAW3H,MAAAA,KAAAA,OAA9B/C,KAAAyI,MAAA,MAEAmC,EAAW1L,EAAA2L,IAAXD,WAAAE,WAAA,SAAAC,GAAA,OAAAA,EAAAC,EAAAD,EAAAE,KAGAC,EAAIR,EAAUxL,MAAGyL,KAAOD,MAAVzK,IAAoBkL,cAEUC,EAAKnM,EAAM8L,KAAX9L,EAAAoM,MAAAH,EAAA,MAAAjM,EAAAiB,KAA5CuK,EAAA,SAAA7J,EAAAI,GAQI,IAAIiK,EAAIG,EAAapK,EAAQ,GANjCsK,EAAA7E,EAAA,WAAA8E,WAAAC,KACAzL,EAAImL,IAAAA,OAQIzE,EAAE,SANVgF,SAAA,SACIL,KAAAA,EAAenM,IAAEyM,UACdjB,IAAAA,OAAaQ,EAAAK,MAYpB,IAAIK,EAAMzM,EADV0M,OAAA5L,KAAA2G,IAAA,IACAK,OAAI2E,OAGChE,KAAK,QAAS3H,KAAKyI,OAKxBd,KAAA,SAAA3H,KAAA0I,OAAA,IACA1B,OAAI6E,KAHClE,KAAK,YAAa,qBAuBlBhF,GALkBgJ,EANZG,UAOH,aACAC,KAAArB,EAAIsB,MAAAA,IACJC,QACAtJ,OAAAA,QAAYgF,KAAA,QAAK1I,QAA2B0I,KAAA,IAAAiD,GAE5Ce,EACAhJ,UAAKuJ,UAbFH,KAAXb,GAGKe,QAaLtJ,OAAKqE,KAXAW,KAAK,QAAS,QAanBhF,KACKqE,YADL,SAAA+D,GAAA,MAAA,aAEgBA,EAAAC,EAFhB,IAEgBD,EAAAE,EAFhB,MAEgB7K,GAAA,YAAQmB,SAAAA,GACnBoG,IAAKqE,EACA/M,EAAAoM,MAAetL,EAAA8E,MAAA5B,oBAAAI,GAAA,MACpByD,EAAKqF,OAAA,SAAApB,GAAA,YAAAqB,IAAAnN,EAAAyB,KAAAsL,EAAA,SAAA1K,GAAA,OAAAA,IAAAyJ,EAAAzJ,OAAA4K,MAAA,OAAA,UALV9L,GAAA,WAAA,WAMHuC,EAAAuJ,MAAA,OAAA,WAGLvJ,EAAAqE,OAAA,UAAAW,KAAA,IAAA,GATQhF,EAYJ0J,OAAAA,QACAnC,KAAAA,KAAW,SAAAa,GAAA,OADuCA,EAAAxJ,UAAA,GAAA,KATzCoG,KAAK,KAAM,GAYpB2E,KACI,cAAA,SAAAvB,GAAA,OAAAA,EAAAxJ,SACA,MAAA,UAZKuF,KAAK,SAAAiE,GAAA,OAAKA,EAAEpK,WAOrB0L,EAA6BjN,SAAS+G,KAAK7G,QAiBvC4K,UAAA,YAdJoC,SAiBI,sTAMAzM,WAAA,SAAAC,GACAE,KAAAsG,eAAc,IAAAxB,EAAAC,QAAOwH,cAAAA,KAAwBC,IAAAA,QAAAA,SAGjCC,KAAAA,qBADJ,IAAAjC,GAEIkC,MAAAA,KAAO7H,MAFX5E,IAAA,oBAII0M,KAAAA,2BAAelG,EAAA,YAAAgF,SAAA,UAIfiB,KAAAA,MAAAA,IAAO,kBAFXtM,GAAA,mBAAAJ,KAAA4M,mBAAA5M,MAAA,IAAAD,EAMAC,KACIyM,KAAAA,MAAAA,IAAK,UADTvM,KAAA,SAAA4D,GAEI4I,EAAAA,IAAAA,SAAOG,KAFX9M,IAOI0M,KAAAA,OAAKK,EAAA/H,QAAAwH,wBADTC,+BAIIG,IAAAA,OAEJD,MAAA,OACID,KAAK,OACLC,cAFJ,KAMAD,IAAA,UACIA,MAAK,UACLC,KAAO,QACP5G,cAHJ,YAOI2G,IAAK,UACLC,MAAO,UACP5G,KAAM,QAEV6G,cAAA,YAGI7G,IAAM,UA9ClB4G,MAAA,UA3B8C5G,KAAA,QAmDlC6G,cAAe,YA+BvBI,IAAAA,UACAlI,MAAO,UADXiB,KAAA,QAzBY6G,cAAe,YA+B3BF,IAAA,UACI1M,MAAJ,UA3BY+F,KAAM,QA6Bd9B,cAAea,YAGX3E,IAAK,cACN8G,MAAOP,cADdX,KAAA,UAQIkH,IAAAA,uBACFN,MAAU1F,yBA9BAlB,KAAM,eAsClBoD,OAAA,WA7BA,IAAI6D,EAAmB,IAAIE,GAgC3BpI,MAAIqI,KAAAA,MAAAA,IAAe,oBAIX3F,EAAAA,SAAAA,OAAUwF,EAAApG,KAGT,IAAA5G,EAAAC,KA9BLgE,EAAUjE,EAAK8E,MAAM5E,IAAI,WAkC7BkN,EAAAA,EAAAA,SAAAzG,SAAiBwG,KAAavG,4BA/B9B3C,EAAQ9D,KAAK,SAAAiI,GAkCbiF,EAAApG,OAAAP,EAAA,QAAAK,KAAAqB,EAAAkF,eAEA5G,EAhCKlF,WAkCL+L,QACA3F,KAAKiF,UAAAA,GAEL,IAAAI,EAAAvG,EAAA,SAAAgF,SAAA,SACAhF,EAAA,UAAIqD,OAAOkD,EAAAhG,OAAaI,KAAAA,6BAGhBrH,EAAA8E,MAAA5E,IAAA,UAAAC,KAAA,SAAA4D,GAjCJ/D,EAAKwN,UAAUzJ,KAMnB,IAAIqJ,EAAW1G,EAAEzG,KAAKsM,UAAUb,SAAS,QAErCyB,EAAe/F,EAAApC,QAAaqC,2BAExBR,OAAO,EAAAS,EAAAtC,SAAG,SACVuC,WAAY,eACZC,SAAU,WACNd,EAAE,YAAYe,SACd2F,EAAS3F,aAwCTZ,EAAAA,QAAOsG,EAAAvG,IAAAE,IAAA,QAAA,UAFXJ,EAAA,WArBJO,OAAAmG,GA2BQ7F,KAAAA,qBAAY4B,SACZtC,EAAAA,WAAAA,OAAO5G,KAAAwN,qBAAG7G,KAGT3G,KAAA4M,qBAGT,IAAA9C,EAnCJ3C,EAAApC,QAAAqC,2BAxI8CE,WAAA,iBAgKlCV,MAAO,qBA0Cf1B,WAAeL,eACd4I,OAAAA,EAAAA,EAAAA,SAAAA,SACE9N,SAAWuF,WACdwI,OAAAC,SAAA,gEAQQC,gBAAAA,UAAAA,YAMhBC,GAAA,SAAA,QAxCQC,KA2CRP,EAAAA,KAAAA,EAAW,SAAAxJ,GACP+J,EAAW/J,GAAX,WACIgK,EAAAA,MAAAA,IAAa,eAAehK,GAzCxBhE,EAAK8E,MAAM5E,IAAI,UAAUC,KAAK,SAAA4D,GA2CtCA,EAAAjD,IAAA,OAAAkD,QAKIuC,eAAAA,EAAAA,IAAgBvG,KAAKuG,mBAAAA,GAEzB0H,EAAAA,IAAAA,KAAAA,QAAc,gBACdjO,EAAAA,sCAAgCiH,OAAOgH,EAAAA,MAI/BC,eAAIjC,SAAAA,GA1CZ,OAAOhM,KAAKQ,OAAO0N,UAAaC,EAAKC,cAA9B,WAAwDpO,KAAKQ,OAAO0N,UAAU,YAgDjEG,oBAAA,SAAYrC,GAAoB,IAAArM,EAAAK,KAAA6E,MAAA5E,IAAMqB,QAANgN,EAA3B3O,EAAkDyM,IAAAA,QAAvDlH,EACPgH,KAAMrH,MAAQ5E,IAAA,WACtBN,EAXL8N,iBAYU/L,EAAAzB,IAAA,WACFf,EAAAA,KAAAA,EACK0M,MAAO7L,IAAKyN,KAAAA,SAAAA,MAzCzBe,WAAAA,WAiDJD,EAjDI,uBAEOA,EAFP,2BAE2CpJ,EAAQjF,IAAI,QAFvD,4CAIQuO,GAAI,WAiDhB5B,iBASIjK,UAAAA,SAAQ8L,GACJ,IAAA1O,EAAAC,KACA+N,EAAIpO,KAAOI,MAAK8E,IAAM5E,kBAGtBF,EAAA8E,MAAA0I,UAAI9K,GA9CR,IAAIuL,EAAa,IAAI9H,GAiDjBrB,MAAA4J,EACAnI,eAAI7D,EAAa1B,iBAyByB,OAlB9ByN,EAAAA,GAAAA,iBAAIzO,EAAWsO,oBAAAtO,GACX6N,EAAAA,2BAAAA,OAAAA,EAAAA,KACAc,EAAAA,IAAAA,MACH,WAJL,IAAAC,EALJZ,EAAAzK,SAAAmL,EAAAxO,IAAA,YAAAA,IAAA,WADJ+L,EAaO/M,EAAAoM,MAAA0C,EAAA9K,oBAAA0L,GAAA,MAnDHzP,EAuDJ0M,OAAA7L,EAAAyN,qBAAA7G,IAAA,IACEkB,UAAK6G,UACHvC,OAAKyC,SAAAA,GAAAA,YAAUxC,IAAfnN,EAAeyB,KAAAsL,EAAA,SAAA1K,GAAA,OAAAA,IAAAyJ,EAAAzJ,OACX4K,MAAA,OAAA,SApDR,WAuDIhN,EACA0M,OAAIiD,EAAAA,qBAAmBpM,IAAc,IACjCqJ,UAAI2C,UACA/M,MAAAA,OAAAA,UAD8B+M,GAWlCK,mBAAAA,WAEInP,IAAAA,EAAAA,KAEIoO,EAAA/N,KAAA6E,MAAA5E,IAAA,kBACA+D,EAAAhE,KAAA6E,MAAA5E,IAAA,WAEAf,EAAA0M,OAAA5L,KAAAwN,qBAAqBF,IAAP,IAAdxB,UAAA,UAEA1L,GAAA,QAAA,SAAA2K,EAAAT,GAEArG,IAAAA,EAAAA,EAAAA,MAAAA,IAAAA,QAEAiB,EAAAnF,EAAA8E,MAAA5E,IAAA,WACAgE,EAAAA,EAAAA,kBAAA8G,GArDZ2D,EAAoBjI,EAAEsI,WAyDVtM,EAAA1B,QAAA,GACAwN,WACAS,qBADA,gCApDwBjP,EAAK8E,MAAM5E,IAAI,QAAQA,IAAI,QAoDnD,SAGAwO,EAAAA,OAHA,4EApBZD,GAAA,WAjBJZ,aA3BJc,EAAAO,SAAA,MA6EJhJ,EAAwBA,SAAAA,GAlDhBQ,EAAEoB,KAAK6G,GAAmB1G,KAAK,SAAA4G,GAC3B,GAAKA,EAAL,CAKA,IAAIC,EAAa5P,EAAEiC,IAAIuB,EAAc,SAAAf,GACjC,IAAI+M,EAAW,IAAI5K,GACfnC,SAAUA,EACVsC,QAASA,EACTD,KAAMhE,EAAK8E,MAAM5E,IAAI,kBAGzB,OADAF,EAAKwN,UAAUkB,GACRA,IAIXxP,EAAEiB,KAAK2O,EAAY,SAACJ,EAAUzN,GAC1B8N,WAAW,WAEPnP,EAAK8N,iBAAiBgB,EAASxO,IAAI,YAAYA,IAAI,WACnDwG,EAAEoB,KAAKlI,EAAKuP,MAAMhK,EAASlB,IAAUgE,KAAK,SAAAmH,GAItC,IAAIjK,EAAUiK,EAAO7B,QAEjBrJ,EAAeiB,EAAQjF,IAAI,gBAE/BgE,EAAaiB,QAAUA,EAGvBjB,EAAatE,KAAO,KAEpBsE,EAAamL,MAAQrP,EAAKS,OAAO6O,oBAGjC,IAAIL,EAAYM,EAAAvK,QAAOwK,qBAAqBtL,EAAclE,EAAM,MAChEiP,EAAUQ,qBAEVf,EAAS5N,IAAI,QAASmO,MAEnB,IAARhO,wBAQnBiF,uBAAwBA,EACxBoG,2BAA4BA","file":"../../scripts/viz/sweepster.js","sourcesContent":["import _l from \"utils/localization\";\n/**\n * Visualization and components for Sweepster, a visualization for exploring a tool's parameter space via\n * genomic visualization.\n */\n\nimport * as _ from \"libs/underscore\";\nimport * as d3 from \"libs/d3\";\nimport util from \"viz/trackster/util\";\nimport visualization from \"viz/visualization\";\nimport tracks from \"viz/trackster/tracks\";\nimport tools from \"mvc/tool/tools\";\nimport data from \"mvc/dataset/data\";\nimport config from \"utils/config\";\nimport mod_icon_btn from \"mvc/ui/icon-button\";\n/**\n * A collection of tool input settings. Object is useful for keeping a list of settings\n * for future use without changing the input's value and for preserving inputs order.\n */\nvar ToolInputsSettings = Backbone.Model.extend({\n    defaults: {\n        inputs: null,\n        values: null\n    }\n});\n\n/**\n * Tree for a tool's parameters.\n */\nvar ToolParameterTree = Backbone.Model.extend({\n    defaults: {\n        tool: null,\n        tree_data: null\n    },\n\n    initialize: function(options) {\n        // Set up tool parameters to work with tree.\n        var self = this;\n        this.get(\"tool\")\n            .get(\"inputs\")\n            .each(input => {\n                // Listen for changes to input's attributes.\n                input.on(\n                    \"change:min change:max change:num_samples\",\n                    input => {\n                        if (input.get(\"in_ptree\")) {\n                            self.set_tree_data();\n                        }\n                    },\n                    self\n                );\n                input.on(\n                    \"change:in_ptree\",\n                    input => {\n                        if (input.get(\"in_ptree\")) {\n                            self.add_param(input);\n                        } else {\n                            self.remove_param(input);\n                        }\n                        self.set_tree_data();\n                    },\n                    self\n                );\n            });\n\n        // If there is a config, use it.\n        if (options.config) {\n            _.each(options.config, input_config => {\n                var input = self\n                    .get(\"tool\")\n                    .get(\"inputs\")\n                    .find(input => input.get(\"name\") === input_config.name);\n                self.add_param(input);\n                input.set(input_config);\n            });\n        }\n    },\n\n    add_param: function(param) {\n        // If parameter already present, do not add it.\n        if (param.get(\"ptree_index\")) {\n            return;\n        }\n\n        param.set(\"in_ptree\", true);\n        param.set(\"ptree_index\", this.get_tree_params().length);\n    },\n\n    remove_param: function(param) {\n        // Remove param from tree.\n        param.set(\"in_ptree\", false);\n        param.set(\"ptree_index\", null);\n\n        // Update ptree indices for remaining params.\n        _(this.get_tree_params()).each((input, index) => {\n            // +1 to use 1-based indexing.\n            input.set(\"ptree_index\", index + 1);\n        });\n    },\n\n    /**\n     * Sets tree data using tool's inputs.\n     */\n    set_tree_data: function() {\n        // Get samples for each parameter.\n        var params_samples = _.map(this.get_tree_params(), param => ({\n            param: param,\n            samples: param.get_samples()\n        }));\n        var node_id = 0;\n\n        var // Creates tree data recursively.\n        create_tree_data = (params_samples, index) => {\n            var param_samples = params_samples[index],\n                param = param_samples.param,\n                param_label = param.get(\"label\"),\n                settings = param_samples.samples;\n\n            // Create leaves when last parameter setting is reached.\n            if (params_samples.length - 1 === index) {\n                return _.map(settings, setting => ({\n                    id: node_id++,\n                    name: setting,\n                    param: param,\n                    value: setting\n                }));\n            }\n\n            // Recurse to handle other parameters.\n            return _.map(settings, setting => ({\n                id: node_id++,\n                name: setting,\n                param: param,\n                value: setting,\n                children: create_tree_data(params_samples, index + 1)\n            }));\n        };\n\n        this.set(\"tree_data\", {\n            name: \"Root\",\n            id: node_id++,\n            children: params_samples.length !== 0 ? create_tree_data(params_samples, 0) : null\n        });\n    },\n\n    get_tree_params: function() {\n        // Filter and sort parameters to get list in tree.\n        return _(\n            this.get(\"tool\")\n                .get(\"inputs\")\n                .where({ in_ptree: true })\n        ).sortBy(input => input.get(\"ptree_index\"));\n    },\n\n    /**\n     * Returns number of leaves in tree.\n     */\n    get_num_leaves: function() {\n        return this.get_tree_params().reduce((memo, param) => memo * param.get_samples().length, 1);\n    },\n\n    /**\n     * Returns array of ToolInputsSettings objects based on a node and its subtree.\n     */\n    get_node_settings: function(target_node) {\n        // -- Get fixed settings from tool and parent nodes.\n\n        // Start with tool's settings.\n        var fixed_settings = this.get(\"tool\").get_inputs_dict();\n\n        // Get fixed settings using node's parents.\n        var cur_node = target_node.parent;\n        if (cur_node) {\n            while (cur_node.depth !== 0) {\n                fixed_settings[cur_node.param.get(\"name\")] = cur_node.value;\n                cur_node = cur_node.parent;\n            }\n        }\n\n        // Walk subtree starting at clicked node to get full list of settings.\n        var self = this;\n\n        var get_settings = (node, settings) => {\n            // Add setting for this node. Root node does not have a param,\n            // however.\n            if (node.param) {\n                settings[node.param.get(\"name\")] = node.value;\n            }\n\n            if (!node.children) {\n                // At leaf node, so return settings.\n                return new ToolInputsSettings({\n                    inputs: self.get(\"tool\").get(\"inputs\"),\n                    values: settings\n                });\n            } else {\n                // At interior node: return list of subtree settings.\n                return _.flatten(_.map(node.children, c => get_settings(c, _.clone(settings))));\n            }\n        };\n\n        var all_settings = get_settings(target_node, fixed_settings);\n\n        // If user clicked on leaf, settings is a single dict. Convert to array for simplicity.\n        if (!_.isArray(all_settings)) {\n            all_settings = [all_settings];\n        }\n\n        return all_settings;\n    },\n\n    /**\n     * Returns all nodes connected a particular node; this includes parents and children of the node.\n     */\n    get_connected_nodes: function(node) {\n        var get_subtree_nodes = a_node => {\n            if (!a_node.children) {\n                return a_node;\n            } else {\n                // At interior node: return subtree nodes.\n                return _.flatten([a_node, _.map(a_node.children, c => get_subtree_nodes(c))]);\n            }\n        };\n\n        // Get node's parents.\n        var parents = [];\n\n        var cur_parent = node.parent;\n        while (cur_parent) {\n            parents.push(cur_parent);\n            cur_parent = cur_parent.parent;\n        }\n\n        return _.flatten([parents, get_subtree_nodes(node)]);\n    },\n\n    /**\n     * Returns the leaf that corresponds to a settings collection.\n     */\n    get_leaf: function(settings) {\n        var cur_node = this.get(\"tree_data\");\n\n        var find_child = children => _.find(children, child => settings[child.param.get(\"name\")] === child.value);\n\n        while (cur_node.children) {\n            cur_node = find_child(cur_node.children);\n        }\n        return cur_node;\n    },\n\n    /**\n     * Returns a list of parameters used in tree.\n     */\n    toJSON: function() {\n        // FIXME: returning and jsonifying complete param causes trouble on the server side,\n        // so just use essential attributes for now.\n        return this.get_tree_params().map(param => ({\n            name: param.get(\"name\"),\n            min: param.get(\"min\"),\n            max: param.get(\"max\"),\n            num_samples: param.get(\"num_samples\")\n        }));\n    }\n});\n\nvar SweepsterTrack = Backbone.Model.extend({\n    defaults: {\n        track: null,\n        mode: \"Pack\",\n        settings: null,\n        regions: null\n    },\n\n    initialize: function(options) {\n        this.set(\"regions\", options.regions);\n        if (options.track) {\n            // FIXME: find a better way to deal with needed URLs:\n            var track_config = _.extend(\n                {\n                    data_url: `${Galaxy.root}dummy1`,\n                    converted_datasets_state_url: `${Galaxy.root}dummy2`\n                },\n                options.track\n            );\n            this.set(\"track\", tracks.object_from_template(track_config, {}, null));\n        }\n    },\n\n    same_settings: function(a_track) {\n        var this_settings = this.get(\"settings\");\n        var other_settings = a_track.get(\"settings\");\n        for (var prop in this_settings) {\n            if (!other_settings[prop] || this_settings[prop] !== other_settings[prop]) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    toJSON: function() {\n        return {\n            track: this.get(\"track\").to_dict(),\n            settings: this.get(\"settings\"),\n            regions: this.get(\"regions\")\n        };\n    }\n});\n\nvar TrackCollection = Backbone.Collection.extend({\n    model: SweepsterTrack\n});\n\n/**\n * Sweepster visualization model.\n */\nvar SweepsterVisualization = visualization.Visualization.extend({\n    defaults: _.extend({}, visualization.Visualization.prototype.defaults, {\n        dataset: null,\n        tool: null,\n        parameter_tree: null,\n        regions: null,\n        tracks: null,\n        default_mode: \"Pack\"\n    }),\n\n    initialize: function(options) {\n        this.set(\"dataset\", new data.Dataset(options.dataset));\n        this.set(\"tool\", new tools.Tool(options.tool));\n        this.set(\"regions\", new visualization.GenomeRegionCollection(options.regions));\n        this.set(\"tracks\", new TrackCollection(options.tracks));\n\n        var tool_with_samplable_inputs = this.get(\"tool\");\n        this.set(\"tool_with_samplable_inputs\", tool_with_samplable_inputs);\n        // Remove complex parameters for now.\n        tool_with_samplable_inputs.remove_inputs([\"data\", \"hidden_data\", \"conditional\", \"text\"]);\n\n        this.set(\n            \"parameter_tree\",\n            new ToolParameterTree({\n                tool: tool_with_samplable_inputs,\n                config: options.tree_config\n            })\n        );\n    },\n\n    add_track: function(track) {\n        this.get(\"tracks\").add(track);\n    },\n\n    toJSON: function() {\n        return {\n            id: this.get(\"id\"),\n            title: `Parameter exploration for dataset '${this.get(\"dataset\").get(\"name\")}'`,\n            type: \"sweepster\",\n            dataset_id: this.get(\"dataset\").id,\n            tool_id: this.get(\"tool\").id,\n            regions: this.get(\"regions\").toJSON(),\n            tree_config: this.get(\"parameter_tree\").toJSON(),\n            tracks: this.get(\"tracks\").toJSON()\n        };\n    }\n});\n\n/**\n * --- Views ---\n */\n\n/**\n * Sweepster track view.\n */\nvar SweepsterTrackView = Backbone.View.extend({\n    tagName: \"tr\",\n\n    TILE_LEN: 250,\n\n    initialize: function(options) {\n        this.canvas_manager = options.canvas_manager;\n        this.render();\n        this.model.on(\"change:track change:mode\", this.draw_tiles, this);\n    },\n\n    render: function() {\n        // Render settings icon and popup.\n        // TODO: use template.\n        var settings = this.model.get(\"settings\");\n\n        var values = settings.get(\"values\");\n\n        var settings_td = $(\"<td/>\")\n            .addClass(\"settings\")\n            .appendTo(this.$el);\n\n        var settings_div = $(\"<div/>\")\n            .addClass(\"track-info\")\n            .hide()\n            .appendTo(settings_td);\n\n        settings_div.append(\n            $(\"<div/>\")\n                .css(\"font-weight\", \"bold\")\n                .text(\"Track Settings\")\n        );\n        settings.get(\"inputs\").each(input => {\n            settings_div.append(`${input.get(\"label\")}: ${values[input.get(\"name\")]}<br/>`);\n        });\n        var self = this;\n\n        var run_on_dataset_button = $(\"<button/>\")\n            .appendTo(settings_div)\n            .text(\"Run on complete dataset\")\n            .click(() => {\n                settings_div.toggle();\n                self.trigger(\"run_on_dataset\", settings);\n            });\n\n        var icon_menu = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: _l(\"Settings\"),\n                icon_class: \"gear track-settings\",\n                on_click: function() {\n                    settings_div.toggle();\n                }\n            },\n            {\n                title: _l(\"Remove\"),\n                icon_class: \"cross-circle\",\n                on_click: function() {\n                    self.$el.remove();\n                    $(\".tooltip\").remove();\n                    // TODO: remove track from viz collection.\n                }\n            }\n        ]);\n        settings_td.prepend(icon_menu.$el);\n\n        // Render tile placeholders.\n        this.model.get(\"regions\").each(() => {\n            self.$el.append(\n                $(\"<td/>\")\n                    .addClass(\"tile\")\n                    .html($(\"<img/>\").attr(\"src\", `${Galaxy.root}images/loading_large_white_bg.gif`))\n            );\n        });\n\n        if (this.model.get(\"track\")) {\n            this.draw_tiles();\n        }\n    },\n\n    /**\n     * Draw tiles for regions.\n     */\n    draw_tiles: function() {\n        var self = this;\n        var track = this.model.get(\"track\");\n        var regions = this.model.get(\"regions\");\n        var tile_containers = this.$el.find(\"td.tile\");\n\n        // Do nothing if track is not defined.\n        if (!track) {\n            return;\n        }\n\n        // When data is ready, draw tiles.\n        $.when(track.data_manager.data_is_ready()).then(data_ok => {\n            // Draw tile for each region.\n            regions.each((region, index) => {\n                var resolution = region.length() / self.TILE_LEN;\n                var w_scale = 1 / resolution;\n                var mode = self.model.get(\"mode\");\n                $.when(track.data_manager.get_data(region, mode, resolution, {})).then(tile_data => {\n                    var canvas = self.canvas_manager.new_canvas();\n                    canvas.width = self.TILE_LEN;\n                    canvas.height = track.get_canvas_height(tile_data, mode, w_scale, canvas.width);\n                    track.draw_tile(tile_data, canvas.getContext(\"2d\"), mode, region, w_scale);\n                    $(tile_containers[index])\n                        .empty()\n                        .append(canvas);\n                });\n            });\n        });\n    }\n});\n\n/**\n * Tool input (parameter) that enables both value and sweeping inputs. View is unusual as\n * it augments an existing input form row rather than creates a completely new HTML element.\n */\nvar ToolInputValOrSweepView = Backbone.View.extend({\n    // Template for rendering sweep inputs:\n    number_input_template:\n        '<div class=\"form-row-input sweep\">' +\n        '<input class=\"min\" type=\"text\" size=\"6\" value=\"<%= min %>\"> - ' +\n        '<input class=\"max\" type=\"text\" size=\"6\" value=\"<%= max %>\">' +\n        ' samples: <input class=\"num_samples\" type=\"text\" size=\"1\" value=\"<%= num_samples %>\">' +\n        \"</div>\",\n\n    select_input_template: '<div class=\"form-row-input sweep\"><%= options %></div>',\n\n    initialize: function(options) {\n        this.$el = options.tool_row;\n        this.render();\n    },\n\n    render: function() {\n        var input = this.model;\n        var type = input.get(\"type\");\n        var single_input_row = this.$el.find(\".form-row-input\");\n        var sweep_inputs_row = null;\n\n        // Update tool inputs as single input changes.\n        single_input_row.find(\":input\").change(function() {\n            input.set(\"value\", $(this).val());\n        });\n\n        // Add row for parameter sweep inputs.\n        if (input instanceof tools.IntegerToolParameter) {\n            sweep_inputs_row = $(_.template(this.number_input_template)(this.model.toJSON()));\n        } else if (input instanceof tools.SelectToolParameter) {\n            var options = _.map(this.$el.find(\"select option\"), option => $(option).val());\n\n            var options_text = options.join(\", \");\n            sweep_inputs_row = $(\n                _.template(this.select_input_template)({\n                    options: options_text\n                })\n            );\n        }\n        sweep_inputs_row.insertAfter(single_input_row);\n\n        // Add buttons for adding/removing parameter.\n        var self = this;\n\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                {\n                    title: _l(\"Add parameter to tree\"),\n                    icon_class: \"plus-button\",\n                    on_click: function() {\n                        input.set(\"in_ptree\", true);\n                        single_input_row.hide();\n                        sweep_inputs_row.show();\n                        $(this).hide();\n                        self.$el.find(\".icon-button.toggle\").show();\n                    }\n                },\n                {\n                    title: _l(\"Remove parameter from tree\"),\n                    icon_class: \"toggle\",\n                    on_click: function() {\n                        // Remove parameter from tree params where name matches clicked paramter.\n                        input.set(\"in_ptree\", false);\n                        sweep_inputs_row.hide();\n                        single_input_row.show();\n                        $(this).hide();\n                        self.$el.find(\".icon-button.plus-button\").show();\n                    }\n                }\n            ],\n            {}\n        );\n\n        this.$el.prepend(menu.$el);\n\n        // Show/hide input rows and icons depending on whether parameter is in the tree.\n        if (input.get(\"in_ptree\")) {\n            single_input_row.hide();\n            self.$el.find(\".icon-button.plus-button\").hide();\n        } else {\n            self.$el.find(\".icon-button.toggle\").hide();\n            sweep_inputs_row.hide();\n        }\n\n        // Update input's min, max, number of samples as values change.\n        _.each([\"min\", \"max\", \"num_samples\"], attr => {\n            sweep_inputs_row.find(`.${attr}`).change(function() {\n                input.set(attr, parseFloat($(this).val()));\n            });\n        });\n    }\n});\n\nvar ToolParameterTreeDesignView = Backbone.View.extend({\n    className: \"tree-design\",\n\n    initialize: function(options) {\n        this.render();\n    },\n\n    render: function() {\n        // Start with tool form view.\n        var tool_form_view = new tools.ToolFormView({\n            model: this.model.get(\"tool\")\n        });\n        tool_form_view.render();\n        this.$el.append(tool_form_view.$el);\n\n        // Set up views for each tool input.\n        var self = this;\n\n        var inputs = self.model.get(\"tool\").get(\"inputs\");\n        this.$el\n            .find(\".form-row\")\n            .not(\".form-actions\")\n            .each(function(i) {\n                var input_view = new ToolInputValOrSweepView({\n                    model: inputs.at(i),\n                    tool_row: $(this)\n                });\n            });\n    }\n});\n\n/**\n * Displays and updates parameter tree.\n */\nvar ToolParameterTreeView = Backbone.View.extend({\n    className: \"tool-parameter-tree\",\n\n    initialize: function(options) {\n        // When tree data changes, re-render.\n        this.model.on(\"change:tree_data\", this.render, this);\n    },\n\n    render: function() {\n        // Start fresh.\n        this.$el.children().remove();\n\n        var tree_params = this.model.get_tree_params();\n        if (!tree_params.length) {\n            return;\n        }\n\n        // Set width, height based on params and samples.\n        this.width = 100 * (2 + tree_params.length);\n        this.height = 15 * this.model.get_num_leaves();\n\n        var self = this;\n\n        // Layout tree.\n        var cluster = d3.layout.cluster().size([this.height, this.width - 160]);\n\n        var diagonal = d3.svg.diagonal().projection(d => [d.y, d.x]);\n\n        // Layout nodes.\n        var nodes = cluster.nodes(this.model.get(\"tree_data\"));\n\n        // Setup and add labels for tree levels.\n        var param_depths = _.uniq(_.pluck(nodes, \"y\"));\n        _.each(tree_params, (param, index) => {\n            var x = param_depths[index + 1];\n            var center_left = $(\"#center\").position().left;\n            self.$el.append(\n                $(\"<div>\")\n                    .addClass(\"label\")\n                    .text(param.get(\"label\"))\n                    .css(\"left\", x + center_left)\n            );\n        });\n\n        // Set up vis element.\n        var vis = d3\n            .select(this.$el[0])\n            .append(\"svg\")\n            .attr(\"width\", this.width)\n            .attr(\"height\", this.height + 30)\n            .append(\"g\")\n            .attr(\"transform\", \"translate(40, 20)\");\n\n        // Draw links.\n        var link = vis\n            .selectAll(\"path.link\")\n            .data(cluster.links(nodes))\n            .enter()\n            .append(\"path\")\n            .attr(\"class\", \"link\")\n            .attr(\"d\", diagonal);\n\n        // Draw nodes.\n        var node = vis\n            .selectAll(\"g.node\")\n            .data(nodes)\n            .enter()\n            .append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", d => `translate(${d.y},${d.x})`)\n            .on(\"mouseover\", a_node => {\n                var connected_node_ids = _.pluck(self.model.get_connected_nodes(a_node), \"id\");\n                // TODO: probably can use enter() to do this more easily.\n                node.filter(d => _.find(connected_node_ids, id => id === d.id) !== undefined).style(\"fill\", \"#f00\");\n            })\n            .on(\"mouseout\", () => {\n                node.style(\"fill\", \"#000\");\n            });\n\n        node.append(\"circle\").attr(\"r\", 9);\n\n        node\n            .append(\"text\")\n            .attr(\"dx\", d => (d.children ? -12 : 12))\n            .attr(\"dy\", 3)\n            .attr(\"text-anchor\", d => (d.children ? \"end\" : \"start\"))\n            .text(d => d.name);\n    }\n});\n\n/**\n * Sweepster visualization view. View requires rendering in 3-panel setup for now.\n */\nvar SweepsterVisualizationView = Backbone.View.extend({\n    className: \"Sweepster\",\n\n    helpText:\n        \"<div><h4>Getting Started</h4>\" +\n        \"<ol><li>Create a parameter tree by using the icons next to the tool's parameter names to add or remove parameters.\" +\n        \"<li>Adjust the tree by using parameter inputs to select min, max, and number of samples\" +\n        \"<li>Run the tool with different settings by clicking on tree nodes\" +\n        \"</ol></div>\",\n\n    initialize: function(options) {\n        this.canvas_manager = new visualization.CanvasManager(this.$el.parents(\"body\"));\n        this.tool_param_tree_view = new ToolParameterTreeView({\n            model: this.model.get(\"parameter_tree\")\n        });\n        this.track_collection_container = $(\"<table/>\").addClass(\"tracks\");\n\n        // Handle node clicks for tree data.\n        this.model.get(\"parameter_tree\").on(\"change:tree_data\", this.handle_node_clicks, this);\n\n        // Each track must have a view so it has a canvas manager.\n        var self = this;\n        this.model.get(\"tracks\").each(track => {\n            track.get(\"track\").view = self;\n        });\n\n        // Set block, reverse strand block colors; these colors will be used for all tracks.\n        this.config = config.ConfigSettingCollection.from_models_and_saved_values(\n            [\n                {\n                    key: \"name\",\n                    label: \"Name\",\n                    type: \"text\",\n                    default_value: \"\"\n                },\n                {\n                    key: \"a_color\",\n                    label: \"A Color\",\n                    type: \"color\",\n                    default_value: \"#FF0000\"\n                },\n                {\n                    key: \"c_color\",\n                    label: \"C Color\",\n                    type: \"color\",\n                    default_value: \"#00FF00\"\n                },\n                {\n                    key: \"g_color\",\n                    label: \"G Color\",\n                    type: \"color\",\n                    default_value: \"#0000FF\"\n                },\n                {\n                    key: \"t_color\",\n                    label: \"T Color\",\n                    type: \"color\",\n                    default_value: \"#FF00FF\"\n                },\n                {\n                    key: \"n_color\",\n                    label: \"N Color\",\n                    type: \"color\",\n                    default_value: \"#AAAAAA\"\n                },\n                {\n                    key: \"block_color\",\n                    label: \"Block color\",\n                    type: \"color\"\n                },\n                {\n                    key: \"reverse_strand_color\",\n                    label: \"Antisense strand color\",\n                    type: \"color\"\n                }\n            ],\n            {}\n        );\n    },\n\n    render: function() {\n        // Render tree design view in left panel.\n        var tree_design_view = new ToolParameterTreeDesignView({\n            model: this.model.get(\"parameter_tree\")\n        });\n\n        $(\"#left\").append(tree_design_view.$el);\n\n        // Render track collection container/view in right panel.\n        var self = this;\n\n        var regions = self.model.get(\"regions\");\n        var tr = $(\"<tr/>\").appendTo(this.track_collection_container);\n\n        regions.each(region => {\n            tr.append($(\"<th>\").text(region.toString()));\n        });\n        tr\n            .children()\n            .first()\n            .attr(\"colspan\", 2);\n\n        var tracks_div = $(\"<div>\").addClass(\"tiles\");\n        $(\"#right\").append(tracks_div.append(this.track_collection_container));\n\n        self.model.get(\"tracks\").each(track => {\n            self.add_track(track);\n        });\n\n        // -- Render help and tool parameter tree in center panel. --\n\n        // Help includes text and a close button.\n        var help_div = $(this.helpText).addClass(\"help\");\n\n        var close_button = mod_icon_btn.create_icon_buttons_menu([\n            {\n                title: _l(\"Close\"),\n                icon_class: \"cross-circle\",\n                on_click: function() {\n                    $(\".tooltip\").remove();\n                    help_div.remove();\n                }\n            }\n        ]);\n\n        help_div.prepend(close_button.$el.css(\"float\", \"right\"));\n        $(\"#center\").append(help_div);\n\n        // Parameter tree:\n        this.tool_param_tree_view.render();\n        $(\"#center\").append(this.tool_param_tree_view.$el);\n\n        // Set up handler for tree node clicks.\n        this.handle_node_clicks();\n\n        // Set up visualization menu.\n        var menu = mod_icon_btn.create_icon_buttons_menu(\n            [\n                // Save.\n                /*\n                { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                    // Show saving dialog box\n                    show_modal(\"Saving...\", \"progress\");\n\n                    viz.save().success(function(vis_info) {\n                        hide_modal();\n                        viz.set({\n                            'id': vis_info.vis_id,\n                            'has_changes': false\n                        });\n                    })\n                    .error(function() {\n                        show_modal( \"Could Not Save\", \"Could not save visualization. Please try again later.\",\n                                    { \"Close\" : hide_modal } );\n                    });\n                } },\n                */\n                // Change track modes.\n                {\n                    icon_class: \"chevron-expand\",\n                    title: \"Set display mode\"\n                },\n                // Close viz.\n                {\n                    icon_class: \"cross-circle\",\n                    title: _l(\"Close\"),\n                    on_click: function() {\n                        window.location = \"${h.url_for( controller='visualization', action='list' )}\";\n                    }\n                }\n            ],\n            {\n                tooltip_config: { placement: \"bottom\" }\n            }\n        );\n\n        // Create mode selection popup. Mode selection changes default mode and mode for all tracks.\n        var modes = [\"Squish\", \"Pack\"];\n\n        var mode_mapping = {};\n        _.each(modes, mode => {\n            mode_mapping[mode] = () => {\n                self.model.set(\"default_mode\", mode);\n                self.model.get(\"tracks\").each(track => {\n                    track.set(\"mode\", mode);\n                });\n            };\n        });\n\n        make_popupmenu(menu.$el.find(\".chevron-expand\"), mode_mapping);\n\n        menu.$el.attr(\"style\", \"float: right\");\n        $(\"#right .unified-panel-header-inner\").append(menu.$el);\n    },\n\n    get_base_color: function(base) {\n        return this.config.get_value(`${base.toLowerCase()}_color`) || this.config.get_value(\"n_color\");\n    },\n\n    run_tool_on_dataset: function(settings) {\n        var tool = this.model.get(\"tool\");\n        var tool_name = tool.get(\"name\");\n        var dataset = this.model.get(\"dataset\");\n        tool.set_input_values(settings.get(\"values\"));\n        $.when(tool.rerun(dataset)).then(outputs => {\n            // TODO.\n        });\n\n        show_modal(\n            `Running ${tool_name} on complete dataset`,\n            `${tool_name} is running on dataset '${dataset.get(\"name\")}'. Outputs are in the dataset's history.`,\n            {\n                Ok: function() {\n                    hide_modal();\n                }\n            }\n        );\n    },\n\n    /**\n     * Add track to model and view.\n     */\n    add_track: function(pm_track) {\n        var self = this;\n        var param_tree = this.model.get(\"parameter_tree\");\n\n        // Add track to model.\n        self.model.add_track(pm_track);\n\n        var track_view = new SweepsterTrackView({\n            model: pm_track,\n            canvas_manager: self.canvas_manager\n        });\n        track_view.on(\"run_on_dataset\", self.run_tool_on_dataset, self);\n        self.track_collection_container.append(track_view.$el);\n        track_view.$el.hover(\n            () => {\n                var settings_leaf = param_tree.get_leaf(pm_track.get(\"settings\").get(\"values\"));\n                var connected_node_ids = _.pluck(param_tree.get_connected_nodes(settings_leaf), \"id\");\n\n                // TODO: can do faster with enter?\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .filter(d => _.find(connected_node_ids, id => id === d.id) !== undefined)\n                    .style(\"fill\", \"#f00\");\n            },\n            () => {\n                d3\n                    .select(self.tool_param_tree_view.$el[0])\n                    .selectAll(\"g.node\")\n                    .style(\"fill\", \"#000\");\n            }\n        );\n        return pm_track;\n    },\n\n    /**\n     * Sets up handling when tree nodes are clicked. When a node is clicked, the tool is run for each of\n     * the settings defined by the node's subtree and tracks are added for each run.\n     */\n    handle_node_clicks: function() {\n        // When node clicked in tree, run tool and add tracks to model.\n        var self = this;\n\n        var param_tree = this.model.get(\"parameter_tree\");\n        var regions = this.model.get(\"regions\");\n\n        var node = d3.select(this.tool_param_tree_view.$el[0]).selectAll(\"g.node\");\n\n        node.on(\"click\", (d, i) => {\n            // Get all settings corresponding to node.\n            var tool = self.model.get(\"tool\");\n\n            var dataset = self.model.get(\"dataset\");\n            var all_settings = param_tree.get_node_settings(d);\n            var run_jobs_deferred = $.Deferred();\n\n            // Do not allow 10+ jobs to be run.\n            if (all_settings.length >= 10) {\n                show_modal(\n                    \"Whoa there cowboy!\",\n                    `You clicked on a node to try ${self.model.get(\"tool\").get(\"name\")} with ${\n                        all_settings.length\n                    } different combinations of settings. You can only run 10 jobs at a time.`,\n                    {\n                        Ok: function() {\n                            hide_modal();\n                            run_jobs_deferred.resolve(false);\n                        }\n                    }\n                );\n            } else {\n                run_jobs_deferred.resolve(true);\n            }\n\n            // Take action when deferred resolves.\n            $.when(run_jobs_deferred).then(run_jobs => {\n                if (!run_jobs) {\n                    return;\n                }\n\n                // Create and add tracks for each settings group.\n                var new_tracks = _.map(all_settings, settings => {\n                    var pm_track = new SweepsterTrack({\n                        settings: settings,\n                        regions: regions,\n                        mode: self.model.get(\"default_mode\")\n                    });\n                    self.add_track(pm_track);\n                    return pm_track;\n                });\n\n                // For each track, run tool using track's settings and update track.\n                _.each(new_tracks, (pm_track, index) => {\n                    setTimeout(() => {\n                        // Set inputs and run tool.\n                        tool.set_input_values(pm_track.get(\"settings\").get(\"values\"));\n                        $.when(tool.rerun(dataset, regions)).then(output => {\n                            // HACKish: output is an HDA with track config attribute. To create a track\n                            // that works correctly with Backbone relational, it is necessary to\n                            // use a modified version of the track config.\n                            var dataset = output.first();\n\n                            var track_config = dataset.get(\"track_config\");\n                            // Set dataset to be the tool's output.\n                            track_config.dataset = dataset;\n                            // Set tool to null so that it is not unpacked; unpacking it messes with\n                            // the tool parameters and parameter tree.\n                            track_config.tool = null;\n\n                            track_config.prefs = self.config.to_key_value_dict();\n\n                            // Create and add track for output dataset.\n                            var track_obj = tracks.object_from_template(track_config, self, null);\n                            track_obj.init_for_tool_data();\n\n                            pm_track.set(\"track\", track_obj);\n                        });\n                    }, index * 10000);\n                });\n            });\n        });\n    }\n});\n\nexport default {\n    SweepsterVisualization: SweepsterVisualization,\n    SweepsterVisualizationView: SweepsterVisualizationView\n};\n"]}