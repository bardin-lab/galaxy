{"version":3,"sources":["layout/page.js"],"names":["View","Backbone","extend","el","className","_panelids","initialize","options","self","this","config","_","defaults","message_box_visible","message_box_content","message_box_class","show_inactivity_warning","inactivity_box_content","modal","_uiModal2","default","display","view","title","setWindowTitle","allow_title_display","Router","center","_panel2","CenterPanel","Galaxy","_template","$","masthead","$el","append","$messagebox","panels","router","panel_id","panel_class_name","charAt","slice","panel_class","panel_instance","attr","toString","html","SidePanel","id","render","each","root","pushState","remove","renderMessageBox","renderInactivityBox","renderPanels","_checkCommunicationServerOnline","content","level","addClass","hide","verificationLink","text","$inactivebox","toggle","show","panel","css","join","host","preferences","communication_server_host","port","window","communication_server_port","user","attributes","url","indexOf","communication_server","ajax","$chat_icon_element","success","data","error"],"mappings":"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","file":"../../scripts/layout/page.js","sourcesContent":["import Masthead from \"layout/masthead\";\nimport Panel from \"layout/panel\";\nimport Modal from \"mvc/ui/ui-modal\";\nimport Utils from \"utils/utils\";\n\nvar View = Backbone.View.extend({\n    el: \"body\",\n    className: \"full-content\",\n    _panelids: [\"left\", \"right\"],\n\n    initialize: function(options) {\n        var self = this;\n        this.config = _.defaults(options.config || {}, {\n            message_box_visible: false,\n            message_box_content: \"\",\n            message_box_class: \"info\",\n            show_inactivity_warning: false,\n            inactivity_box_content: \"\"\n        });\n\n        // attach global objects, build mastheads\n        Galaxy.modal = this.modal = new Modal.View();\n        Galaxy.display = this.display = view => {\n            if (view.title) {\n                Utils.setWindowTitle(view.title);\n                view.allow_title_display = false;\n            } else {\n                Utils.setWindowTitle();\n                view.allow_title_display = true;\n            }\n            self.center.display(view);\n        };\n        Galaxy.router = this.router = options.Router && new options.Router(self, options);\n        this.masthead = new Masthead.View(this.config);\n        this.center = new Panel.CenterPanel();\n\n        // build page template\n        this.$el.attr(\"scroll\", \"no\");\n        this.$el.html(this._template());\n        this.$(\"#masthead\").replaceWith(this.masthead.$el);\n        this.$(\"#center\").append(this.center.$el);\n        this.$el.append(this.masthead.frame.$el);\n        this.$el.append(this.modal.$el);\n        this.$messagebox = this.$(\"#messagebox\");\n        this.$inactivebox = this.$(\"#inactivebox\");\n\n        // build panels\n        this.panels = {};\n        _.each(this._panelids, panel_id => {\n            var panel_class_name = panel_id.charAt(0).toUpperCase() + panel_id.slice(1);\n            var panel_class = options[panel_class_name];\n            if (panel_class) {\n                var panel_instance = new panel_class(self, options);\n                self[panel_instance.toString()] = panel_instance;\n                self.panels[panel_id] = new Panel.SidePanel({\n                    id: panel_id,\n                    el: self.$(`#${panel_id}`),\n                    view: panel_instance\n                });\n            }\n        });\n        this.render();\n\n        // start the router\n        if (this.router) {\n            Backbone.history.start({\n                root: Galaxy.root,\n                pushState: true\n            });\n        }\n    },\n\n    render: function() {\n        // TODO: Remove this line after select2 update\n        $(\".select2-hidden-accessible\").remove();\n        this.masthead.render();\n        this.renderMessageBox();\n        this.renderInactivityBox();\n        this.renderPanels();\n        this._checkCommunicationServerOnline();\n        return this;\n    },\n\n    /** Render message box */\n    renderMessageBox: function() {\n        if (this.config.message_box_visible) {\n            var content = this.config.message_box_content || \"\";\n            var level = this.config.message_box_class || \"info\";\n            this.$el.addClass(\"has-message-box\");\n            this.$messagebox\n                .attr(\"class\", `panel-${level}-message`)\n                .html(content)\n                .toggle(!!content)\n                .show();\n        } else {\n            this.$el.removeClass(\"has-message-box\");\n            this.$messagebox.hide();\n        }\n        return this;\n    },\n\n    /** Render inactivity warning */\n    renderInactivityBox: function() {\n        if (this.config.show_inactivity_warning) {\n            var content = this.config.inactivity_box_content || \"\";\n            var verificationLink = $(\"<a/>\")\n                .attr(\"href\", `${Galaxy.root}user/resend_verification`)\n                .text(\"Resend verification\");\n            this.$el.addClass(\"has-inactivity-box\");\n            this.$inactivebox\n                .html(`${content} `)\n                .append(verificationLink)\n                .toggle(!!content)\n                .show();\n        } else {\n            this.$el.removeClass(\"has-inactivity-box\");\n            this.$inactivebox.hide();\n        }\n        return this;\n    },\n\n    /** Render panels */\n    renderPanels: function() {\n        var self = this;\n        _.each(this._panelids, panel_id => {\n            var panel = self.panels[panel_id];\n            if (panel) {\n                panel.render();\n            } else {\n                self.$(\"#center\").css(panel_id, 0);\n                self.$(`#${panel_id}`).hide();\n            }\n        });\n        return this;\n    },\n\n    /** body template */\n    _template: function() {\n        return [\n            '<div id=\"everything\">',\n            '<div id=\"background\"/>',\n            '<div id=\"masthead\"/>',\n            '<div id=\"messagebox\"/>',\n            '<div id=\"inactivebox\" class=\"panel-warning-message\" />',\n            '<div id=\"left\" />',\n            '<div id=\"center\" />',\n            '<div id=\"right\" />',\n            \"</div>\",\n            '<div id=\"dd-helper\" />'\n        ].join(\"\");\n    },\n\n    toString: function() {\n        return \"PageLayoutView\";\n    },\n\n    /** Check if the communication server is online and show the icon otherwise hide the icon */\n    _checkCommunicationServerOnline: function() {\n        var host = window.Galaxy.config.communication_server_host;\n        var port = window.Galaxy.config.communication_server_port;\n        var preferences = window.Galaxy.user.attributes.preferences;\n        var $chat_icon_element = $(\"#show-chat-online\");\n        /** Check if the user has deactivated the communication in it's personal settings */\n        if (preferences && [\"1\", \"true\"].indexOf(preferences.communication_server) != -1) {\n            // See if the configured communication server is available\n            $.ajax({\n                url: `${host}:${port}`\n            })\n                .success(data => {\n                    // enable communication only when a user is logged in\n                    if (window.Galaxy.user.id !== null) {\n                        if ($chat_icon_element.css(\"visibility\") === \"hidden\") {\n                            $chat_icon_element.css(\"visibility\", \"visible\");\n                        }\n                    }\n                })\n                .error(data => {\n                    // hide the communication icon if the communication server is not available\n                    $chat_icon_element.css(\"visibility\", \"hidden\");\n                });\n        } else {\n            $chat_icon_element.css(\"visibility\", \"hidden\");\n        }\n    }\n});\n\nexport default { View: View };\n"]}