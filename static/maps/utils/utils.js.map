{"version":3,"sources":["utils/utils.js"],"names":["iframe","deepeach","sanitize","callback","isEmpty","textify","i","get","d","request","cssGetAttribute","cssLoadFile","appendScriptStyle","replacedText","replacePattern1","replacePattern2","replacePattern3","inputText","replace","dict","JSON","parse","stringify","obj","isJSON","text","test","linkify","content","$","value","Array","clone","length","undefined","indexOf","isArray","lst","pos","toString","lastIndexOf","substr","options","top","__utils__get__","cache_key","cache","success","window","console","debug","url","data","response","error","status","ajaxConfig","param","dataType","ajax","done","jQuery","parseJSON","e","type","response_text","responseText","isEmptyObject","always","complete","el","appendTo","remove","Galaxy","merge","optionsDefault","classname","roundToDecimalPlaces","number","numPlaces","placesMultiplier","Math","round","bytesToString","size","normal_font","numberPlaces","unit","tb","gb","mb","kb","rounded","__utils__uid__","Date","getHours","getMinutes","getDate","getMonth","getFullYear","hours","minutes","styles","uid","getQueryString","key","decodeURIComponent","search","encodeURIComponent","title","config","brand","_localization2","default","setWindowTitle"],"mappings":"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","file":"../../scripts/utils/utils.js","sourcesContent":["/**\n * Galaxy utilities comprises small functions, which at this point\n * do not require their own classes/files\n */\nimport _l from \"utils/localization\";\n/** Builds a basic iframe */\nexport function iframe(src) {\n    return `<iframe src=\"${src}\" frameborder=\"0\" style=\"width: 100%; height: 100%;\"/>`;\n}\n\n/** Traverse through json */\nexport function deepeach(dict, callback) {\n    for (var i in dict) {\n        var d = dict[i];\n        if (_.isObject(d)) {\n            var new_dict = callback(d);\n            new_dict && (dict[i] = new_dict);\n            deepeach(d, callback);\n        }\n    }\n}\n\n/** Identifies urls and replaces them with anchors */\nexport function linkify(inputText) {\n    var replacedText;\n    var replacePattern1;\n    var replacePattern2;\n    var replacePattern3;\n\n    // URLs starting with http://, https://, or ftp://\n    replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n    replacedText = inputText.replace(replacePattern1, '<a href=\"$1\" target=\"_blank\">$1</a>');\n\n    // URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n    replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n    replacedText = replacedText.replace(replacePattern2, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\n\n    // Change email addresses to mailto:: links.\n    replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n    replacedText = replacedText.replace(replacePattern3, '<a href=\"mailto:$1\">$1</a>');\n\n    return replacedText;\n}\n\n/** Clone */\nexport function clone(obj) {\n    return JSON.parse(JSON.stringify(obj) || null);\n}\n\n/**\n * Check if a string is a json string\n * @param{String}   text - Content to be validated\n */\nexport function isJSON(text) {\n    return /^[\\],:{}\\s]*$/.test(\n        text\n            .replace(/\\\\[\"\\\\\\/bfnrtu]/g, \"@\")\n            .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, \"]\")\n            .replace(/(?:^|:|,)(?:\\s*\\[)+/g, \"\")\n    );\n}\n\n/**\n * Sanitize/escape a string\n * @param{String}   content - Content to be sanitized\n */\nexport function sanitize(content) {\n    return $(\"<div/>\")\n        .text(content)\n        .html();\n}\n\n/**\n * Checks if a value or list of values is `empty`\n * usually used for selectable options\n * @param{String}   value - Value or list to be validated\n */\nexport function isEmpty(value) {\n    if (!(value instanceof Array)) {\n        value = [value];\n    }\n    if (value.length === 0) {\n        return true;\n    }\n    for (var i in value) {\n        if ([\"__null__\", \"__undefined__\", null, undefined].indexOf(value[i]) > -1) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Convert list to pretty string\n * @param{String}   lst - List of strings to be converted in human readable list sentence\n */\nexport function textify(lst) {\n    if ($.isArray(lst)) {\n        lst = lst.toString().replace(/,/g, \", \");\n        var pos = lst.lastIndexOf(\", \");\n        if (pos != -1) {\n            lst = `${lst.substr(0, pos)} or ${lst.substr(pos + 2)}`;\n        }\n        return lst;\n    }\n    return \"\";\n}\n\n/**\n * Request handler for GET\n * @param{String}   url     - Url request is made to\n * @param{Function} success - Callback on success\n * @param{Function} error   - Callback on error\n * @param{Boolean}  cache   - Use cached data if available\n */\nexport function get(options) {\n    top.__utils__get__ = top.__utils__get__ || {};\n    var cache_key = JSON.stringify(options);\n    if (options.cache && top.__utils__get__[cache_key]) {\n        options.success && options.success(top.__utils__get__[cache_key]);\n        window.console.debug(`utils.js::get() - Fetching from cache [${options.url}].`);\n    } else {\n        request({\n            url: options.url,\n            data: options.data,\n            success: function(response) {\n                top.__utils__get__[cache_key] = response;\n                options.success && options.success(response);\n            },\n            error: function(response, status) {\n                options.error && options.error(response, status);\n            }\n        });\n    }\n}\n\n/**\n * Request handler\n * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n * @param{String}   url     - Url request is made to\n * @param{Object}   data    - Data send to url\n * @param{Function} success - Callback on success\n * @param{Function} error   - Callback on error\n */\nexport function request(options) {\n    // prepare ajax\n    var ajaxConfig = {\n        contentType: \"application/json\",\n        type: options.type || \"GET\",\n        data: options.data || {},\n        url: options.url\n    };\n    // encode data into url\n    if (ajaxConfig.type == \"GET\" || ajaxConfig.type == \"DELETE\") {\n        if (!$.isEmptyObject(ajaxConfig.data)) {\n            ajaxConfig.url += ajaxConfig.url.indexOf(\"?\") == -1 ? \"?\" : \"&\";\n            ajaxConfig.url += $.param(ajaxConfig.data, true);\n        }\n        ajaxConfig.data = null;\n    } else {\n        ajaxConfig.dataType = \"json\";\n        ajaxConfig.url = ajaxConfig.url;\n        ajaxConfig.data = JSON.stringify(ajaxConfig.data);\n    }\n\n    // make request\n    $.ajax(ajaxConfig)\n        .done(response => {\n            if (typeof response === \"string\") {\n                try {\n                    response = response.replace(\"Infinity,\", '\"Infinity\",');\n                    response = jQuery.parseJSON(response);\n                } catch (e) {\n                    console.debug(e);\n                }\n            }\n            options.success && options.success(response);\n        })\n        .fail(response => {\n            var response_text = null;\n            try {\n                response_text = jQuery.parseJSON(response.responseText);\n            } catch (e) {\n                response_text = response.responseText;\n            }\n            options.error && options.error(response_text, response.status);\n        })\n        .always(() => {\n            options.complete && options.complete();\n        });\n}\n\n/**\n * Read a property value from CSS\n * @param{String}   classname   - CSS class\n * @param{String}   name        - CSS property\n */\nexport function cssGetAttribute(classname, name) {\n    var el = $(`<div class=\"${classname}\"></div>`);\n    el.appendTo(\":eq(0)\");\n    var value = el.css(name);\n    el.remove();\n    return value;\n}\n\n/**\n * Load a CSS file\n * @param{String}   url - Url of CSS file\n */\nexport function cssLoadFile(url) {\n    if (!$(`link[href^=\"${url}\"]`).length) {\n        $(`<link href=\"${Galaxy.root}${url}\" rel=\"stylesheet\">`).appendTo(\"head\");\n    }\n}\n\n/**\n * Safely merge to dictionaries\n * @param{Object}   options         - Target dictionary\n * @param{Object}   optionsDefault  - Source dictionary\n */\nexport function merge(options, optionsDefault) {\n    if (options) {\n        return _.defaults(options, optionsDefault);\n    } else {\n        return optionsDefault;\n    }\n}\n\n/**\n * Round floaing point 'number' to 'numPlaces' number of decimal places.\n * @param{Object}   number      a floaing point number\n * @param{Object}   numPlaces   number of decimal places\n */\nexport function roundToDecimalPlaces(number, numPlaces) {\n    var placesMultiplier = 1;\n    for (var i = 0; i < numPlaces; i++) {\n        placesMultiplier *= 10;\n    }\n    return Math.round(number * placesMultiplier) / placesMultiplier;\n}\n\n// calculate on import\nvar kb = 1024;\n\nvar mb = kb * kb;\nvar gb = mb * kb;\nvar tb = gb * kb;\n/**\n * Format byte size to string with units\n * @param{Integer}   size           - Size in bytes\n * @param{Boolean}   normal_font    - Switches font between normal and bold\n */\nexport function bytesToString(size, normal_font, numberPlaces) {\n    numberPlaces = numberPlaces !== undefined ? numberPlaces : 1;\n    // identify unit\n    var unit = \"\";\n    if (size >= tb) {\n        size = size / tb;\n        unit = \"TB\";\n    } else if (size >= gb) {\n        size = size / gb;\n        unit = \"GB\";\n    } else if (size >= mb) {\n        size = size / mb;\n        unit = \"MB\";\n    } else if (size >= kb) {\n        size = size / kb;\n        unit = \"KB\";\n    } else if (size > 0) {\n        unit = \"b\";\n    } else {\n        return normal_font ? \"0 b\" : \"<strong>-</strong>\";\n    }\n    // return formatted string\n    var rounded = unit == \"b\" ? size : roundToDecimalPlaces(size, numberPlaces);\n    if (normal_font) {\n        return `${rounded} ${unit}`;\n    } else {\n        return `<strong>${rounded}</strong> ${unit}`;\n    }\n}\n\n/** Create a unique id */\nexport function uid() {\n    top.__utils__uid__ = top.__utils__uid__ || 0;\n    return `uid-${top.__utils__uid__++}`;\n}\n\n/** Create a time stamp */\nexport function time() {\n    var d = new Date();\n    var hours = (d.getHours() < 10 ? \"0\" : \"\") + d.getHours();\n    var minutes = (d.getMinutes() < 10 ? \"0\" : \"\") + d.getMinutes();\n    return `${d.getDate()}/${d.getMonth() + 1}/${d.getFullYear()}, ${hours}:${minutes}`;\n}\n\n/** Append script and style tags to Galaxy main application */\nexport function appendScriptStyle(data) {\n    // create a script tag inside head tag\n    if (data.script && data.script !== \"\") {\n        $(\"<script/>\", { type: \"text/javascript\" })\n            .text(data.script)\n            .appendTo(\"head\");\n    }\n    // create a style tag inside head tag\n    if (data.styles && data.styles !== \"\") {\n        $(\"<style/>\", { type: \"text/css\" })\n            .text(data.styles)\n            .appendTo(\"head\");\n    }\n}\n\n/** Get querystrings from url */\nexport function getQueryString(key) {\n    return decodeURIComponent(\n        window.location.search.replace(\n            new RegExp(`^(?:.*[&\\\\?]${encodeURIComponent(key).replace(/[\\.\\+\\*]/g, \"\\\\$&\")}(?:\\\\=([^&]*))?)?.*$`, \"i\"),\n            \"$1\"\n        )\n    );\n}\n\nexport function setWindowTitle(title) {\n    if (title) {\n        window.document.title = `Galaxy ${window.Galaxy.config.brand ? ` | ${window.Galaxy.config.brand}` : \"\"} | ${_l(\n            title\n        )}`;\n    } else {\n        window.document.title = `Galaxy ${window.Galaxy.config.brand ? ` | ${window.Galaxy.config.brand}` : \"\"}`;\n    }\n}\n\nexport default {\n    cssLoadFile: cssLoadFile,\n    cssGetAttribute: cssGetAttribute,\n    get: get,\n    merge: merge,\n    iframe: iframe,\n    bytesToString: bytesToString,\n    uid: uid,\n    time: time,\n    request: request,\n    sanitize: sanitize,\n    textify: textify,\n    isEmpty: isEmpty,\n    deepeach: deepeach,\n    isJSON: isJSON,\n    clone: clone,\n    linkify: linkify,\n    appendScriptStyle: appendScriptStyle,\n    getQueryString: getQueryString,\n    setWindowTitle: setWindowTitle\n};\n"]}